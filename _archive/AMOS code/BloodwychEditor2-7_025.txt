'  
' BLOODWYCH EDITOR V2.7b 
' BY DOM CRESSWELL - AKA HUNGRY HORACE A 
'

Set Buffer 300
Set Stack 40
' E=Execall(-132)
Flush Libs : Erase All 

Dim LOOKUPTOWER(5),LOOKUPSWITCHES(5),LOOKUPTRIGGERS(5),LOOKUPMONSTER(5),LOOKUPOBJECTS(5)
Dim GRADEOFFSET_VAL(5)
Dim GRADEOFFSET_POS(5)

Global LOOKUPTOWER(),LOOKUPSWITCHES(),LOOKUPTRIGGERS(),LOOKUPMONSTER(),LOOKUPOBJECTS()
Global LOOKUPMONSTERCOUNT,LOOKUPDUNGEONSTART,LOOKUPKEEPSTART,LOOKUPKEEPFLOORSTART,LOOKUPGEMBLU,LOOKUPGEMTAN
Global LOOKUPCHAMPIONSTATS,LOOKUPCHAMPIONPOCKETS,LOOKUPSPELLTEXT,LOOKUPSPELLNAME,LOOKUPNAMES
Global LOOKUPWALLSCROLLREF,LOOKUPWALLSCROLLTEXT
Global LOOKUPHARDCODE_WOODTRAP1,LOOKUPHARDCODE_WOODTRAP2
Global LOOKUPHARDCODE_SERP1,LOOKUPHARDCODE_MOON1
Global LOOKUPHARDCODE_MOON2,LOOKUPHARDCODE_DRAG1
Global LOOKUPHARDCODE_DRAG2,LOOKUPHARDCODE_CHAOS1
Global LOOKUPHARDCODE_CHAOS2
Global LOOKUPGRADELIMIT1,LOOKUPGRADELIMIT2
Global LOOKUP_MENU_TEXTLOCALE,LOOKUP_MENU_LEA_CODE,LOOKUP_MENU_CONTROL
Global CRACKPOINT
Global MONSTERTYPECOUNT
Global LOOKUPCHARSHEADS,LOOKUPCHARSBODIES,LOOKUPCHARSCOLOURS
Global LOOKUPMONSTERPALETTE,LOOKUPSUMMONCOLOURS,LOOKUPBEHOLDERCOLOURS,LOOKUPBEHEMOTHCOLOURS,LOOKUPCRABCOLOURS,LOOKUPDRAGONCOLOURS,LOOKUPENTROPYPALETTE
Global GRADEOFFSET_VAL(),GRADEOFFSET_POS()
Global SUMMONOFFSET,BEHOLDEROFFSET,BEHEMOTHOFFSET,CRABOFFSET,BIGDRAGONOFFSET,SMALLDRAGONOFFSET
Global NUMBEROFGRADES,MONSTERCOLOURBANK
Global BINARY$,FILEPATH$,BWVER$,DBUG,GAME,BEXT,SVEGAME,SVEFILE$,USECURS
Global LIGHT,MAKEMAP
CHKCOMMAND$=Lower$(Command Line$)
CHKCOMMAND$="light"
If Instr(CHKCOMMAND$,"debug") Then DBUG=True
If Instr(CHKCOMMAND$,"light") Then LIGHT=True
If Instr(CHKCOMMAND$,"maps") : LIGHT=True : MAKEMAP=True : End If 

LIGHT=True
DBUG=False
DBUG=True
 LIGHT=False
 MAKEMAP=False

BINARY$="Bloodwych439"
FILEPATH$="data/"

MONSTERTYPECOUNT=$55
Screen Open 0,320,256,16,Lowres : Screen Hide 0
Change Font Dir$+"editor/Graphics/bloodfnt.font",6
Make Bank Font 9 : Change Bank Font 9
Screen Close 0
Load Dir$+"editor/Graphics/icons.abk",2
Load Iff "editor/graphics/graphics",2 : Screen Hide 2
_GETBINARY
If BINARY$="" Then Goto LEAVE
_GETVERSION
_DATAMAPLOAD
If LOOKUPTOWER(0)=0 Then Goto LEAVE
Load Dir$+"editor/Graphics/bobs.abk",1

_GAMEHACKS
_MAKECOLOURBOBS
_MAINEDITOR


LEAVE:
'   E=Execall(-138)
End 


Procedure _DO_PATCHES

' lets read through our defined patches, and decide if they are to be done 
         INOUTFOLDER$="editor/Game Data/Patch Files ("+BINARY$+")"
If Exist(INOUTFOLDER$+"/patches.enabled")=False : Pop Proc : End If 
   Wload INOUTFOLDER$+"/patches.enabled",20

' bank 10 will still be the final EXE
   Wload FILEPATH$+BINARY$,10

' =====================  now, some patches are going 
' to require us to expand the binary (fun!)
'  
   Screen Open 3,320,256,16,Lowres : Clear Key 
   Curs Off : Hide : Flash Off : Auto View On : Autoback 0
   Get Icon Palette : Cls 0 : Colour $F,$101 : Ink 6,0
   Change Bank Font 9 : Flash Off 
   YY=20
   Text 10,YY,"PATCHING "+Upper$(BINARY$) : YY=YY+10

'===  stage 1, set up any additional data/code needed
  Reserve As Work 19,$18000
' patch 1 (crack) - no extra code needed 

' patch 2 (menu) 
' the patch has some rules:
'  
' is there a file of text, larger than the original space? 
' BW original space = $
' bext original space = $

' check the option is enabled
 If Peek(Start(20)+$1)<>False
   ' check we have a parameter for it 
   If Exist(INOUTFOLDER$+"/menuoptions.modifications")
     Wload INOUTFOLDER$+"/menuoptions.modifications",21



   Else 
     Text 10,YY,"COPY PROTECTION REMOVED" : YY=YY+10
   End If 
 End If 



' store the size and save the block (temp) 
' close the original, open a larger size 
' load original
' load temp block


' apply pacthes to exe/codemover etc 

' apply patches into game code 
'
'
'   _FILLTEXT
'   Text 30,YY,"TEXT STRINGS FILLED" : YY=YY+10 : Wait 1 
'
'   _BUILDEXTRAS 
'   Text 30,YY,"NEW CODE BUILT" : YY=YY+10 : Wait 1
'
'   _MONSTERCOLOURS
'   Text 30,YY,"MONSTER COLOUR VALUES ADDED" : YY=YY+10 : Wait 1 
'
'    _EXPANDFILE 
'    Text 30,YY,"GAMEFILE EXPANDED" : YY=YY+10 : Wait 1
'
'   _ADDHACKS
'    Text 30,YY,"PATCHES DONE" : YY=YY+10 : Wait 80
'
'   End  


' ---- this is the final bit, where we actually apply patches
_PERFORM_PATCHES:
' patch 1 ... crack game 
     If Peek(Start(20)+$0)<>False and CRACKPOINT<>0 and BEXT=False
       ' -- poke the copy protection you lamer
         Loke Start(10)+CRACKPOINT+$0,$23FC8488
         Loke Start(10)+CRACKPOINT+$4,$FFC40000
         Loke Start(10)+CRACKPOINT+$8,$247000
         Loke Start(10)+CRACKPOINT+$C,$4E750000
         Text 10,YY,"BW COPY PROTECTION REMOVED" : YY=YY+10
     Else If Peek(Start(20)+$0)<>False and CRACKPOINT<>0 and BEXT=True
       ' -- poke the copy protection you lamer
         Loke Start(10)+CRACKPOINT+$0,$23FC4F8B
         Loke Start(10)+CRACKPOINT+$4,$39120000
         Loke Start(10)+CRACKPOINT+$8,$247000
         Loke Start(10)+CRACKPOINT+$C,$4E750000
         Text 10,YY,"BEXT COPY PROTECTION REMOVED" : YY=YY+10
     End If 

    Erase 20

   Wait 50
   Screen Close 3
End Proc

Procedure _EXPANDFILE
Erase All 

' -=---- get source file info
               Wload INFILE$,5
      Examine Object INFILE$
       _ORIGINALSIZE=Object Size
     _ORIGINALCHUNKS=Leek(Start(5)+$1C)

' -=---- get extra file info 

               Wload APPFILE$,4
      Examine Object APPFILE$
      _APPENDEDSIZE=Object Size
      _APPENDEDEXPAND=(((_APPENDEDSIZE-1)/4)*4)+4
      _APPENDEDCHUNKS=_APPENDEDEXPAND/4
      _NEWSIZE=_ORIGINALSIZE+_APPENDEDEXPAND

Reserve As Work 1,_NEWSIZE

' ==  save header  
' ---------------
      For A=0 To $1F
         GTDATA=Peek(Start(5)+A)
         Poke Start(1)+A,GTDATA
      Next A

' == save maindata 
' ---------------- 
       For A=$20 To _ORIGINALSIZE-$5 Step 4
         GTDATA=Leek(Start(5)+A)
         Loke Start(1)+A,GTDATA
       Next A

' == save appended data  
' ---------------------  
      A=_ORIGINALSIZE-$4
      For B=_0 To _APPENDEDSIZE
         GTDATA=Peek(Start(4)+B)
         Poke Start(1)+A+B,GTDATA
      Next B

' == save footer 
' -------------- 
      A=_ORIGINALSIZE-$4
         GTDATA=Leek(Start(5)+A)
         Loke Start(1)+_APPENDEDEXPAND+A,GTDATA

' == poke the new value of hunks 
' -----------------------------  

   HUNKVALUE=(_NEWSIZE-$24)/4
   Loke Start(1)+$14,HUNKVALUE
   Loke Start(1)+$1C,HUNKVALUE
   BIT=Peek(Start(1)+$14)
   Bset 6,BIT
   Poke Start(1)+$14,BIT

' == poke the value that is going to be moved by the re-loc routine etc
' ---------------------------------------------
  Loke Start(1)+$54,_NEWSIZE+$18

   Wsave OUTFILE$,1

End Proc

Procedure _GAMEHACKS
' these game hacks will actually change how things appear in the editor. 

'   we get these from the binary   
'   now imported from data 
           SUMMONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(0))
         BEHOLDEROFFSET=Peek(Start(10)+GRADEOFFSET_POS(1))
         BEHEMOTHOFFSET=Peek(Start(10)+GRADEOFFSET_POS(2))
             CRABOFFSET=Peek(Start(10)+GRADEOFFSET_POS(3))
        BIGDRAGONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(4))
      SMALLDRAGONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(5))

' ditto the number of grades available 
'  
   If LOOKUPGRADELIMIT1<>0
       NUMBEROFGRADES=Peek(Start(10)+LOOKUPGRADELIMIT1)
   Else 
       NUMBEROFGRADES=8
   End If 

' for non-hacked, you would use the deault bank (10) and the already 
' setup offsets
'
' when patched, we will use an alternative bank (11) for the Expanded Code 
'  and change the lookupmonsterpallete(s) variables
'
   MONSTERCOLOURBANK=10

INOUTFOLDER$="editor/Game Data/Patch Files ("+BINARY$+")"

   If BWVER$<>"439" Then Pop Proc


'======================================
' temporary manual setup 
ALLOK=True

' change the number of "grades"
INFILE$=INOUTFOLDER$+"/monsters.maxlevel"
If Exist(INFILE$)
      Wload INFILE$,8
      NUMBEROFGRADES=Peek(Start(8)+0)
      Erase 8
End If 

' now we need to *carefully* calculate the number of grade offsets 


'Screen Open 0,320,256,16,Lowres 
'Ink 0,7 
'Print ""
'Print NUMBEROFGRADES

INFILE$=INOUTFOLDER$+"/monsters.gradeoffsets"
If Exist(INFILE$)
      Wload INFILE$,8

       If Length(8)=6

           SUMMONOFFSET=Peek(Start(8)+0)
         BEHOLDEROFFSET=Peek(Start(8)+1)
         BEHEMOTHOFFSET=Peek(Start(8)+2)
             CRABOFFSET=Peek(Start(8)+3)
        BIGDRAGONOFFSET=Peek(Start(8)+4)
      SMALLDRAGONOFFSET=Peek(Start(8)+5)

       End If 

      Erase 8
End If 

'Update  
'Stop  

' change the location of the main monster palette

INFILE$=INOUTFOLDER$+"/monsters.colours"
If Exist(INFILE$)
      Wload INFILE$,8
      MONSTERCOLOURSSIZE=Length(8)
      Erase 8
Else 
      ALLOK=False
End If 

INFILE$=INOUTFOLDER$+"/summons.colours"
Gosub TESTMONSTER
INFILE$=INOUTFOLDER$+"/beholder.colours"
Gosub TESTMONSTER
INFILE$=INOUTFOLDER$+"/behemoth.colours"
Gosub TESTMONSTER
INFILE$=INOUTFOLDER$+"/crab.colours"
Gosub TESTMONSTER
INFILE$=INOUTFOLDER$+"/dragon.colours"
Gosub TESTMONSTER
' ==== revert back if it all went wrong
If ALLOK=False
   MONSTERCOLOURBANK=10
   NUMBEROFGRADES=8
   Pop Proc
End If 
'Screen Open 0,320,200,16,Lowres 
'Print "hi!" 
' otherwise, build the colour entry "file" 
  PATCHFILESIZE=(5*NUMBEROFGRADES)+MONSTERCOLOURSSIZE

   Reserve As Work 11,PATCHFILESIZE
   Bload INOUTFOLDER$+"/monsters.colours",Start(11)
   Bload INOUTFOLDER$+"/summons.colours",Start(11)+MONSTERCOLOURSSIZE
   Bload INOUTFOLDER$+"/beholder.colours",Start(11)+MONSTERCOLOURSSIZE+NUMBEROFGRADES
   Bload INOUTFOLDER$+"/behemoth.colours",Start(11)+MONSTERCOLOURSSIZE+(NUMBEROFGRADES*2)
   Bload INOUTFOLDER$+"/crab.colours",Start(11)+MONSTERCOLOURSSIZE+(NUMBEROFGRADES*3)
   Bload INOUTFOLDER$+"/dragon.colours",Start(11)+MONSTERCOLOURSSIZE+(NUMBEROFGRADES*4)
   MONSTERCOLOURBANK=11
   LOOKUPMONSTERPALETTE=0
   LOOKUPSUMMONCOLOURS=MONSTERCOLOURSSIZE
   LOOKUPBEHOLDERCOLOURS=MONSTERCOLOURSSIZE+NUMBEROFGRADES
   LOOKUPBEHEMOTHCOLOURS=MONSTERCOLOURSSIZE+(NUMBEROFGRADES*2)
   LOOKUPCRABCOLOURS=MONSTERCOLOURSSIZE+(NUMBEROFGRADES*3)
   LOOKUPDRAGONCOLOURS=MONSTERCOLOURSSIZE+(NUMBEROFGRADES*4)

Pop Proc

' ===============
TESTMONSTER:
 If Exist(INFILE$)
   Wload INFILE$,8
   If Length(8)<>NUMBEROFGRADES
     ALLOK=False
   End If 
   Erase 8
 Else 
   ALLOK=False
 End If 
Return 
' ===============
End Proc
Procedure _MAINEDITOR

   MULTIFLASH$="(fff,4)(f00,4)(ff0,4)(0f0,4)(0ff,4)(00f,4)(f0f,4)"
   BLUEFLASH$="(005,4)(007,4)(009,4)(00b,4)(00d,4)(00f,4)(00b,4)(007,4)"
   GREENFLASH$="(050,4)(070,4)(090,4)(0b0,4)(0d0,4)(0f0,4)(0d0,2)(0b0,2)(090,2)(070,2)"
   Rem GREENFLASH$="(050,2)(060,2)(070,2)(080,2)(090,2)(0A0,2)(0B0,2)(0C0,2)(0D0,2)(0E0,2)(0F0,2)(0E0,1)(0D0,1)(0C0,1)(0B0,1)(0A0,1)(090,1)(080,1)(070,1)(060,1)" 


   Dim LINE$(21),OPTION(21)
   Dim WALLSCROLL_CONTENT$(6),WALLSCROLL_X(6)


   DUNGEON=5 : EYEZ=1
   If BEXT=True and DUNGEON>3 : DUNGEON=3 : End If 
   If DUNGEON>GAME-1 : DUNGEON=GAME-1 : End If 
   XXX1=0 : YYY1=0

   MAUDE=0 : SELECTED=-1 : MAINTIME=Timer

   ' maude  0=simple viewer 1=detailed viewer/editor 2=objects    
   '        3=monsters/champs 4=spells? 5=layout  
   '

   Gosub _DATALOAD
   Gosub _MAKEFUNCTIONS
   Gosub _MAPSCREEN
   Gosub _GETCHAMPIONNAMES
   Gosub _GETSPELLNAMES


   _RESTART:

   Rem - no options by default

   For A=0 To 21
      OPTION(A)=False
      LINE$(A)=""
   Next A



   _RESTART2:

   QUIT=0 : REFRESH=1
   Wait Vbl 

   If MAKEMAP=True
     Flash Off 
       If LIGHT=False : Colour 15,$FFF
       Else : Colour 15,$0
       End If 
     MAUDE=0
     Gosub _EXPORT_MAPS
     QUIT=2 : REFRESH=2
     MAUDE=0
     Wait Vbl 
     MAKEMAP=False
   End If 

' this is the usual routine    
   JUMPER$="_MODE"+Lzstr$(MAUDE,1)
   Goto JUMPER$


   Stop : Rem -- Something has gone wrong! 



_MAPSCREEN:



   Rem LIGHT=1

   If LIGHT=0
      Default Palette $0,$444,$666,$888,$AAA,$292,$1C1,$E,$48E,$821,$B31,$C96,$D00,$FD0,$EEE,$0
   Else 
      Default Palette $FFF,$111,$333,$555,$777,$292,$1C1,$E,$48E,$821,$B31,$C96,$D00,$FD0,$DDD,$0
   End If 


   If MAKEMAP=False
   Screen Open 0,660,256,16,Hires : Screen Hide 0
   Else 
   Screen Open 0,660,256,16,Hires : Screen Hide 0
   End If 

   Curs Off : Hide : Flash Off : Cls 0


   ' move these later 
   '   Change Font Dir$+"editor/bloodfnt.font",6
   '   Make Bank Font 9 
   '   Change Bank Font 9 

   If MAKEMAP=False
   Screen Open 1,660,256,16,Hires : Screen Show 1
   Else 
   Screen Open 1,660,256,16,Lowres : Screen Show 1
   End If 

   '  Default Palette $0,$444,$666,$888,$AAA,$292,$1C1,$E,$48E,$821,$B31,$C96,$D00,$FD0,$EEE,$0 
   Curs Off : Hide : Flash Off : Cls 0
   Change Bank Font 9 : Rem Get Palette 0 : Rem Get Default Palette  



If LIGHT=0 : Flash 15,MULTIFLASH$ : Else : Flash 15,"(000,1)" : End If 
   Return 



   Rem -- Simple mode 

   _MODE0:

   Gosub _BUSY
   If LISTTOGGLE=False
    Gosub _DRAWGRID
    Gosub _DRAWMAP
    Gosub _DRAWOVERLAY
   Else 
    Screen 0 : Cls 0 : Wait Vbl 
    Gosub _DRAWOVERLAY
    Screen 0 : Cls 0 : Wait Vbl 
    Gosub _DRAWLIST
   End If 
   Repeat 

      If REFRESH<>0 : Gosub _DISPLAY : End If 
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS0
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE0
   If QUIT=2 Then Goto _RESTART
   Goto _NOMORE







   Rem -- Map Editor  


   _MODE1:

   Gosub _BUSY
   Gosub _DRAWGRID
   Gosub _DRAWMAP

   Repeat 
      Gosub _CURSOR
      If REFRESH<>0 Then Gosub _DISPLAY
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS1
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE1
   If QUIT=2 Then Goto _RESTART
   If QUIT=3 Then Goto _RESTART2
   Goto _NOMORE



   Rem -- Objects Editor

   _MODE2:

   Gosub _BUSY
   Gosub _DRAWGRID
   Gosub _DRAWMAP

   Repeat 
      Gosub _CURSOR
      If REFRESH<>0 Then Gosub _DISPLAY
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS2
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE2
   If QUIT=2 Then Goto _RESTART
   Goto _NOMORE

   Rem -- People Editor 

   _MODE3:

   Gosub _BUSY
   Gosub _DRAWGRID
   Gosub _DRAWMAP

   Repeat 
      Gosub _CURSOR
      If REFRESH<>0 Then Gosub _DISPLAY
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS3
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE3
   If QUIT=2 Then Goto _RESTART
   Goto _NOMORE

   Rem -- Spells Editor 

   _MODE4:

   Gosub _BUSY
   Gosub _DRAWGRID
   Gosub _DRAWMAP

   Repeat 
      Gosub _CURSOR
      If REFRESH<>0 Then Gosub _DISPLAY
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS4
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE4
   If QUIT=2 Then Goto _RESTART
   Goto _NOMORE

   Rem -- Level Layout Editor   

   _MODE5:

   Gosub _BUSY
   Gosub _DRAWGRID


   Repeat 

      If REFRESH<>0 Then Gosub _DISPLAY
      Gosub _DRAWUPDATES
      Gosub _REFRESH
      Gosub _MAINKEYS
      Gosub _EDITKEYS5
   Until QUIT<>0


   If QUIT=1 Then Goto _MODE5
   If QUIT=2 Then Goto _RESTART
   Goto _NOMORE




   _NOMORE:
   Pop Proc



   _MAKEFUNCTIONS:

   Def Fn FLOORWIDTH=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8))
   Def Fn FLOORHEIGHT=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+8)
   Def Fn FLOOROFFSETX=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+32)
   Def Fn FLOOROFFSETY=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+40)
   Def Fn FLOORNUMBER=Deek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+$36)


   Def Fn FLOORDATAOFFSET=((Y* Fn FLOORWIDTH)+X)*2
   Def Fn ALLFLOORDATAOFFSET=Deek(Start(10)+LOOKUPTOWER(DUNGEON)+(Z*2)+16)

   Def Fn MAPDATA1=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+ Fn FLOORDATAOFFSET+ Fn ALLFLOORDATAOFFSET+$38)
   Def Fn MAPDATA2=Peek(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+ Fn FLOORDATAOFFSET+ Fn ALLFLOORDATAOFFSET+1+$38)

   Def Fn SWITCHTYPE=Peek(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4))
   Def Fn SWITCHX=Peek(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4)+$2)
   Def Fn SWITCHY=Peek(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4)+$3)

   Def Fn TRIGGERTYPE=Peek(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4))
   Def Fn TRIGGERF=Peek(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$1)
   Def Fn TRIGGERX=Peek(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$2)
   Def Fn TRIGGERY=Peek(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$3)


   Def Fn SPECIAL1X=Deek(Start(10)+LOOKUPHARDCODE_WOODTRAP1)
   Def Fn SPECIAL1Y=Deek(Start(10)+LOOKUPHARDCODE_WOODTRAP1+$2)
   Def Fn SPECIAL2X=Deek(Start(10)+LOOKUPHARDCODE_WOODTRAP2)
   Def Fn SPECIAL2Y=Deek(Start(10)+LOOKUPHARDCODE_WOODTRAP2+$2)


   Def Fn CRYSTALEFFECT1X=Deek(Start(10)+LOOKUPHARDCODE_SERP1)
   Def Fn CRYSTALEFFECT1Y=Deek(Start(10)+LOOKUPHARDCODE_SERP1+$2)

   Def Fn CRYSTALEFFECT2X=Deek(Start(10)+LOOKUPHARDCODE_MOON1)
   Def Fn CRYSTALEFFECT2Y=Deek(Start(10)+LOOKUPHARDCODE_MOON1+$2)

   Def Fn CRYSTALEFFECT3X=Deek(Start(10)+LOOKUPHARDCODE_MOON2)
   Def Fn CRYSTALEFFECT3Y=Deek(Start(10)+LOOKUPHARDCODE_MOON2+$2)

   Def Fn CRYSTALEFFECT4X=Deek(Start(10)+LOOKUPHARDCODE_DRAG1)
   Def Fn CRYSTALEFFECT4Y=Deek(Start(10)+LOOKUPHARDCODE_DRAG1+$2)

   Def Fn CRYSTALEFFECT5X=Deek(Start(10)+LOOKUPHARDCODE_DRAG2)
   Def Fn CRYSTALEFFECT5Y=Deek(Start(10)+LOOKUPHARDCODE_DRAG2+$2)

   Def Fn CRYSTALEFFECT6X=Deek(Start(10)+LOOKUPHARDCODE_CHAOS1)
   Def Fn CRYSTALEFFECT6Y=Deek(Start(10)+LOOKUPHARDCODE_CHAOS1+$2)

   Def Fn CRYSTALEFFECT7X=Deek(Start(10)+LOOKUPHARDCODE_CHAOS2)
   Def Fn CRYSTALEFFECT7Y=Deek(Start(10)+LOOKUPHARDCODE_CHAOS2+$2)







   Def Fn GEMBLUX=Peek(Start(10)+LOOKUPGEMBLU+(DUNGEON*4)+(LOC*2))
   Def Fn GEMBLUY=Peek(Start(10)+LOOKUPGEMBLU+(DUNGEON*4)+(LOC*2)+1)

   Def Fn GEMTANX=Peek(Start(10)+LOOKUPGEMTAN+(DUNGEON*4)+(LOC*2))
   Def Fn GEMTANY=Peek(Start(10)+LOOKUPGEMTAN+(DUNGEON*4)+(LOC*2)+1)

   Def Fn DUNGEONSTARTX=Peek(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*4)+(LOC*2))
   Def Fn DUNGEONSTARTY=Peek(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*4)+(LOC*2)+1)

   Def Fn DUNGEONSTARTX_EX=Peek(Start(10)+LOOKUPDUNGEONSTART+((DUNGEON+1)*8)-((1-FROM)*12)+(LOC*2))
   Def Fn DUNGEONSTARTY_EX=Peek(Start(10)+LOOKUPDUNGEONSTART+((DUNGEON+1)*8)-((1-FROM)*12)+(LOC*2)+1)
   Def Fn DUNGEONSTARTF_EX=Peek(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*2)+$1E)



   Def Fn KEEPSTARTX=Peek(Start(10)+LOOKUPKEEPSTART+((FROM-1)*4)+(LOC*2))
   Def Fn KEEPSTARTY=Peek(Start(10)+LOOKUPKEEPSTART+((FROM-1)*4)+(LOC*2)+1)
   Def Fn KEEPSTARTF=Peek(Start(10)+LOOKUPKEEPFLOORSTART+(FROM))

   Def Fn MONSTERCOUNT=Deek(Start(10)+LOOKUPMONSTERCOUNT+(DUNGEON*2))

   Def Fn MONSTERDETAIL=Peek(Start(10)+LOOKUPMONSTER(DUNGEON)+(MONSTER*6)+LOC)

   Def Fn CHAMPIONSTAT=Peek(Start(10)+LOOKUPCHAMPIONSTATS+($20*CHAMPION)+LOC)
   Def Fn CHAMPIONPOCKETS=Peek(Start(10)+LOOKUPCHAMPIONPOCKETS+($10*CHAMPION)+LOC)

   Def Fn CHAMPIONSTATEXT=Peek(Start(10)+LOOKUPCHAMPIONSTATS+($40*CHAMPION)+LOC)
   Def Fn CHAMPIONPOCKETSEXT=Peek(Start(10)+$30+LOOKUPCHAMPIONSTATS+($40*CHAMPION)+LOC)


   Def Fn SPELLTEXT=Peek(Start(10)+LOOKUPSPELLTEXT+LOC)

   Def Fn SPELLNAMES=Peek(Start(10)+LOOKUPSPELLNAME+LOC)

   Def Fn FINDSCROLL=Deek(Start(10)+LOOKUPWALLSCROLLREF+(WALLSCROLL*2))
   Def Fn FINDSCROLLTEXT=Peek(Start(10)+LOOKUPWALLSCROLLTEXT+( Fn FINDSCROLL)+LOC)

   Def Fn OBJECTCOUNT=Deek(Start(10)+LOOKUPOBJECTS(DUNGEON)-2)
   Def Fn OBJECTINFO=Peek(Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC)

   Def Fn CHARHEAD=Peek(Start(10)+LOOKUPCHARSHEADS+CHAR)
   Def Fn CHARBODY=Peek(Start(10)+LOOKUPCHARSBODIES+CHAR)
   Def Fn CHARCOLOUR=Peek(Start(10)+LOOKUPCHARSCOLOURS+(CHAR*$14)+(ITEM*$4)+PICK)



   Return 



   _PATCHDATAOFFSETS:
   ' fill in all new size / offset values for that tower

   X=0 : Y=0
   INX=0 : INY=0

   For INZ=0 To 7
      Gosub _MAKEOFFSET
      Doke(Start(10)+LOOKUPTOWER(DUNGEON)+(INZ*2)+16),MAPOFFSET
   Next INZ


   Return 

   _MAKEOFFSET:

   ' this looks at values from INZ, INX,INY and finds the offset value  

   MAPOFFSET=0
   Z=0

   ' add previous floors as offsets 

   If Z=INZ Then Goto FOUND

   For Z=0 To INZ-1
      MAPOFFSET=MAPOFFSET+( Fn FLOORWIDTH* Fn FLOORHEIGHT*2)
   Next Z


   FOUND:
   ' reached the right floor

   EXTRA=(INY* Fn FLOORWIDTH)+INX
   MAPOFFSET=(EXTRA*2)+MAPOFFSET

   Return 


   FLOOROFFSETX_PUT:
   Poke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+32),PATCHVALUE
   Return 

   FLOOROFFSETY_PUT:
   Poke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+40),PATCHVALUE
   Return 

   FLOORNUMBER_PUT:
   Doke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+$36),PATCHVALUE
   Return 

   FLOORWIDTH_PUT:
   Poke Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8),PATCHVALUE
   Gosub _PATCHDATAOFFSETS
   Return 

   FLOORHEIGHT_PUT:
   Poke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+(Z mod 8)+8),PATCHVALUE
   Gosub _PATCHDATAOFFSETS
   Return 


   SWITCHTYPE_PUT:
   Poke(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4)),PATCHVALUE
   Return 

   SWITCHX_PUT:
   Poke(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4)+$2),PATCHVALUE
   Return 

   SWITCHY_PUT:
   Poke(Start(10)+LOOKUPSWITCHES(DUNGEON mod GAME)+(SWITCH*4)+$3),PATCHVALUE
   Return 

   TRIGGERTYPE_PUT:
   Poke(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)),PATCHVALUE
   Return 

   TRIGGERF_PUT:
   Poke(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$1),PATCHVALUE
   Return 

   TRIGGERX_PUT:
   Poke(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$2),PATCHVALUE
   Return 

   TRIGGERY_PUT:
   Poke(Start(10)+LOOKUPTRIGGERS(DUNGEON mod GAME)+(TRIGGER*4)+$3),PATCHVALUE
   Return 


   SPECIAL1X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_WOODTRAP1),PATCHVALUE
   Return 

   SPECIAL1Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_WOODTRAP1+$2),PATCHVALUE
   Return 

   SPECIAL2X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_WOODTRAP2),PATCHVALUE
   Return 

   SPECIAL2Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_WOODTRAP2+$2),PATCHVALUE
   Return 

   '===== 

   CRYSTALEFFECT1X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_SERP1),PATCHVALUE
   Return 
   CRYSTALEFFECT1Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_SERP1+$2),PATCHVALUE
   Return 


   CRYSTALEFFECT2X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_MOON1),PATCHVALUE
   Return 
   CRYSTALEFFECT2Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_MOON1+$2),PATCHVALUE
   Return 

   CRYSTALEFFECT3X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_MOON2),PATCHVALUE
   Return 
   CRYSTALEFFECT3Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_MOON2+$2),PATCHVALUE
   Return 

   CRYSTALEFFECT4X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_DRAG1),PATCHVALUE
   Return 
   CRYSTALEFFECT4Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_DRAG1+$2),PATCHVALUE
   Return 

   CRYSTALEFFECT5X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_DRAG2),PATCHVALUE
   Return 
   CRYSTALEFFECT5Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_DRAG2+$2),PATCHVALUE
   Return 

   CRYSTALEFFECT6X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_CHAOS1),PATCHVALUE
   Return 
   CRYSTALEFFECT6Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_CHAOS1+$2),PATCHVALUE
   Return 

   CRYSTALEFFECT7X_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_CHAOS2),PATCHVALUE
   Return 
   CRYSTALEFFECT7Y_PUT:
   Doke(Start(10)+LOOKUPHARDCODE_CHAOS2+$2),PATCHVALUE
   Return 



   '====

   GEMBLUX_PUT:
   Poke(Start(10)+LOOKUPGEMBLU+(DUNGEON*4)+(LOC*2)),PATCHVALUE
   Return 

   GEMBLUY_PUT:
   Poke(Start(10)+LOOKUPGEMBLU+(DUNGEON*4)+(LOC*2)+1),PATCHVALUE
   Return 

   GEMTANX_PUT:
   Poke(Start(10)+LOOKUPGEMTAN+(DUNGEON*4)+(LOC*2)),PATCHVALUE
   Return 

   GEMTANY_PUT:
   Poke(Start(10)+LOOKUPGEMTAN+(DUNGEON*4)+(LOC*2)+1),PATCHVALUE
   Return 

   DUNGEONSTARTX_PUT:
   Poke(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*4)+(LOC*2)),PATCHVALUE
   Return 

   DUNGEONSTARTY_PUT:
   Poke(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*4)+(LOC*2)+1),PATCHVALUE
   Return 


   DUNGEONSTARTX_EX_PUT:
   Poke(Start(10)+LOOKUPDUNGEONSTART+((DUNGEON+1)*8)-((1-FROM)*12)+(LOC*2)),PATCHVALUE
   Return 

   DUNGEONSTARTY_EX_PUT:
   Poke(Start(10)+LOOKUPDUNGEONSTART+((DUNGEON+1)*8)-((1-FROM)*12)+(LOC*2)+1),PATCHVALUE
   Return 

   DUNGEONSTARTF_EX_PUT:
   Poke(Start(10)+LOOKUPDUNGEONSTART+(DUNGEON*2)+$1E),PATCHVALUE
   Return 


   KEEPSTARTX_PUT:
   Poke(Start(10)+LOOKUPKEEPSTART+((FROM-1)*4)+(LOC*2)),PATCHVALUE
   Return 

   KEEPSTARTY_PUT:
   Poke(Start(10)+LOOKUPKEEPSTART+((FROM-1)*4)+(LOC*2)+1),PATCHVALUE
   Return 

   KEEPSTARTF_PUT:
   Poke(Start(10)+LOOKUPKEEPFLOORSTART+(FROM)),PATCHVALUE
   Return 

   MONSTERCOUNT_PUT:
   Doke(Start(10)+LOOKUPMONSTERCOUNT+(DUNGEON*2)),PATCHVALUE
   Return 

   MONSTERDETAIL_PUT:
   Poke(Start(10)+LOOKUPMONSTER(DUNGEON)+(MONSTER*6)+LOC),PATCHVALUE
   Return 

   CHAMPIONSTAT_PUT:
   Poke(Start(10)+LOOKUPCHAMPIONSTATS+($20*CHAMPION)+LOC),PATCHVALUE
   Return 

   CHAMPIONPOCKETS_PUT:
   Poke(Start(10)+LOOKUPCHAMPIONPOCKETS+($10*CHAMPION)+LOC),PATCHVALUE
   Return 

   CHAMPIONSTATEXT_PUT:
   Poke(Start(10)+LOOKUPCHAMPIONSTATS+($20*CHAMPION)+LOC),PATCHVALUE
   Poke(Start(10)+LOOKUPCHAMPIONSTATS+($40*CHAMPION)+LOC),PATCHVALUE
   Return 

   CHAMPIONPOCKETSEXT_PUT:
   Poke(Start(10)+$30+LOOKUPCHAMPIONSTATS+($40*CHAMPION)+LOC),PATCHVALUE

   Return 





   FINDSCROLL_PUT:
   Doke(Start(10)+LOOKUPWALLSCROLLREF+(WALLSCROLL*2)),PATCHVALUE
   Return 

   FINDSCROLLTEXT_PUT:

   BLAH=( Fn FINDSCROLL)+LOC

   If BLAH<$CA2
      Poke(Start(10)+LOOKUPWALLSCROLLTEXT+BLAH),PATCHVALUE
   Else 
      Colour 0,$F00 : Wait Vbl : Colour 0,$0
   End If 

   Return 

   OBJECTCOUNT_PUT:
   Doke(Start(10)+LOOKUPOBJECTS(DUNGEON)-2),PATCHVALUE
   Return 


   MAPDATA_PUT:

   Poke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+ Fn FLOORDATAOFFSET+ Fn ALLFLOORDATAOFFSET+$38),PATCHVALUE1
   Poke(Start(10)+LOOKUPTOWER(DUNGEON mod GAME)+ Fn FLOORDATAOFFSET+ Fn ALLFLOORDATAOFFSET+1+$38),PATCHVALUE2

   Return 

   CHARHEAD_PUT:
   Poke(Start(10)+LOOKUPCHARSHEADS+CHAR),PATCHVALUE
   Return 
   CHARBODY_PUT:
   Poke(Start(10)+LOOKUPCHARSBODIES+CHAR),PATCHVALUE
   Return 
   CHARCOLOUR_PUT:
   Poke(Start(10)+LOOKUPCHARSCOLOURS+(CHAR*$14)+(ITEM*$4)+PICK),PATCHVALUE
   Return 


   GRADEOFFSET_GET:
           SUMMONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(0))
         BEHOLDEROFFSET=Peek(Start(10)+GRADEOFFSET_POS(1))
         BEHEMOTHOFFSET=Peek(Start(10)+GRADEOFFSET_POS(2))
             CRABOFFSET=Peek(Start(10)+GRADEOFFSET_POS(3))
        BIGDRAGONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(4))
      SMALLDRAGONOFFSET=Peek(Start(10)+GRADEOFFSET_POS(5))
   Return 

   GRADEOFFSET_PUT:
           Poke Start(10)+GRADEOFFSET_POS(0),SUMMONOFFSET
           Poke Start(10)+GRADEOFFSET_POS(1),BEHOLDEROFFSET
           Poke Start(10)+GRADEOFFSET_POS(2),BEHEMOTHOFFSET
           Poke Start(10)+GRADEOFFSET_POS(3),CRABOFFSET
           Poke Start(10)+GRADEOFFSET_POS(4),BIGDRAGONOFFSET
           Poke Start(10)+GRADEOFFSET_POS(5),SMALLDRAGONOFFSET
   Return 

   DUNGEONBYTESUSED:

   STOREZ=Z

   C=0

   For Z=0 To 7
      A= Fn FLOORWIDTH
      B= Fn FLOORHEIGHT
      C=C+(A*B*2)
   Next Z

   OUTPUT=C
   Z=STOREZ

   Return 



   _BUSY:

   Rem - "redrawing" screen 

   Screen 0 : Bob Off 1 : Wait Vbl 
   Ink 0,0 : Bar 0,0 To 502,256 : Wait Vbl 

   Gosub _DISPLAY
   Ink 6 : Text 150,100,"~ PROCESSING MAP DATA - PLEASE WAIT ~"

   Gosub _REFRESH
   REFRESH=1

   Return 


   _DISPLAY:

   Ink 0 : Bar 507,0 To 660,256

   Change Bank Font 9


   ' universal aspects
   ' skip spells mode 



   If MAUDE=0 : MAUDE$="VIEWER"
   Else If MAUDE=1 : MAUDE$="MAPS"
   Else If MAUDE=2 : MAUDE$="OBJECTS"
   Else If MAUDE=3 : MAUDE$="CHARACTERS"
   Else If MAUDE=4 : MAUDE$="SPELLS"
   Else If MAUDE=5 : MAUDE$="LAYOUT"
   End If 

   If BEXT=False : LINE$(0)="BLOODWYCH"

      If DUNGEON=0 : LINE$(2)="THE KEEP"
      Else If DUNGEON=1 : LINE$(2)="SERPENT TOWER"
      Else If DUNGEON=2 : LINE$(2)="MOON TOWER"
      Else If DUNGEON=3 : LINE$(2)="DRAGON TOWER"
      Else If DUNGEON=4 : LINE$(2)="CHAOS TOWER"
      Else If DUNGEON=5 : LINE$(2)="ZENDIK'S TOWER"
      End If 

   Else : LINE$(0)="EXTENDED LEVELS"

      If DUNGEON=0 : LINE$(2)="SERPENT DUNGEON"
      Else If DUNGEON=1 : LINE$(2)="CHAOS DUNGEON"
      Else If DUNGEON=2 : LINE$(2)="MOON DUNGEON"
      Else If DUNGEON=3 : LINE$(2)="DRAGON DUNGEON"
      End If 

   End If 


   LINE$(3)="FLOOR:"+Str$(EYEZ)


   ' call a sub routine to get certain info for diff types of mode

   GOA$="_TEXTS"+Lzstr$(MAUDE,1)
   Gosub GOA$


   ' do the text-display  

   Ink 12,0 : Text 511,10,LINE$(0)

   If SVEGAME=False
      LINE$(0)="GAME MAPS"
   Else 
      LINE$(0)="SAVE DATA"
   End If 

   Ink 6,0 : Text 511,20,"EDIT: "+MAUDE$

   Ink 4,0 : Text 511,30,LINE$(0)
   Ink 1,0 : Text 511,40,LINE$(1)
   Ink 2,0 : Text 511,50,LINE$(2)
   Ink 2,0 : Text 511,60,LINE$(3)


   ' main editables 

   For A=4 To 21

   If SELECTED=A : Ink 15,0 : Else Ink 14,0 : End If 
      Text 511,40+(10*A),LINE$(A)

   Next A

   REFRESH=0

   Return 


   ' Different displays for different Editor Modes
   '

   _TEXTS0:
   X=0 : Y=0 : Z=EYEZ
   LINE$(4)="OFFSET: "+Hex$( Fn ALLFLOORDATAOFFSET)


   Return 

   _MAINKEYS:


   QUIT=0

   ' quit editor
   If Key State($45)=-1 : Pop Proc : End If 


   ' save BW binary 
   If Key State($21)=-1 and SVEGAME=False : Gosub _DATASAVE : End If 
   If Key State($21)=-1 and SVEGAME=True : Gosub _SAVESAVE : End If 
   ' save BW and patch? 
   'If Key State($20)=-1 and SVEGAME=False : Gosub   _DATAPATCH : End If  
   Rem   If Key State($13)=-1 : Gosub _DATATEST : End If  

   ' import/export files  

   If Key State($58)=-1
      _IMPORTEXPORT
       QUIT=1

       If MAKEMAP=True
         QUIT=2 : REFRESH=2 : Return 
       End If 
    End If 



   ' you are chosing a locaton with cursor 2

   If PLACEMODE=1 or PLACEMODE=2

      If Key State($4C)=-1 : Rem - up 
         YYY2=(YYY2-1) : If YYY2<0 : YYY2=D : End If 
         REFRESH=1

      Else If Key State($4D)=-1 : Rem - down 
         YYY2=(YYY2+1) mod D
         REFRESH=1

      Else If Key State($4E)=-1 : Rem - right
         XXX2=(XXX2+1) mod C
         REFRESH=1

      Else If Key State($4F)=-1 : Rem - left 
         XXX2=(XXX2-1) : If XXX2<0 : XXX2=C : End If 
         REFRESH=1

      End If 

   End If 

   If PLACEMODE=1 Then Return : Rem - exit if single-level selector

   ' select floor 

   If Key State($50)=-1 : EYEZ=0 : QUIT=1 : Bob Off : End If 
   If Key State($51)=-1 : EYEZ=1 : QUIT=1 : Bob Off : End If 
   If Key State($52)=-1 : EYEZ=2 : QUIT=1 : Bob Off : End If 
   If Key State($53)=-1 : EYEZ=3 : QUIT=1 : Bob Off : End If 
   If Key State($54)=-1 : EYEZ=4 : QUIT=1 : Bob Off : End If 
   If Key State($55)=-1 : EYEZ=5 : QUIT=1 : Bob Off : End If 
   If Key State($56)=-1 : EYEZ=6 : QUIT=1 : Bob Off : End If 
   If Key State($57)=-1 : EYEZ=7 : QUIT=1 : Bob Off : End If 

   If Key State($42)=-1 : EYEZ=EYEZ+1
      If EYEZ>7 : EYEZ=0 : End If 
      QUIT=1 : Bob Off 
   End If 


   If PLACEMODE<>2 Then ZZZ1=EYEZ



   If PLACEMODE<>0 Then Return : Rem - no other options etc if multi-floor place-selector 


   ' monster markers option 
   If Key State($37)=-1 : Bchg 1,MARKERS : Gosub _PLACEMONSTERMARKERS : REFRESH=1 : End If 

   If Key State($19)=-1 : Bchg 0,MARKERS : Gosub _PLACECHAMPIONMARKERS : REFRESH=1 : End If 
   If Key State($36)=-1 : Bchg 2,MARKERS : Gosub _PLACEMONSTERMARKERS : REFRESH=1 : End If 

   If Key State($27)=-1 and MAUDE=0 : Bchg 3,MARKERS : QUIT=1 : End If 

   If Key State($28)=-1 and MAUDE=0 : LISTTOGGLE=1-LISTTOGGLE : QUIT=1 : End If 


   ' select dungeon 

   If Key State($38)=-1 : DUNGEON=(GAME+(DUNGEON-1)) mod GAME : QUIT=1
   CURRENT_STACK=0 : End If 
   If Key State($39)=-1 : DUNGEON=(DUNGEON+1) mod GAME : QUIT=1
   CURRENT_STACK=0 : End If 

   ' select mode

   If Key State($59)=True
      If MAUDE=2 : Gosub _PATCHOBJECTDATA : End If : Rem -- update objects if leaving this mode   

      MAUDE=(MAUDE+1) mod 6 : 

      ' no "spell edit" mode 

   If MAUDE=4 : MAUDE=5 : End If : QUIT=2 : SELECTED=-1 : End If 


   ' move cursor  

   If SELECTED=-1

      C= Fn FLOORWIDTH
      D= Fn FLOORHEIGHT

      If Key State($4C)=-1 : Rem - up 
         YYY1=(YYY1-1) : If YYY1<0 : YYY1=D : End If 
         REFRESH=1

      Else If Key State($4D)=-1 : Rem - down 
         YYY1=(YYY1+1) mod D
         REFRESH=1

      Else If Key State($4E)=-1 : Rem - right
         XXX1=(XXX1+1) mod C
         REFRESH=1

      Else If Key State($4F)=-1 : Rem - left 
         XXX1=(XXX1-1) : If XXX1<0 : XXX1=C : End If 
         REFRESH=1

      End If 


   End If 



   ' move up/down options 

   If SELECTED<>-1

      If Key State($4D)=-1

         AGAIN:
         SELECTED=SELECTED+1
         If SELECTED=22 : SELECTED=0 : End If 

         If OPTION(SELECTED)=False
            Goto AGAIN : 
         End If 

         REFRESH=1

      Else If Key State($4C)=-1

         AGAIN2:
         SELECTED=SELECTED-1
         If SELECTED=-1 : SELECTED=21 : End If 

         If OPTION(SELECTED)=False
            Goto AGAIN2 : 
         End If 

         REFRESH=1

      End If 

   End If 


   Return 


   '
   '
   '
   '  ~~~ SIMPLE VIEWER ~~~ 
   '
   '


   _EDITKEYS0:

   Return 



   '
   '
   '
   '  ~~~ MAP EDITOR ~~~  
   '
   '

   Rem - map edit 
   _TEXTS1:

   X=XXX1 : Y=YYY1 : Z=ZZZ1


   LINE$(4)="X: "+Right$(Hex$(XXX1+$100),2)
   LINE$(4)=LINE$(4)+"  Y: "+Right$(Hex$(YYY1+$100),2)

   LINE$(5)="OFFSET: "+"$"+Right$(Hex$( Fn ALLFLOORDATAOFFSET+ Fn FLOORDATAOFFSET+$100000),4)

   LINE$(6)="DATA: "+Right$(Hex$( Fn MAPDATA1+$100),2)
   LINE$(6)=LINE$(6)+" "+Right$(Hex$( Fn MAPDATA2+$100),2)

   '                 LINE$(7)=""+Right$(Bin$( Fn MAPDATA1+$100),8)
   '        LINE$(7)=LINE$(7)+""+Right$(Bin$( Fn MAPDATA2+$100),8)

   LINE$(8)="COPY: "+Right$(Hex$(COPIDATA1+$100),2)
   LINE$(8)=LINE$(8)+" "+Right$(Hex$(COPIDATA2+$100),2)

   Gosub _WALLDESC


   Return 


   _EDITKEYS1:

   ' place-curs mode

   If PLACEMODE<>0 Then Goto SKIPPER : 


   ' space key
   If Key State($40)=False Then HELD=0
If Key State($40)=-1 and SELECTED=-1 and HELD=0 : HELD=1 : REFRESH=1 : SELECTED=10 : Return : Else If Key State($40)=-1 and HELD=0 : HELD=1 : SELECTED=-1 : REFRESH=1 : End If 


   ' lets do on-map stuff!  


   X=XXX1 : Y=YYY1
   EE= Fn MAPDATA1 : AA=Int(EE/16) : BB=EE mod 16
   FF= Fn MAPDATA2 : CC=Int(FF/16) : DD=FF mod 16

   If Key State($41)=-1 : Rem - backspace

      AA=0 : BB=0 : CC=0 : DD=0

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If Key State($33)=-1 : Rem - c - copy 

      COPIDATA1=EE : COPIDATA2=FF

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If Key State($34)=-1 : Rem - v - paste

      EE=COPIDATA1 : FF=COPIDATA2

      AA=Int(EE/16) : BB=EE mod 16
      CC=Int(FF/16) : DD=FF mod 16

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If Key State($46)=-1 : Rem - del - clear floor

      Z=EYEZ
      PATCHVALUE1=0
      PATCHVALUE2=0
      W= Fn FLOORWIDTH
      H= Fn FLOORHEIGHT

      For Y=0 To H-1
         For X=0 To W-1
            Gosub MAPDATA_PUT
         Next X
      Next Y

      QUIT=1


   End If 


   ' lets do options stuff

   If SELECTED=-1 Then Return 


   If SELECTED=10 and Key State($4E)=-1 : Rem- up map item type' 

      DD=(DD+1) mod 8
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=10 and Key State($4F)=-1 : Rem- down map item type' 

      DD=DD-1 : If DD=-1 : DD=7 : End If 
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 



   SKIPPER:
   ' call a sub routine to do different options for diff types of data


   GOA$="_MAPEDITKEYS"+Lzstr$((DD mod 8),1)
   Gosub GOA$

   Return 




   '
   '
   '
   '  ~~~ OBJECT EDITOR ~~~ 
   '
   '



   Rem - object edit
   _TEXTS2:
   Gosub _COUNTOBJECTS
   Gosub _FINDLOCATIONS
   Gosub _STORE_STACK
   Gosub _STORE_REST
   Gosub _QUICK_VARIABLES


   LINE$(4)="X: "+Right$(Hex$(XXX1+$100),2)
   LINE$(4)=LINE$(4)+"  Y: "+Right$(Hex$(YYY1+$100),2)


   X=XXX1 : Y=YYY1 : Z=ZZZ1
   LINE$(5)="OFFSET: "+Hex$( Fn ALLFLOORDATAOFFSET+ Fn FLOORDATAOFFSET,4)

   LINE$(21)="FREE: "+Hex$($400- Fn OBJECTCOUNT,4)

   Rem   LINE$(8)="USED2: "+Right$(Hex$(MEGAUSED,4),4)  

   LINE$(7)="ITEM STACK: "+Lzstr$(CURRENT_STACK+1,3)
   OPTION(7)=True

   LINE$(11)="POSITION: "+Lzstr$((OBJ_POS/4)+1,1)
   OPTION(11)=True


   IN_OFFSET=OBJ_OFFSET
   Gosub _OFFSETCONVERT

   X_STORE=OUTX : Y_STORE=OUTY : Z_STORE=OUTZ


   LINE$(9)="X: "+Right$(Hex$(OUTX,4),2)+"  Y: "+Right$(Hex$(OUTY,4),2)
   OPTION(9)=True
   LINE$(10)="FLOOR: "+Lzstr$(OUTZ,1)
   OPTION(10)=True



   LINE$(14)="VIEWING: "+Lzstr$(OBJEYE_ITEM+1,4)
   OPTION(14)=True

   LINE$(15)="TYPE: "+Right$(Hex$(OBJEYE_TYPE,2),2)
   OPTION(15)=True

   LINE$(16)="QUANTITY: "+Lzstr$(OBJEYE_QUANT,3)
   OPTION(16)=True

   LINE$(13)="ON-STACK: "+Lzstr$(OBJ_NUMBERS+1,3)
   OPTION(13)=True

   LINE$(18)="EDIT STACK"
   OPTION(18)=True

   '      LINE$(20)="AT: "+Hex$(STACK_OFFSET,4) 

   Return 


   _FINDLOCATIONS:
   '
   ' in --> CURRENT_STACK 
   ' output->  STACK_OFFSET , REST_OFFSET 
   ' find the positions we want to patch to.
   '
   LOC=0 : COUNTER=0

   Do 
      If LOC>= Fn OBJECTCOUNT
      Gosub _COUNT_FAIL : REFRESH=1 : Exit : End If 


      If COUNTER=CURRENT_STACK : STACK_OFFSET=LOC : End If 

      LOC=LOC+2 : C= Fn OBJECTINFO : LOC=LOC+((C+1)*2)+1

      If COUNTER=CURRENT_STACK : REST_OFFSET=LOC : Exit : End If 

      COUNTER=COUNTER+1

   Loop 

   Return 

   _COUNT_FAIL:

   LOC=2 : C= Fn OBJECTINFO : LOC=LOC+((C+1)*2)+1
   REST_OFFSET=LOC : CURRENT_STACK=0 : STACK_OFFSET=0 : 
   Return 



   _STORE_STACK:
   '
   ' copy current stack to bank 12
   '
   ' clear it first 

   For Z=0 To Length(12)-1
      Poke Start(12)+Z,0
   Next Z

   ' now store needed data

   LOC=STACK_OFFSET

   PATCHVALUE= Fn OBJECTINFO
   Poke Start(12),PATCHVALUE

   LOC=LOC+1 : PATCHVALUE= Fn OBJECTINFO
   Poke Start(12)+1,PATCHVALUE

   LOC=LOC+1 : PATCHVALUE= Fn OBJECTINFO
   Poke Start(12)+2,PATCHVALUE

   C=PATCHVALUE : D=LOC : E=0


   For LOC=D To D+(C+1)*2

      PATCHVALUE= Fn OBJECTINFO
      Poke Start(12)+2+E,PATCHVALUE
      E=E+1
   Next LOC


   Return 


   _STORE_REST:
   '
   ' copy current stack to bank 12
   '
   ' clear it first 

   For Z=0 To Length(12)-1
      Poke Start(11)+Z,0
   Next Z

   ' now store needed data

   LOC=REST_OFFSET

   C=PATCHVALUE : D=LOC : E=0 : F= Fn OBJECTCOUNT-D

   For LOC=D To Fn OBJECTCOUNT

      PATCHVALUE= Fn OBJECTINFO
      Poke Start(11)+E,PATCHVALUE
      E=E+1

   Next LOC

   REST_LENGTH=E-1


   Return 

   _OFFSETCONVERT:
   '
   '  IN_OFFSET 
   '
   '  caluclates the floor,x,y coordinates  
   '  of the index number supplied  

   TEMP=Z
   IN_OFFSET=IN_OFFSET/2


   STRT=0 : EIND=0

   For Z=0 To 7

      EIND=EIND+ Fn FLOORWIDTH* Fn FLOORHEIGHT

      If IN_OFFSET>=STRT and IN_OFFSET<EIND

         OUTX=(IN_OFFSET-STRT) mod Fn FLOORWIDTH

         OUTY=Int((IN_OFFSET-STRT)/ Fn FLOORWIDTH)
         OUTZ=Z
         Exit 
      Else 
         STRT=EIND
      End If 
   Next Z


   Z=TEMP
   Return 

   _SPECIALNUMBERS:
   Screen 0 : Ink 12,0 : Text 30,30,"      "+Hex$(OUTX)+"   " : Text 170,30,"      "+Hex$(OUTY)+"     "
   Return 

   Rem -- object editor 
   _EDITKEYS2:


   ' space key
   If Key State($40)=False Then HELD=0

   If Key State($40)=-1 and SELECTED=-1 and HELD=0 : HELD=1 : 
      REFRESH=1 : SELECTED=7 : Return 

   Else If Key State($40)=-1 and HELD=0 : HELD=1 : SELECTED=-1
   REFRESH=1 : End If 


   If Key State($1)=True and SELECTED=-1
      ' get offset currently viewing in loc 1
      FINDPOS=0
      Gosub _FINDNEXT_STACK : REFRESH=1 : HELD=1

   Else If Key State($2)=True and SELECTED=-1
      ' get offset currently viewing in loc 2
      FINDPOS=4
      Gosub _FINDNEXT_STACK : REFRESH=1 : HELD=1

   Else If Key State($3)=True and SELECTED=-1
      ' get offset currently viewing in loc 3
      FINDPOS=8
      Gosub _FINDNEXT_STACK : REFRESH=1 : HELD=1

   Else If Key State($4)=True and SELECTED=-1
      ' get offset currently viewing in loc 4
      FINDPOS=12
      Gosub _FINDNEXT_STACK : REFRESH=1 : HELD=1

   End If 


   ' change list
   If SELECTED=7 and Key State($4E)=-1 : Rem - object list up 
      CURRENT_STACK=(CURRENT_STACK+1) mod(STACKS-2)
      REFRESH=1 : Return 

   Else If SELECTED=7 and Key State($4F)=-1 : Rem - object list down 
      CURRENT_STACK=(CURRENT_STACK+STACKS-3) mod(STACKS-2)
      REFRESH=1 : Return 


   End If 

   If Key State($B)=-1 : Rem -- delete current entry

      If Fn OBJECTCOUNT<=ENTRYSIZE : Gosub _FLASH_BAD : Return : End If 

      If CURRENT_STACK=STACKS-1 : CURRENT_STACK=CURRENT_STACK-1 : End If 

      Gosub _REMOVE_STACK
      REFRESH=1

   Else If Key State($C)=-1 : Rem -- add current entry 

      If Fn OBJECTCOUNT+5>$400 : Gosub _FLASH_BAD : Return : End If 
      Gosub _ADD_STACK
      REFRESH=1


   End If 

   ' change number of items in the "stack" / pile 

   If SELECTED=13 and Key State($4E)=-1 : Rem - up   

      PATCHVALUE=Peek(Start(12)+2)
      If MEGAUSED+2>$400 or PATCHVALUE=>$FF : Gosub _FLASH_BAD : Return : End If : Rem -- check we have room for another item 

      PATCHVALUE=PATCHVALUE+1 : Rem --- add one to the quantities
      Poke(Start(12)+2),PATCHVALUE

      If Peek(Start(12)+(PATCHVALUE*2)+3)=0 : Rem -- if no "old" item, add one 
      Poke(Start(12)+(PATCHVALUE*2)+3),$1 : End If 
      If Peek(Start(12)+(PATCHVALUE*2)+4)=0
      Poke(Start(12)+(PATCHVALUE*2)+4),$1 : End If 

      Gosub _PATCHOBJECTDATA : Rem -- splice the patch together 


      REFRESH=1

   Else If SELECTED=13 and Key State($4F)=-1 : Rem - down 
      PATCHVALUE=Peek(Start(12)+2)
      If PATCHVALUE<=0 : Gosub _FLASH_BAD : Return : End If 
      PATCHVALUE=PATCHVALUE-1
      Poke(Start(12)+2),PATCHVALUE

      Gosub _PATCHOBJECTDATA

      REFRESH=1
   End If 

   ' change position in current space 

   If SELECTED=11 and Key State($4E)=-1 : Rem - up 

      OBJ_POS=Peek(Start(12))/$10
      OBJ_OFFSET=(Peek(Start(12)) mod $10)

      '  if its a normal space, do a regular change of position
      ' if its a shelf, force specifics
      OBJ_POS=(OBJ_POS+$4) mod $10

      PATCHVALUE=(OBJ_POS*$10)+OBJ_OFFSET
      Poke(Start(12)),PATCHVALUE
      Gosub _PATCHOBJECTDATA
      REFRESH=1


   Else If SELECTED=11 and Key State($4F)=-1 : Rem - down 
      OBJ_POS=Peek(Start(12))/$10
      OBJ_OFFSET=(Peek(Start(12)) mod $10)

      '  if its a normal space, do a regular change of position
      ' if its a shelf, force specifics
      OBJ_POS=(OBJ_POS+$C) mod $10
      PATCHVALUE=(OBJ_POS*$10)+OBJ_OFFSET
      Poke(Start(12)),PATCHVALUE
      Gosub _PATCHOBJECTDATA
      REFRESH=1

   End If 



   ' change viewing object in current stack 

   If SELECTED=14 and Key State($4E)=-1 : Rem - up 
      If OBJEYE_ITEM<OBJ_NUMBERS : OBJEYE_ITEM=OBJEYE_ITEM+1 : End If 
      REFRESH=1

   Else If SELECTED=14 and Key State($4F)=-1 : Rem - down 
      If OBJEYE_ITEM>0 : OBJEYE_ITEM=OBJEYE_ITEM-1 : End If 
      REFRESH=1

   End If 

   ' change quantity of object being viewed in current stack  

   If SELECTED=16 and Key State($4E)=-1 : Rem - up 


      PATCHDATA=Peek(Start(12)+4+(OBJEYE_ITEM*2))
      PATCHDATA=PATCHDATA+1
      If PATCHDATA>=255 : PATCHDATA=1 : End If 
      Poke(Start(12)+4+(OBJEYE_ITEM*2)),PATCHDATA

      REFRESH=1 : Gosub _PATCHOBJECTDATA


   Else If SELECTED=16 and Key State($4F)=-1 : Rem - down 

      PATCHDATA=Peek(Start(12)+4+(OBJEYE_ITEM*2))
      PATCHDATA=PATCHDATA-1
      If PATCHDATA<=0 : PATCHDATA=255 : End If 
      Poke(Start(12)+4+(OBJEYE_ITEM*2)),PATCHDATA

      REFRESH=1 : Gosub _PATCHOBJECTDATA

   End If 


   ' change type of object being viewed in current stack  

   If SELECTED=15 and Key State($4E)=-1 : Rem - up 


      PATCHDATA=Peek(Start(12)+3+(OBJEYE_ITEM*2))
      PATCHDATA=PATCHDATA+1
      If PATCHDATA>=$6D : PATCHDATA=1 : End If 
      Poke(Start(12)+3+(OBJEYE_ITEM*2)),PATCHDATA

      REFRESH=1 : Gosub _PATCHOBJECTDATA


   Else If SELECTED=15 and Key State($4F)=-1 : Rem - down 

      PATCHDATA=Peek(Start(12)+3+(OBJEYE_ITEM*2))
      PATCHDATA=PATCHDATA-1
      If PATCHDATA<=0 : PATCHDATA=$6D : End If 
      Poke(Start(12)+3+(OBJEYE_ITEM*2)),PATCHDATA

      REFRESH=1 : Gosub _PATCHOBJECTDATA

   End If 


   If SELECTED=9 and Key State($44)=-1 : Rem -- change offset to current

      ' check what is at the place we are putting onto (xxx1,yyy1,zzz1)
      ' if its a space, carry on 
      ' if its a shelf, make it right
      OBJ_POS=Peek(Start(12))/$10

      X=XXX1 : Y=YYY1 : Z=EYEZ
      EE= Fn MAPDATA1
      FF= Fn MAPDATA2

      AA=Int(EE/16) : BB=EE mod 16
      CC=Int(FF/16) : DD=FF mod 16

      If CC<$8 and DD mod 8=1 : Gosub _FLASH_BAD : Return : End If : Rem -- not facing
      If BB mod 4<>0 and DD mod 8=1 : Gosub _FLASH_BAD : Return : End If : Rem -- not a shelf 

      TEST=CC-$8
      If TEST mod 4=0 : Rem north
         If OBJ_POS=8 : OBJ_POS=0
      Else If OBJ_POS=12 : OBJ_POS=4 : End If 
      Else If TEST mod 4=1 : Rem east 
         If OBJ_POS=0 : OBJ_POS=4
      Else If OBJ_POS=8 : OBJ_POS=12 : End If 
      Else If TEST mod 4=2 : Rem south
         If OBJ_POS=0 : OBJ_POS=8
      Else If OBJ_POS=4 : OBJ_POS=12 : End If 
      Else If TEST mod 4=3 : Rem west 
         If OBJ_POS=4 : OBJ_POS=0
      Else If OBJ_POS=12 : OBJ_POS=8 : End If 
      End If 

      ' all is ok, so do it! 

      X=XXX1 : Y=YYY1 : Z=EYEZ

      OBJ_OFFSET= Fn ALLFLOORDATAOFFSET+ Fn FLOORDATAOFFSET

      PATCHVALUE=(OBJ_POS*$10)+(OBJ_OFFSET/$100)
      Poke(Start(12)),PATCHVALUE

      PATCHVALUE=OBJ_OFFSET mod $100
      Poke(Start(12)+1),PATCHVALUE

      Gosub _PATCHOBJECTDATA
      Gosub _FLASH_GOOD
      REFRESH=1 : SELECTED=9


   End If 

   If Key State($44)=-1 and SELECTED=18 : Rem -- graphical stack editor

      Gosub _SHOW_ITEM_STACK : REFRESH=1

      IN_OFFSET=OBJ_OFFSET
      Gosub _OFFSETCONVERT

      X_STORE=OUTX : Y_STORE=OUTY : Z_STORE=OUTZ
      XXX1=X_STORE : YYY1=Y_STORE : ZZZ1=Z_STORE : 


      If ZZZ1<>EYEZ : QUIT=1 : REFRESH=1
      Else : REFRESH=1
      End If 

      EYEZ=ZZZ1


   Else If Key State($44)=-1 and SELECTED=10 : Rem -- jump to item place

      XXX1=X_STORE : YYY1=Y_STORE : ZZZ1=Z_STORE : 

      If ZZZ1<>EYEZ : QUIT=1 : REFRESH=1
      Else : REFRESH=1
      End If 

      EYEZ=ZZZ1


   End If 

   Return 

   _QUICK_VARIABLES:

   ENTRYSIZE=Peek(Start(12)+2)

   ENTRYSIZE=3+((ENTRYSIZE+1)*2)
   MEGAUSED=STACK_OFFSET+ Fn OBJECTCOUNT-REST_OFFSET+ENTRYSIZE

   A=Peek(Start(12))
   B=Peek(Start(12)+1)
   OBJ_POS=A/$10
   OBJ_OFFSET=(A mod $10)*$100
   OBJ_OFFSET=OBJ_OFFSET+B

   OBJ_NUMBERS=Peek(Start(12)+2)

   If OBJEYE_ITEM>OBJ_NUMBERS : OBJEYE_ITEM=OBJ_NUMBERS : End If 
   If OBJEYE_ITEM<0 : OBJEYE_ITEM=0 : End If 

   OBJEYE_TYPE=Peek(Start(12)+3+(OBJEYE_ITEM*2))
   OBJEYE_QUANT=Peek(Start(12)+4+(OBJEYE_ITEM*2))

   Return 

   _ITEM_DISPLAY_VARIABLES:

   If OBJ_NUMBERS>0 and OBJEYE_ITEM>0
      OBJEYE_BACK_01=Peek(Start(12)+3+((OBJEYE_ITEM-1)*2))
   Else : OBJEYE_BACK_01=0
   End If 

   If OBJ_NUMBERS>1 and OBJEYE_ITEM>1
      OBJEYE_BACK_02=Peek(Start(12)+3+((OBJEYE_ITEM-2)*2))
   Else : OBJEYE_BACK_02=0
   End If 

   If OBJ_NUMBERS>2 and OBJEYE_ITEM>2
      OBJEYE_BACK_03=Peek(Start(12)+3+((OBJEYE_ITEM-3)*2))
   Else : OBJEYE_BACK_03=0
   End If 

   If OBJ_NUMBERS>3 and OBJEYE_ITEM>3
      OBJEYE_BACK_04=Peek(Start(12)+3+((OBJEYE_ITEM-4)*2))
   Else : OBJEYE_BACK_04=0
   End If 

   If OBJ_NUMBERS>0 and OBJEYE_ITEM<OBJ_NUMBERS
      OBJEYE_FWD_01=Peek(Start(12)+3+((OBJEYE_ITEM+1)*2))
   Else : OBJEYE_FWD_01=0
   End If 

   If OBJ_NUMBERS>0 and OBJEYE_ITEM<OBJ_NUMBERS-1
      OBJEYE_FWD_02=Peek(Start(12)+3+((OBJEYE_ITEM+2)*2))
   Else : OBJEYE_FWD_02=0
   End If 

   If OBJ_NUMBERS>0 and OBJEYE_ITEM<OBJ_NUMBERS-2
      OBJEYE_FWD_03=Peek(Start(12)+3+((OBJEYE_ITEM+3)*2))
   Else : OBJEYE_FWD_03=0
   End If 

   If OBJ_NUMBERS>0 and OBJEYE_ITEM<OBJ_NUMBERS-3
      OBJEYE_FWD_04=Peek(Start(12)+3+((OBJEYE_ITEM+4)*2))
   Else : OBJEYE_FWD_04=0
   End If 



   Return 


   _PATCHOBJECTDATA:
   ' first, lets calculate the "new" size 
   Gosub _QUICK_VARIABLES

   ' then patch in the new size 
   PATCHVALUE=MEGAUSED
   Gosub OBJECTCOUNT_PUT

   ' then patch in bank 12 (current stack)

   For Z=0 To ENTRYSIZE-1
      LOC=STACK_OFFSET+Z
      PATCHVALUE=Peek(Start(12)+Z)
      Poke Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC,PATCHVALUE
   Next Z


   ' then patch in back 11 (remaining stacks) 

   Rem      For Z=0 To Fn OBJECTCOUNT-STACK_OFFSET-ENTRYSIZE

   For Z=0 To REST_LENGTH-1
      LOC=STACK_OFFSET+ENTRYSIZE+Z
      PATCHVALUE=Peek(Start(11)+Z)
      Poke Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC,PATCHVALUE
   Next Z
   Rem Stop 

   Return 



   _ADD_STACK:

   ' first, lets calculate the "new" size 
   Gosub _QUICK_VARIABLES

   ' then patch in the new size 
   PATCHVALUE= Fn OBJECTCOUNT+5
   Gosub OBJECTCOUNT_PUT

   ' patch in current 12 ahead of itself

   For Z=0 To ENTRYSIZE
      LOC=Z+STACK_OFFSET
      PATCHVALUE=Peek(Start(12)+Z)
      Poke Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC+5,PATCHVALUE
   Next Z

   ' then patch in back 11 (remaining stacks) 

   For Z=0 To REST_LENGTH-1
      LOC=STACK_OFFSET+Z+ENTRYSIZE
      PATCHVALUE=Peek(Start(11)+Z)
      Poke Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC+5,PATCHVALUE
   Next Z

   ' now create a "blank" entry in the current location 

   Poke(Start(10)+LOOKUPOBJECTS(DUNGEON)+STACK_OFFSET+0),0 : Rem -- if possible, fill this with 
   Poke(Start(10)+LOOKUPOBJECTS(DUNGEON)+STACK_OFFSET+1),0 : Rem -- current location
   Poke(Start(10)+LOOKUPOBJECTS(DUNGEON)+STACK_OFFSET+2),0
   Poke(Start(10)+LOOKUPOBJECTS(DUNGEON)+STACK_OFFSET+3),$1
   Poke(Start(10)+LOOKUPOBJECTS(DUNGEON)+STACK_OFFSET+4),$1



   Return 


   _REMOVE_STACK:

   ' first, lets calculate the "new" size 
   Gosub _QUICK_VARIABLES

   ' then patch in the new size 
   PATCHVALUE= Fn OBJECTCOUNT-ENTRYSIZE
   Gosub OBJECTCOUNT_PUT

   ' then patch in back 11 (remaining stacks) 

   For Z=0 To REST_LENGTH
      LOC=STACK_OFFSET+Z
      PATCHVALUE=Peek(Start(11)+Z)
      Poke Start(10)+LOOKUPOBJECTS(DUNGEON)+LOC,PATCHVALUE
   Next Z

   Return 

   _FINDNEXT_STACK:

   Rem -- look for the next stack 
   Rem -- start with current object 
   Rem Screen Open 3,320,150,32,Lowres

   X=XXX1 : Y=YYY1 : Z=ZZZ1
   MAINOFFSET= Fn ALLFLOORDATAOFFSET+ Fn FLOORDATAOFFSET

   OLD_STACK=CURRENT_STACK

   LOC=0 : COUNTER=0


   ' there can only be four items on each space 

   Do 
      A= Fn OBJECTINFO : Rem -- 
      LOC=LOC+1 : B= Fn OBJECTINFO : Rem -- 
      LOC=LOC+1 : C= Fn OBJECTINFO : Rem -- third byte (number of items in list)

      OBJ_POS_S=A/$10

      OBJ_OFFSET_S=(A mod $10)*$100
      OBJ_OFFSET_S=OBJ_OFFSET_S+B


      If MAINOFFSET=OBJ_OFFSET_S and FINDPOS=OBJ_POS_S

         CURRENT_STACK=COUNTER : Gosub _FLASH_GOOD

         REFRESH=1 : Return 

      End If 

      LOC=LOC+1

      LOC=LOC+(C+1)*2
      COUNTER=COUNTER+1


      If LOC> Fn OBJECTCOUNT : CURRENT_STACK=OLD_STACK : Gosub _FLASH_BAD : Exit : End If 

   Loop 


   Return 


   _COUNTOBJECTS:

   Rem --  FIND OUT HOW MANY OBJECT-STACK ENTRIES THERE ARE IN THE THING

   LOC=0 : COUNTER=1

   Do 
      If LOC> Fn OBJECTCOUNT Then Exit 

      LOC=LOC+2
      C= Fn OBJECTINFO : Rem -- third byte (number of items in list)
      LOC=LOC+1

      LOC=LOC+(C+1)*2
      COUNTER=COUNTER+1
   Loop 

   STACKS=COUNTER

   Return 



   _SHOW_ITEM_STACK:

   Screen Open 3,320,116,32,Lowres : Screen Hide : 
   Double Buffer : Update Off : Autoback 2

   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,126,, : Screen 3 : Cls 0

   SELECTED=22

   Change Bank Font 9
   Flash 31,GREENFLASH$

   Autoback 0

   ITEM_STACK_DISPLAY:
   Rem -- draw borders



   IN=-1 : Gosub _DRAWBAR
   IN=116-8 : Gosub _DRAWBAR

   Gosub _COUNTOBJECTS
   Gosub _FINDLOCATIONS
   Gosub _STORE_STACK
   Gosub _STORE_REST
   Gosub _QUICK_VARIABLES
   Gosub _ITEM_DISPLAY_VARIABLES


   Rem - draw all 

   TEMPX=154 : TEMPY=64


   Rem -- items 
   Ink 0
   Bar 0,TEMPY-2 To 320,TEMPY+17


   INF=OBJEYE_BACK_04 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX-128,TEMPY,OUTF : Rem -- back 4 object item  
   End If 

   INF=OBJEYE_BACK_03 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX-96,TEMPY,OUTF : Rem -- back 3 object item  
   End If 

   INF=OBJEYE_BACK_02 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX-64,TEMPY,OUTF : Rem -- back 2 object item  
   End If 

   INF=OBJEYE_BACK_01 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX-32,TEMPY,OUTF : Rem -- back 1 object item  
   End If 

   Rem ==== 
   INF=OBJEYE_TYPE : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX,TEMPY,OUTF : Rem -- current object item 
   Else 
      Paste Icon TEMPX,TEMPY,192 : Rem -- current object item 
   End If 
   Rem ==== 

   INF=OBJEYE_FWD_01 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX+32,TEMPY,OUTF : Rem -- back 1 object item  
   End If 

   INF=OBJEYE_FWD_02 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX+64,TEMPY,OUTF : Rem -- back 1 object item  
   End If 

   INF=OBJEYE_FWD_03 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX+96,TEMPY,OUTF : Rem -- back 1 object item  
   End If 

   INF=OBJEYE_FWD_04 : OUTF=0 : Gosub _OBJECTIMAGECONVERT
   If OUTF<>0
      Paste Icon TEMPX+128,TEMPY,OUTF : Rem -- back 1 object item  
   End If 




   Rem -- display parts 
   'Ink 3,0 : Bar 0+TEMPX,40+TEMPY To 94+TEMPX,47+TEMPY 
   'Ink 13,3 : Text TEMPX,46+TEMPY," ARMOUR:" 
   'Paste Icon 2+TEMPX,49+TEMPY,211 : Rem -  bottom chain   


   Rem -- draw options
If SELECTED=22 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 20,20,"  VIEWING STACK: "+Lzstr$(CURRENT_STACK+1,4)

If SELECTED=23 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 20,32,"NUMBER OF ITEMS: "+Lzstr$(OBJ_NUMBERS+1,3)

If SELECTED=24 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 20,56,"           ITEM: "+Lzstr$(OBJEYE_ITEM+1,3)

If SELECTED=25 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 20,90,"      ITEM TYPE: "+Right$(Hex$(OBJEYE_TYPE,3),2)

If SELECTED=26 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 20,102,"       QUANTITY: "+Lzstr$(OBJEYE_QUANT,3)



   Rem -  
   Bob Off 1 : Bob Off 2
   Screen Swap 
   Screen Show 3 : Wait Vbl : Wait 5 : Clear Key : QUIT=0



   PRESSRETURN=False


   ITEM_STACK_KEYCHECK:
   Rem - check keys 
   Repeat 


      ' change list
      If SELECTED=22 and Key State($4E)=-1 : Rem - object list up 
         CURRENT_STACK=(CURRENT_STACK+1) mod(STACKS-2) : QUIT=1
         Rem         Gosub _PATCHOBJECTDATA : Rem -- splice the patch together  


      Else If SELECTED=22 and Key State($4F)=-1 : Rem - object list down 
         CURRENT_STACK=(CURRENT_STACK+STACKS-3) mod(STACKS-2) : QUIT=1
         Rem         Gosub _PATCHOBJECTDATA : Rem -- splice the patch together  

      End If 



      If Key State($B)=-1 : Rem -- delete current entry

         If Fn OBJECTCOUNT<=ENTRYSIZE : Gosub _FLASH_BAD
         Else 

            If CURRENT_STACK=STACKS-1 : CURRENT_STACK=CURRENT_STACK-1 : End If 
            Gosub _REMOVE_STACK : QUIT=1
         End If 

      Else If Key State($C)=-1 : Rem -- add current entry 

         If Fn OBJECTCOUNT+5>$400 : Gosub _FLASH_BAD : Return 
         Else 
            Gosub _ADD_STACK : QUIT=1
         End If 

      End If 


      ' change number of items in the "stack" / pile 

      If SELECTED=23 and Key State($4E)=-1 : Rem - up   

         PATCHVALUE=Peek(Start(12)+2)
         If MEGAUSED+2>$400 or PATCHVALUE=>$FF : Gosub _FLASH_BAD : QUIT=0 : Rem -- check we have room for another item 
         Else 
            PATCHVALUE=PATCHVALUE+1 : Rem --- add one to the quantities
            Poke(Start(12)+2),PATCHVALUE

            If Peek(Start(12)+(PATCHVALUE*2)+3)=0 : Rem -- if no "old" item, add one 
            Poke(Start(12)+(PATCHVALUE*2)+3),$1 : End If 
            If Peek(Start(12)+(PATCHVALUE*2)+4)=0
            Poke(Start(12)+(PATCHVALUE*2)+4),$1 : End If 

            Gosub _PATCHOBJECTDATA : Rem -- splice the patch together 
            QUIT=1

         End If 

      Else If SELECTED=23 and Key State($4F)=-1 : Rem - down 
         PATCHVALUE=Peek(Start(12)+2)

         If PATCHVALUE<=0 : Gosub _FLASH_BAD : QUIT=0
         Else 
            PATCHVALUE=PATCHVALUE-1
            Poke(Start(12)+2),PATCHVALUE
            Gosub _PATCHOBJECTDATA
            QUIT=1
         End If 
      End If 

      ' change viewing object in current stack 

      If SELECTED=24 and Key State($4E)=-1 : Rem - up 
         If OBJEYE_ITEM<OBJ_NUMBERS : OBJEYE_ITEM=OBJEYE_ITEM+1 : QUIT=1 : End If 

      Else If SELECTED=24 and Key State($4F)=-1 : Rem - down 
         If OBJEYE_ITEM>0 : OBJEYE_ITEM=OBJEYE_ITEM-1 : QUIT=1 : End If 

      End If 

      ' change quantity of object being viewed in current stack  

      If SELECTED=26 and Key State($4E)=-1 : Rem - up 


         PATCHDATA=Peek(Start(12)+4+(OBJEYE_ITEM*2))
         PATCHDATA=PATCHDATA+1
         If PATCHDATA>=255 : PATCHDATA=1 : End If 
         Poke(Start(12)+4+(OBJEYE_ITEM*2)),PATCHDATA

         QUIT=1 : Gosub _PATCHOBJECTDATA


      Else If SELECTED=26 and Key State($4F)=-1 : Rem - down 

         PATCHDATA=Peek(Start(12)+4+(OBJEYE_ITEM*2))
         PATCHDATA=PATCHDATA-1
         If PATCHDATA<=0 : PATCHDATA=255 : End If 
         Poke(Start(12)+4+(OBJEYE_ITEM*2)),PATCHDATA

         QUIT=1 : Gosub _PATCHOBJECTDATA

      End If 


      ' change type of object being viewed in current stack  

      If SELECTED=25 and Key State($4E)=-1 : Rem - up 


         PATCHDATA=Peek(Start(12)+3+(OBJEYE_ITEM*2))
         PATCHDATA=PATCHDATA+1
         If PATCHDATA>=$6D : PATCHDATA=1 : End If 
         Poke(Start(12)+3+(OBJEYE_ITEM*2)),PATCHDATA

         QUIT=1 : Gosub _PATCHOBJECTDATA


      Else If SELECTED=25 and Key State($4F)=-1 : Rem - down 

         PATCHDATA=Peek(Start(12)+3+(OBJEYE_ITEM*2))
         PATCHDATA=PATCHDATA-1
         If PATCHDATA<=0 : PATCHDATA=$6D : End If 
         Poke(Start(12)+3+(OBJEYE_ITEM*2)),PATCHDATA

         QUIT=1 : Gosub _PATCHOBJECTDATA

      End If 




      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=(SELECTED+39) mod 40 : QUIT=1
         If SELECTED<22 : SELECTED=26 : End If 

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=(SELECTED+1) mod 40 : QUIT=1
         If SELECTED>26 : SELECTED=22 : End If 


      Else If Key State($40)=-1 : Rem space
         ' check what floor current stack is on, and jump to it 

         QUIT=2
         SELECTED=18 : REFRESH=1

      End If 


   Until QUIT<>0

   If QUIT=1 Then Goto ITEM_STACK_DISPLAY



   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   REFRESH=1

   Autoback 2 : Update On 
   Screen Close 3
   Wait Vbl 
   Return 











   '
   '
   '
   '  ~~~ CHARACTER EDITOR ~~~
   '
   '

   Rem - person edit  
   _TEXTS3:

   For TEMP=4 To 21
      LINE$(TEMP)=""
      OPTION(TEMP)=False
   Next TEMP

   If SELECTED=-1 Then SELECTED=4


   If DUNGEON<>0 Then PERSONMAUDE=1 : Rem --- only allow champ editing on dungeon 1
   If BEXT=True and SVEGAME=False Then PERSONMAUDE=1 : Rem -- but not on bext without savegame

   If PERSONMAUDE=1 Then Goto MONSTERTEXT



   LINE$(4)="EDIT: "+"CHAMPIONS  "
   OPTION(4)=True

   LINE$(6)="CHAMPION: "+Lzstr$(CHAMPION+1,2)
   OPTION(6)=True

   Gosub _CHAMPIONDESC


   Return 


   MONSTERTEXT:
   ' max monsters=$80 (above this is spells)
   LINE$(4)="EDIT: "+"MONSTERS"
   LINE$(6)="MONSTERS: "+Lzstr$( Fn MONSTERCOUNT+1,3)

   OPTION(4)=True : OPTION(6)=True

   Gosub _MONSTERDESC
   LINE$(21)="FREE: "+Hex$($300-(( Fn MONSTERCOUNT+1)*6),4)

   Return 

   ' character change 
   _EDITKEYS3:

   If SELECTED=4 and Key State($4E)=-1 : Rem - person edit mode up

      PERSONMAUDE=(PERSONMAUDE+1) mod 2 : REFRESH=1

   Else If SELECTED=4 and Key State($4F)=-1 : Rem - person edit mode down

      PERSONMAUDE=(PERSONMAUDE+1) mod 2 : REFRESH=1

   End If 



   If PERSONMAUDE=1 Then Goto MONSTERKEYS

   CHAMPIONKEYS:
   ' champion keys

   If Key State($40)=-1 and PLACEMODE=0 and SELECTED=8
      Gosub _SHOWCHAMPIONSTATS : REFRESH=1 : Wait Vbl : Screen 0 : Return 
   End If 


   If Key State($40)=-1 and PLACEMODE=0 and SELECTED=9
      Gosub _SHOWCHAMPIONSPELLS : REFRESH=1 : Wait Vbl : Screen 0 : Return 
   End If 

   If Key State($40)=-1 and PLACEMODE=0 and SELECTED=10
      Gosub _SHOWCHAMPIONPOCKETS : REFRESH=1 : Wait Vbl : Screen 0 : Return 
   End If 



   If SELECTED=6 and Key State($4E)=-1 : Rem champ up 
      CHAMPION=(CHAMPION+1) mod 16 : REFRESH=1

   Else If SELECTED=6 and Key State($4F)=-1 : Rem champ down 
      CHAMPION=(CHAMPION+15) mod 16 : REFRESH=1
   End If 

   ' pick a location for a champion 

   If SELECTED=12 and PLACEMODE=0 and(Key State($44)=-1 or PRESSRETURN=True) : Rem- select a location   

      PRESSRETURN=False
      LOC=$16 : XXX2= Fn CHAMPIONSTAT
      LOC=$17 : YYY2= Fn CHAMPIONSTAT
      LOC=$1A : ZZZ2=( Fn CHAMPIONSTAT mod $10)

      Bob Off 2
      A=XXX2 : B=YYY2 : Z=EYEZ
      OLDX=XXX2 : OLDY=YYY2 : OLDZ=EYEZ

      Wait Vbl 


      If EYEZ<>ZZZ2 : EYEZ=ZZZ2 : QUIT=2 : End If 

      PLACEMODE=2
      REFRESH=1

   Else If SELECTED=12 and PLACEMODE=2 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2 : Bob Update 
      PATCHVALUE=XXX2 : LOC=$16 : Gosub CHAMPIONSTAT_PUT
      PATCHVALUE=YYY2 : LOC=$17 : Gosub CHAMPIONSTAT_PUT

      LOC=$1A : PATCHVALUE=EYEZ
      Gosub CHAMPIONSTAT_PUT

      If EYEZ=OLDZ
         A=OLDX : B=OLDY
         Gosub _REMOVEMARKS : Wait Vbl 
      End If 

      A=XXX2 : B=YYY2 : Z=EYEZ
      Gosub _DRAWMARKS : Wait Vbl 


      PLACEMODE=0
      REFRESH=1

   End If 

   If SELECTED=16 and Key State($4E)=-1
      LOC=$18 : PATCHVALUE= Fn CHAMPIONSTAT
      PATCHVALUE=(PATCHVALUE+1) mod 4
      Gosub CHAMPIONSTAT_PUT
      REFRESH=1

   Else If SELECTED=16 and Key State($4F)=-1
      LOC=$18 : PATCHVALUE= Fn CHAMPIONSTAT
      PATCHVALUE=(PATCHVALUE+1) mod 4
      Gosub CHAMPIONSTAT_PUT
      REFRESH=1

   End If 

   Return 

   Return 

   MONSTERKEYS:

   If Key State($C)=-1 : Bell : QUIT=1 : End If : Rem - remove monsther

   If Key State($D)=-1 : Bell 20 : QUIT=1 : End If : Rem -- add monster 

   If Key State($40)=-1 and PLACEMODE=0
      Gosub _SHOWMONSTER : REFRESH=1 : Wait Vbl : Screen 0 : Return 

   Else If SELECTED=6 and Key State($4E)=-1 : Rem - number of monsters up
      PATCHVALUE= Fn MONSTERCOUNT
      PATCHVALUE=PATCHVALUE+1
      If PATCHVALUE>$7F : PATCHVALUE=0 : End If 
      Gosub MONSTERCOUNT_PUT : REFRESH=1


   Else If SELECTED=6 and Key State($4F)=-1 : Rem - number of monsters down
      PATCHVALUE= Fn MONSTERCOUNT
      PATCHVALUE=PATCHVALUE-1
      If PATCHVALUE<0 : PATCHVALUE=$7F : End If 
      Gosub MONSTERCOUNT_PUT : REFRESH=1
   End If 

 ' pick a location for the monster

   If SELECTED=17 and PLACEMODE=0 and(Key State($44)=-1 or PRESSRETURN=True) : Rem- select a location   

      PRESSRETURN=False

      LOC=1 : XXX2= Fn MONSTERDETAIL : Bclr 7,XXX2
      LOC=2 : YYY2= Fn MONSTERDETAIL
      LOC=0 : ZZZ2=( Fn MONSTERDETAIL mod $10)-1

      Bob Off 2
      A=XXX2 : B=YYY2 : Z=EYEZ
      OLDX=XXX2 : OLDY=YYY2 : OLDZ=EYEZ

      Wait Vbl 

      If EYEZ<>ZZZ2 : EYEZ=ZZZ2 : QUIT=2 : End If 

      PLACEMODE=2
      REFRESH=1


   Else If SELECTED=17 and PLACEMODE=2 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2 : Bob Update 

      LOC=1 : SPECIAL=Btst(7, Fn MONSTERDETAIL)

      ' ---  
      '  
      If DUNGEON<>5 and MONSTER<>0
         SPECIAL=False
      End If 

      PATCHVALUE=XXX2 : If SPECIAL=True : Bset 7,PATCHVALUE : End If 
      LOC=1 : Gosub MONSTERDETAIL_PUT
      PATCHVALUE=YYY2 : LOC=2 : Gosub MONSTERDETAIL_PUT

      If EYEZ=OLDZ
         A=OLDX : B=OLDY
         Gosub _REMOVEMARKS : Wait Vbl 
      End If 

      A=XXX2 : B=YYY2 : Z=EYEZ
      Gosub _DRAWMARKS : Wait Vbl 


      LOC=0 : PATCHVALUE= Fn MONSTERDETAIL
      PATCHVALUE=(PATCHVALUE/$10)*$10
      PATCHVALUE=PATCHVALUE+(EYEZ+1)
      Gosub MONSTERDETAIL_PUT

      LOC=5 : PATCHVALUE=$FF : Remove teaming 
      Gosub MONSTERDETAIL_PUT

      REFRESH=1

      PLACEMODE=0
      REFRESH=1

   End If 
'   MONSTERTYPECOUNT 

   If SELECTED=10 and Key State($4E)=-1 : Rem monster form up  

      LOC=4 : PATCHVALUE= Fn MONSTERDETAIL
      PATCHVALUE=(PATCHVALUE+1) mod($6C-BEXT)
      If PATCHVALUE>MONSTERTYPECOUNT and PATCHVALUE<=$63 : PATCHVALUE=$64 : End If 
      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=10 and Key State($4F)=-1 : Rem monster form down  

      LOC=4 : PATCHVALUE= Fn MONSTERDETAIL
      PATCHVALUE=(PATCHVALUE+$6B-BEXT) mod($6C-BEXT)
      If PATCHVALUE<=$63 and PATCHVALUE>MONSTERTYPECOUNT : PATCHVALUE=MONSTERTYPECOUNT : End If 
      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=12 and Key State($4E)=-1 : Rem monster type up

      LOC=0 : PATCHVALUE= Fn MONSTERDETAIL/$10
      TEMP= Fn MONSTERDETAIL mod $10

      PATCHVALUE=(PATCHVALUE+2)
      If PATCHVALUE>$4 : PATCHVALUE=$0 : End If 

      PATCHVALUE=(PATCHVALUE*$10)+TEMP

      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=12 and Key State($4F)=-1 : Rem monster type down  

      LOC=0 : PATCHVALUE= Fn MONSTERDETAIL/$10
      TEMP= Fn MONSTERDETAIL mod $10

      PATCHVALUE=(PATCHVALUE-2)
      If PATCHVALUE<$0 : PATCHVALUE=$4 : End If 

      PATCHVALUE=(PATCHVALUE*$10)+TEMP

      Gosub MONSTERDETAIL_PUT
      REFRESH=1


   Else If SELECTED=13 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem monster spells 

      LOC=0
      PATCHVALUE= Fn MONSTERDETAIL
      Bchg 4,PATCHVALUE

      Gosub MONSTERDETAIL_PUT
      REFRESH=1
   Else If SELECTED=14 and BEXT=True and(Key State($4E)=-1 or Key State($4F)=-1) : Rem monster spells 

      LOC=0
      PATCHVALUE= Fn MONSTERDETAIL
      Bchg 7,PATCHVALUE

      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=8 and Key State($4E)=-1 : Rem monster up 
      MONSTER=MONSTER+1 : REFRESH=1
      If MONSTER> Fn MONSTERCOUNT : MONSTER=0 : End If 


   Else If SELECTED=8 and Key State($4F)=-1 : Rem monster down 
      MONSTER=MONSTER-1
      REFRESH=1
      If MONSTER<0 : MONSTER= Fn MONSTERCOUNT : End If 

   End If 

   If SELECTED=11 and Key State($4E)=-1 : Rem level up   

      LOC=4 : TEMP= Fn MONSTERDETAIL
      LOC=3 : PATCHVALUE= Fn MONSTERDETAIL

      GHOST=Btst(7,PATCHVALUE)
      PATCHVALUE=((PATCHVALUE mod $80)+$1) mod $80
   If GHOST=True : Bset 7,PATCHVALUE : Else : Bclr 7,PATCHVALUE : End If 
      If TEMP<>$64 or TEMP<>$65 : Bclr 7,PATCHVALUE : End If 
      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem level down   

      LOC=4 : TEMP= Fn MONSTERDETAIL
      LOC=3 : PATCHVALUE= Fn MONSTERDETAIL

      GHOST=Btst(7,PATCHVALUE)
      PATCHVALUE=((PATCHVALUE mod $80)+$7F) mod $80

   If GHOST=True : Bset 7,PATCHVALUE : Else : Bclr 7,PATCHVALUE : End If 
      If TEMP<>$64 or TEMP<>$65 : Bclr 7,PATCHVALUE : End If 
      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=14-BEXT and(Key State($4F)=-1 or Key State($4E)=-1) : Rem Illusion 

      LOC=3 : PATCHVALUE= Fn MONSTERDETAIL
      Bchg 7,PATCHVALUE
      Gosub MONSTERDETAIL_PUT
      REFRESH=1

   Else If SELECTED=15-BEXT and(Key State($4E)=-1 or Key State($4F)=-1) : Rem special arrival

      LOC=1 : PATCHVALUE= Fn MONSTERDETAIL
      Bchg 7,PATCHVALUE
      Gosub MONSTERDETAIL_PUT
      REFRESH=1


   Else If SELECTED=16-BEXT and PLACEMODE=0 and(Key State($44)=-1 or PRESSRETURN=True) : Rem- select a location (for special arrival  

      PRESSRETURN=False

      If LOOKUPHARDCODE_CHAOS2<>0

         LOC=1 : PATCHVALUE= Fn MONSTERDETAIL
         If SPECIAL=True : Bclr 7,PATCHVALUE : End If 
         Gosub CRYSTALEFFECT7X_PUT

         LOC=2 : PATCHVALUE= Fn MONSTERDETAIL
         Gosub CRYSTALEFFECT7Y_PUT

      Else 
         Gosub _FLASH_BAD : 
      End If 



      PLACEMODE=0
      REFRESH=1


   End If 



   If SELECTED=19 and Key State($44)=-1 : Rem -- team data 

      If MONSTER=0 : Gosub _FLASH_BAD : Return : End If 

      TEMPM=MONSTER : Rem -- get position of curent monster

      LOC=4 : TEMP= Fn MONSTERDETAIL : Rem -- form test 
      If TEMP>=$67 or(TEMP<$65 and TEMP>MONSTERTYPECOUNT) or TEMP=$15 or TEMP=$16
         LOC=5 : PATCHVALUE=$FF : Gosub MONSTERDETAIL_PUT
      Gosub _FLASH_BAD : Return : End If 

      MONSTER=MONSTER-1

      LOC=1 : TEMPX= Fn MONSTERDETAIL
      LOC=2 : TEMPY= Fn MONSTERDETAIL
      LOC=0 : TEMPZ=( Fn MONSTERDETAIL mod $10)

      LOC=4 : TEMP= Fn MONSTERDETAIL : Rem -- form test 

      If TEMP>=$67 or(TEMP<$65 and TEMP>MONSTERTYPECOUNT) or TEMP=$15 or TEMP=$16
         LOC=5 : PATCHVALUE=$FF : Gosub MONSTERDETAIL_PUT
         Gosub _FLASH_BAD : MONSTER=TEMPM
         LOC=5 : PATCHVALUE=$FF : Gosub MONSTERDETAIL_PUT
      Return : End If 

      MONSTER=TEMPM

      LOC=1 : PATCHVALUE=$FF : Rem -- make the current monster $FF
      Gosub MONSTERDETAIL_PUT

      LOC=2 : PATCHVALUE=TEMPY : Gosub MONSTERDETAIL_PUT
      LOC=0 : PATCHVALUE=( Fn MONSTERDETAIL/$10)
      PATCHVALUE=(PATCHVALUE*$10)+TEMPZ
      Gosub MONSTERDETAIL_PUT

      Gosub _TEAMMONSTERS
      Gosub _FLASH_GOOD

      MONSTER=TEMPM

      REFRESH=1
   End If 


   Return 

   _TEAMMONSTERS:
   '
   ' scroll through and "renumber" our team data
   '
   TEMP=MONSTER



   ' clear all
   For MONSTER=0 To Fn MONSTERCOUNT
      LOC=5 : PATCHVALUE=$FF : Gosub MONSTERDETAIL_PUT
   Next MONSTER


   ' put 00 on those in teams 
   For MONSTER=0 To Fn MONSTERCOUNT
      LOC=1 : TEMPX= Fn MONSTERDETAIL

      If TEMPX=$FF
         LOC=5
         MONSTER=MONSTER-1
         PATCHVALUE=0 : Gosub MONSTERDETAIL_PUT
         MONSTER=MONSTER+1
         PATCHVALUE=0 : Gosub MONSTERDETAIL_PUT
      End If 
   Next MONSTER

   MONSTER=TEMP

   ' put counting number on those in teams
   COUNTER=0 : TEAM=0

   For MONSTER=0 To Fn MONSTERCOUNT
      LOC=5 : TEMPT1= Fn MONSTERDETAIL

      If TEMPT1=$0
         PATCHVALUE=(TEAM*4)+COUNTER : Gosub MONSTERDETAIL_PUT

         MONSTER=MONSTER+1

         LOC=5 : TEMPT2= Fn MONSTERDETAIL
         LOC=1 : TEMPT3= Fn MONSTERDETAIL

         If TEMPT3<>$FF : TEAM=TEAM+1 : COUNTER=0
         Else If TEMPT2<>0 : COUNTER=0 : TEAM=TEAM+1
         Else If TEMPT2=0 and COUNTER=3 : COUNTER=0 : TEAM=TEAM+1
      Else : COUNTER=COUNTER+1 : End If 

         MONSTER=MONSTER-1

      End If 
   Next MONSTER


   MONSTER=TEMP


   Return 


   _PLACECHAMPIONMARKERS:

    If LISTTOGGLE=True Then Return 
   Rem .... this is for standard BW with no save-game overlay 
   Rem .... this can be re-used with the save game but must 
   Rem .... exclude champions within the current team 
   Rem .... 

   If DUNGEON<>0 Then Return 

   TEMP=CHAMPION

   For CHAMPION=0 To 15

      LOC=$1A : POSF= Fn CHAMPIONSTAT
      LOC=$16 : A= Fn CHAMPIONSTAT
      LOC=$17 : B= Fn CHAMPIONSTAT

      If POSF=EYEZ
         Bclr 7,A : MARKTYPE=0
         Gosub _DRAWMARKS
      End If 

   Next CHAMPION

   REFRESH=1
   CHAMPION=TEMP

   Return 

   _PLACEMONSTERMARKERS:
    If LISTTOGGLE=True Then Return 
   TEMP=MONSTER

   For MONSTER=0 To( Fn MONSTERCOUNT)

      LOC=0 : POSF=( Fn MONSTERDETAIL mod $10)-1
      LOC=1 : A= Fn MONSTERDETAIL
      LOC=2 : B= Fn MONSTERDETAIL
      LOC=4 : C= Fn MONSTERDETAIL
      If POSF=EYEZ and A<>$FF
         Bclr 7,A : If C<=$7F : MARKTYPE=1 : Else : MARKTYPE=2 : End If 
         Gosub _DRAWMARKS
      End If 

   Next MONSTER

   REFRESH=1
   MONSTER=TEMP

   Return 


   _DRAWMARKS:
   Screen 0 : Bob Off 
   Z=EYEZ
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8


   Change Bank Font 9 : Ink 14,0

   INX=0+5+E+(A*16)+1
   INY=(B*8)+5+F+1
   OUTX=INX+14
   OUTY=INY+6

   ' draw markers 


   If Btst(MARKTYPE,MARKERS)=True

      If MARKTYPE=0 : Rem - champions
         Ink 13 : Bar INX,INY To OUTX,OUTY
         Ink 0,13 : Text INX+4,INY+5,"C"

      Else If MARKTYPE=1 and C<$80 : Rem - monsters 
        If C=>$64 : CUL=9 : Else : CUL=12 : End If 
         Ink CUL : Bar INX,INY To OUTX,OUTY
         Ink 0,CUL : Text INX+4,INY+5,"M"
      Else If MARKTYPE=2 and C=>$80 : Rem - spells 
         Ink 7 : Bar INX,INY To OUTX,OUTY
         Ink 14,7 : Text INX+4,INY+5,"S"
      End If 

   Else 
      X=A : Y=B
      Ink 0 : Bar INX,INY To OUTX,OUTY
      Gosub _DRAWICON
   End If 


   Return 


   _REMOVEMARKS:
   Screen 0 : Bob Off 
   Z=EYEZ
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8


   Change Bank Font 9 : Ink 14,0

   INX=0+5+E+(A*16)+1
   INY=(B*8)+5+F+1
   OUTX=INX+14
   OUTY=INY+6

   ' remove marks 
   X=A : Y=B
   Ink 0 : Bar INX,INY To OUTX,OUTY
   Gosub _DRAWICON


   Return 



   _CHAMPIONDESC:

   LINE$(8)="EDIT STATS" : OPTION(8)=True
   LINE$(9)="EDIT SPELLS" : OPTION(9)=True
   LINE$(10)="EDIT POCKETS" : OPTION(10)=True


   LOC=$16 : LINE$(12)="X: "+Right$(Hex$($1000+ Fn CHAMPIONSTAT),2)
   LOC=$17 : LINE$(12)=LINE$(12)+"  Y: "+Right$(Hex$($1000+ Fn CHAMPIONSTAT),2)


   OPTION(12)=True

   LOC=$18
   If Fn CHAMPIONSTAT=0 : LINE$(14)="NORTH"
   Else If Fn CHAMPIONSTAT=1 : LINE$(14)="EAST"
   Else If Fn CHAMPIONSTAT=2 : LINE$(14)="SOUTH"
   Else If Fn CHAMPIONSTAT=3 : LINE$(14)="WEST"
   Else LINE$(14)="INVALID"
   End If 
   LINE$(14)="FACING: "+LINE$(14) : OPTION(14)=True

   LOC=$1A : LINE$(13)="FLOOR: "+Right$(Hex$($1000+ Fn CHAMPIONSTAT),1)


   Return 

   _MONSTERDESC:

   LINE$(8)="SELECTED: "+Lzstr$(MONSTER+1,3)
   OPTION(8)=True


   ' monsters 

   LOC=4 : LINE$(10)="FORM: "+(Right$(Hex$( Fn MONSTERDETAIL+$100),2))
   LOC=3 : LINE$(11)="LEVEL: "+Lzstr$( Fn MONSTERDETAIL mod $80,3)

   LOC=0 : MONSTERTYPE= Fn MONSTERDETAIL/$10

'====  spells    
   If Btst(0,MONSTERTYPE)=True
      LINE$(13)="SPELL CASTER"
   Else 
      LINE$(13)="NO SPELLS"
   End If 

   Bclr 0,MONSTERTYPE

' drop object
   If Btst(3,MONSTERTYPE)=True and BEXT=True
      LINE$(14)="DROPS OBJECT"
      OPTION(14)=True
   Else 
      LINE$(14)="NO OBJECT"
      OPTION(14)=True
   End If 

   Bclr 3,MONSTERTYPE

   If MONSTERTYPE=0 : MONSTYPE$="FIGHTER     "
   Else If MONSTERTYPE=2 : MONSTYPE$="DRONE       "
   Else If MONSTERTYPE=4 : MONSTYPE$="SHOOTER     "
   Else : MONSTYPE$="INVALID "+Hex$( Fn MONSTERDETAIL/$10) : End If 

   LINE$(12)=MONSTYPE$

   '       LINE$(15)="..."+Hex$( Fn MONSTERDETAIL)

   LOC=1 : REALX= Fn MONSTERDETAIL

   If REALX<>$FF : Bclr 7,REALX : End If 

   LOC=0 : LINE$(18)="FLOOR:"+(Str$(( Fn MONSTERDETAIL mod $10)-1))
   LOC=1 : LINE$(17)="X: "+Right$(Hex$(($100+REALX)),2)
   LOC=2 : LINE$(17)=LINE$(17)+"  Y: "+Right$(Hex$(($100+ Fn MONSTERDETAIL)),2)
   LOC=5 : LINE$(19)="TEAM-DATA: "+Right$((Hex$( Fn MONSTERDETAIL+$100)),2)

   For TEMP=10 To 13 : OPTION(TEMP)=True : Next TEMP
   OPTION(17)=True : Rem -- 
   OPTION(19)=True : Rem -- team data 

   ' summon / illusions !!
   LOC=3 : TEMP= Fn MONSTERDETAIL
   GHOST=Btst(7,TEMP)
   LOC=4 : 
   If Fn MONSTERDETAIL=$65 or Fn MONSTERDETAIL=$64

      If GHOST=False
         SUMMON$="FALSE"
      Else : SUMMON$="TRUE"
      End If 

      LINE$(14-BEXT)="ILLUSION: "+SUMMON$
      OPTION(14-BEXT)=True

   Else 
      LINE$(14-BEXT)="                     "
      OPTION(14-BEXT)=False
   End If 



   ' special "appear" thing (test if working on all levels) 

   LOC=1 : TEMP= Fn MONSTERDETAIL
   SPECIAL=Btst(7,TEMP)

   If DUNGEON<>5 and MONSTER<>0
     SPECIAL=False
   End If 

 '
 ' this code only the summoned Entropy

   If MONSTER=0 and DUNGEON=5

       If SPECIAL=False
         APPAR$="FALSE"
      Else : APPAR$="TRUE"
      End If 

      LINE$(15-BEXT)="ARRIVAL: "+APPAR$
      OPTION(15-BEXT)=True


   ' location of Summoning
      If SPECIAL<>False and LOOKUPHARDCODE_CHAOS2<>0
         OPTION(16-BEXT)=True
         LINE$(16-BEXT)="X: "+Right$(Hex$(($100+ Fn CRYSTALEFFECT7X)),2)
         LINE$(16-BEXT)=LINE$(16)+"  Y: "+Right$(Hex$(($100+ Fn CRYSTALEFFECT7Y)),2)
      End If 


   Else 
      LINE$(15-BEXT)="                     "
      OPTION(15-BEXT)=False
       If BEXT=False
        LINE$(16-BEXT)="                     "
        OPTION(16-BEXT)=False
       End If 
   End If 


   Return 


   _SHOWMONSTER:

   Screen Open 3,320,110,32,Lowres : Screen Hide 
   Autoback 2

   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,128,, : Screen 3 : Cls 0

   SELECTED=8

   Change Bank Font 9
   Flash 31,GREENFLASH$
   Autoback 0

   MONSTERDISPLAY:

   RemIf REFRESH=1 : Cls 0 : REFRESH=0 : End If 
   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=110-7 : Gosub _DRAWBAR


   Rem -- draw options
If SELECTED=8 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170,20,"MONSTER: "+Lzstr$(MONSTER+1,3)

If SELECTED=10 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=4 : Text 170,36,"FORM: "+Right$((Hex$( Fn MONSTERDETAIL+$100)),2)

If SELECTED=11 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=3 : Text 170,48,"LEVEL: "+Lzstr$( Fn MONSTERDETAIL mod $80,3)

   LOC=0
   MONTYPE= Fn MONSTERDETAIL/$10
   MONSPELL=Btst(0,MONTYPE)
   Bclr 0,MONTYPE

   LOC=0
   If MONTYPE=0 : MONSTYPE$="FIGHTER     "
   Else If MONTYPE=2 : MONSTYPE$="DRONE       "
   Else If MONTYPE=4 : MONSTYPE$="SHOOTER     "
   Else : MONSTYPE$="INVALID "+Str$(MONTYPE)+"  " : End If 

If SELECTED=12 : III=31 : Else III=6 : End If 

   Ink III,0 : Text 170,60,"TYPE: "+MONSTYPE$

If SELECTED=13 : III=31 : Else III=6 : End If 

       If MONSPELL=True : MONSSPELL$="      SPELL CASTER"
   Else : MONSSPELL$="      NO SPELLS   " : End If 
   Ink III,0 : Text 170,72,""+MONSSPELL$


   LOC=3 : PATCHVALUE= Fn MONSTERDETAIL

   '                  GHOST=Btst(7,PATCHVALUE)
   '                  PATCHVALUE=((PATCHVALUE mod $80)+$1) mod $80

' new code... sort the offset
   LOC=4 : INF= Fn MONSTERDETAIL
   THISOFFSET=-1
   If INF=$64 : THISOFFSET=SUMMONOFFSET : End If 
   If INF=$65 : THISOFFSET=SUMMONOFFSET : End If 
   If INF=$66 : THISOFFSET=BEHOLDEROFFSET : End If 
   If INF=$67 : THISOFFSET=BEHOLDEROFFSET : End If 
   If INF=$68 : THISOFFSET=CRABOFFSET : End If 
   If INF=$69 : THISOFFSET=BIGDRAGONOFFSET : End If 
   If INF=$6A : THISOFFSET=SMALLDRAGONOFFSET : End If 

   If THISOFFSET<>-1
       If SELECTED=14 : III=31 : Else III=6 : End If 
       Ink III,0 : Text 170,72+(12*2),"GRADE OFFSET:"+Right$(Str$(1000+THISOFFSET),3)
   Else 
       Ink III,0 : Text 170,72+(12*2),"                          "
   End If 

If SELECTED=16 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 56,72+(12*2),"EDIT DESIGN"


   Rem - convert form/level to an image 

   LOC=3 : INL= Fn MONSTERDETAIL
   LOC=4 : INF= Fn MONSTERDETAIL
   Gosub _MONSTERIMAGECONVERT

   Bob Off 1 : Bob Off 2

   III=6 : Ink III,0
   If DBUG=True Then Text 2,20,"BOB:"+Str$(OUT)+"  "


   ' work here

   If OUT=0
      Bob Off 3
   Else If OUT<=90+(X*NUMBEROFGRADES)+1 and OUT=>1
      Rem Hot Spot OUT,$12 
      Rem Bob 3,100,76,OUT : Rem Bob Update  

      Hot Spot OUT,$12
      Screen 3
      Bob 3,102,76,OUT : Rem Bob Update 
   End If 

   Rem Screen Swap  
   Screen Show 3 : Wait Vbl : Wait 5 : Clear Key 



   PRESSRETURN=False

   Rem - check keys 
   Repeat 

      If SELECTED=8 and Key State($4E)=-1 : Rem monster up 
         MONSTER=(MONSTER+1)
         If MONSTER> Fn MONSTERCOUNT : MONSTER=0 : End If 
         QUIT=1

      Else If SELECTED=8 and Key State($4F)=-1 : Rem monster down 
         MONSTER=MONSTER-1
         If MONSTER<0 : MONSTER= Fn MONSTERCOUNT : End If 
         QUIT=1

      Else If SELECTED=10 and Key State($4E)=-1 : Rem monster form up  

         LOC=4 : PATCHVALUE= Fn MONSTERDETAIL
         PATCHVALUE=(PATCHVALUE+1) mod($6C-BEXT)
         If PATCHVALUE>MONSTERTYPECOUNT and PATCHVALUE<=$63 : PATCHVALUE=$64 : End If 
         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=10 and Key State($4F)=-1 : Rem monster form down  

         LOC=4 : PATCHVALUE= Fn MONSTERDETAIL
         PATCHVALUE=(PATCHVALUE+($6B-BEXT)) mod($6C-BEXT)
         If PATCHVALUE<=$63 and PATCHVALUE>MONSTERTYPECOUNT : PATCHVALUE=MONSTERTYPECOUNT : End If 
         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      End If 

      If SELECTED=11 and Key State($4E)=-1 : Rem level up   

         LOC=4 : TEMP= Fn MONSTERDETAIL
         LOC=3 : PATCHVALUE= Fn MONSTERDETAIL

         GHOST=Btst(7,PATCHVALUE)
         PATCHVALUE=((PATCHVALUE mod $80)+$1) mod $80
      If GHOST=True : Bset 7,PATCHVALUE : Else : Bclr 7,PATCHVALUE : End If 
         If TEMP<>$64 or TEMP<>$65 : Bclr 7,PATCHVALUE : End If 
         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=11 and Key State($4F)=-1 : Rem level down   

         LOC=4 : TEMP= Fn MONSTERDETAIL
         LOC=3 : PATCHVALUE= Fn MONSTERDETAIL

         GHOST=Btst(7,PATCHVALUE)
         PATCHVALUE=((PATCHVALUE mod $80)+$7F) mod $80

      If GHOST=True : Bset 7,PATCHVALUE : Else : Bclr 7,PATCHVALUE : End If 
         If TEMP<>$64 or TEMP<>$65 : Bclr 7,PATCHVALUE : End If 
         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=12 and Key State($4E)=-1 : Rem monster type up

         LOC=0 : PATCHVALUE= Fn MONSTERDETAIL/$10
         TEMP= Fn MONSTERDETAIL mod $10

         PATCHVALUE=(PATCHVALUE+2)
         If PATCHVALUE>$4 : PATCHVALUE=$0 : End If 

         PATCHVALUE=(PATCHVALUE*$10)+TEMP

         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=12 and Key State($4F)=-1 : Rem monster type down  

         LOC=0 : PATCHVALUE= Fn MONSTERDETAIL/$10
         TEMP= Fn MONSTERDETAIL mod $10

         PATCHVALUE=(PATCHVALUE21)
         If PATCHVALUE<$0 : PATCHVALUE=$4 : End If 

         PATCHVALUE=(PATCHVALUE*$10)+TEMP

         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=13 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem monster spell type 

         LOC=0 : PATCHVALUE= Fn MONSTERDETAIL/$10
         TEMP= Fn MONSTERDETAIL mod $10

         Bchg 0,PATCHVALUE

         PATCHVALUE=(PATCHVALUE*$10)+TEMP

         Gosub MONSTERDETAIL_PUT
         REFRESH=1 : QUIT=1

      Else If SELECTED=16 and Key State($44)=-1
         LOC=4 : CHAR= Fn MONSTERDETAIL
         If CHAR>MONSTERTYPECOUNT : Gosub _FLASH_BAD

         Else 
            SELECTED=8
            Screen 3 : Cls 0

            Gosub _MONSTERDISPLAY_EDIT

            LOC=4 : PATCHVALUE=CHAR
            If(PATCHVALUE>MONSTERTYPECOUNT and PATCHVALUE<=$63) or PATCHVALUE>$6B
            PATCHVALUE=0 : End If 
            Gosub MONSTERDETAIL_PUT

            QUIT=1 : REFRESH=1 : EXTRAQUIT=0 : Clear Key 

         End If 

      End If 

' edit offset
      If SELECTED=14 and Key State($4E)=-1 : Rem monster form up  
            THISOFFSET=THISOFFSET+1
         If THISOFFSET=256 : THISOFFSET=0 : End If 
            GRADECHANGE=True
      Else If SELECTED=14 and Key State($4F)=-1 : Rem monster form down  
            THISOFFSET=THISOFFSET-1
         If THISOFFSET=-1 : THISOFFSET=255 : End If 
            GRADECHANGE=True
      End If 
If GRADECHANGE=True
   If INF=$64 : SUMMONOFFSET=THISOFFSET : End If 
   If INF=$65 : SUMMONOFFSET=THISOFFSET : End If 
   If INF=$66 : BEHOLDEROFFSET=THISOFFSET : End If 
   If INF=$67 : BEHOLDEROFFSET=THISOFFSET : End If 
   If INF=$68 : CRABOFFSET=THISOFFSET : End If 
   If INF=$69 : BIGDRAGONOFFSET=THISOFFSET : End If 
   If INF=$6A : SMALLDRAGONOFFSET=THISOFFSET : End If 
   GRADECHANGE=False
   Gosub GRADEOFFSET_PUT
   REFRESH=1 : QUIT=1
End If 

      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=SELECTED-1

         If SELECTED=7 : SELECTED=16 : End If 
         If SELECTED=15 and THISOFFSET=-1 : SELECTED=13 : End If 
         If SELECTED=15 : SELECTED=14 : End If 
         If SELECTED=9 : SELECTED=8 : End If 
         QUIT=1

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=SELECTED+1

         If SELECTED=9 : SELECTED=10 : End If 
         If SELECTED=14 and THISOFFSET=-1 : SELECTED=16 : End If 
         If SELECTED=15 : SELECTED=16 : End If 
         If SELECTED=17 : SELECTED=8 : End If 

         QUIT=1




      Else If Key State($44)=-1 and SELECTED<>16 : Rem - press return (exit)  

         LOC=1 : XXX2= Fn MONSTERDETAIL
         LOC=2 : YYY2= Fn MONSTERDETAIL

         LOC=0 : EXTRAQUIT=0
         If EYEZ<>( Fn MONSTERDETAIL-1) mod $8
            EYEZ=( Fn MONSTERDETAIL-1) mod $8 : EXTRAQUIT=1 : Rem - change floor 

         End If 

         QUIT=2
         SELECTED=14 : Rem PLACEMODE=2  

         Rem      PRESSRETURN=True

      Else If Key State($40)=-1 and SELECTED<>16 : Rem - press space (exit) 

         REFRESH=1 : QUIT=2 : EXTRAQUIT=2

      End If 

      Wait Vbl 

   Until QUIT<>0


   If QUIT=1 Then Goto MONSTERDISPLAY

   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   Screen Close 3 : Update On : Autoback 2
   Wait Vbl 

   Return 


   _MONSTERDISPLAY_EDIT:

   'Load Iff "editor/graphics/graphics",2 : Screen Hide 2 : Wait Vbl  


   Screen 3 : Rem Cls 0
   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=110-7 : Gosub _DRAWBAR

   'dominic 


   ' ------ main display icons etc

   Bob Off 1 : Bob Off 2 : Bob Off 3

   _BUILD_CHARS[CHAR] : Wait Vbl 
   Screen 3

   Bob 10,60,26,250
   Bob 12,110,36,251

   Bob Update 

   NOBOBREFRESH:

   Rem -- draw options
If SELECTED=8 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170,20,"CHARACTER: "+Right$(Hex$($100+CHAR),2)

If SELECTED=9 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170,36,"HEAD: "+Right$(Hex$( Fn CHARHEAD+$100),2)

If SELECTED=10 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170,48,"BODY: "+Right$(Hex$( Fn CHARBODY+$100),2)

   If SEL=0 Then EDNAME$="HEAD  "
   If SEL=1 Then EDNAME$="LEGS  "
   If SEL=2 Then EDNAME$="TORSO "
   If SEL=3 Then EDNAME$="ARMS  "
   If SEL=4 Then EDNAME$="WHOLE "
   If SEL=5 Then EDNAME$="AVATAR"


If SELECTED=11 : III=31 : Else III=6 : End If 

   If SEL>4 or SEL<0 Then EDNAME$="ERROR?!"
   Ink III,0 : Text 170,60,"EDIT: "+EDNAME$

   Ink 6,0 : Text 170,78,"COLOURS:"


   ITEM=SEL
PICK=0 : If SELECTED=12 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170+0,88,Right$(Hex$( Fn CHARCOLOUR+$100),2)+"  "

PICK=1 : If SELECTED=13 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170+30,88,Right$(Hex$( Fn CHARCOLOUR+$100),2)+"  "

PICK=2 : If SELECTED=14 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170+60,88,Right$(Hex$( Fn CHARCOLOUR+$100),2)+"  "

PICK=3 : If SELECTED=15 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 170+90,88,Right$(Hex$( Fn CHARCOLOUR+$100),2)+"  "


   Screen Swap 
   Screen Show 3 : Wait Vbl : Wait 5 : Clear Key : QUIT=0 : EXTRAQUIT=0



   PRESSRETURN=False

   Rem - check keys 
   Repeat 


      If SELECTED=8 and Key State($4E)=-1 : Rem char up  
         CHAR=(CHAR+1)
         If CHAR>MONSTERTYPECOUNT : CHAR=0 : End If 
         QUIT=3

      Else If SELECTED=8 and Key State($4F)=-1 : Rem char down
         CHAR=CHAR-1
         If CHAR<0 : CHAR=MONSTERTYPECOUNT : End If 
         QUIT=3


      Else If SELECTED=9 and Key State($4E)=-1 : Rem head up  

         PATCHVALUE= Fn CHARHEAD+1
         If PATCHVALUE>$11 : PATCHVALUE=$0 : End If 
         Gosub CHARHEAD_PUT
         QUIT=3

      Else If SELECTED=9 and Key State($4F)=-1 : Rem head down

         PATCHVALUE= Fn CHARHEAD-1
         If PATCHVALUE<0 : PATCHVALUE=$11 : End If 
         Gosub CHARHEAD_PUT
         QUIT=3

      Else If SELECTED=10 and Key State($4E)=-1 : Rem body up  

         PATCHVALUE= Fn CHARBODY+1
         If PATCHVALUE>$D : PATCHVALUE=$0 : End If 
         Gosub CHARBODY_PUT
         QUIT=3

      Else If SELECTED=10 and Key State($4F)=-1 : Rem body down

         PATCHVALUE= Fn CHARBODY-1
         If PATCHVALUE<0 : PATCHVALUE=$D : End If 
         Gosub CHARBODY_PUT
         QUIT=3

      Else If SELECTED=11 and Key State($4E)=-1 : Rem edit mode  
         SEL=SEL+1 : If SEL>$4-BEXT : SEL=0 : End If : QUIT=1

      Else If SELECTED=11 and Key State($4F)=-1 : Rem edit mode
         SEL=SEL-1 : If SEL<0-BEXT : SEL=4-BEXT : End If : QUIT=1

      Else If SELECTED=>12 and SELECTED<=15 and Key State($4E)=-1 : Rem edit mode  

         ITEM=SEL : PICK=SELECTED-12
         PATCHVALUE= Fn CHARCOLOUR+1
         If PATCHVALUE>$F : PATCHVALUE=$0 : End If 
         Gosub CHARCOLOUR_PUT
         QUIT=3


      Else If SELECTED=>11 and SELECTED<=15 and Key State($4F)=-1 : Rem edit mode
         ITEM=SEL : PICK=SELECTED-12
         PATCHVALUE= Fn CHARCOLOUR-1
         If PATCHVALUE<0 : PATCHVALUE=$F : End If 
         Gosub CHARCOLOUR_PUT
         QUIT=3


      End If 




      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=SELECTED-1

         If SELECTED=7 : SELECTED=15 : End If 
         QUIT=1

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=SELECTED+1

         If SELECTED=17 : SELECTED=8 : End If 

         QUIT=1

      Else If Key State($40)=-1 : Rem - press return (exit)  

         Bob Off 10 : Bob Off 12 : SELECTED=16
         Exchange Bob 250,$4+CHAR : No Mask $4+CHAR
         REFRESH=1 : QUIT=2 : EXTRAQUIT=0 : Cls 0
      End If 


      Wait Vbl 
   Until QUIT<>0

   If QUIT=3 Then Goto _MONSTERDISPLAY_EDIT
   If QUIT=1 Then Goto NOBOBREFRESH
   If QUIT=2 Then Return 

   QUIT=0

   Screen Close 3 : Update On : Autoback 2
   Wait Vbl 

   Return 


  _SHOWCHAMPIONSTATS:

   Screen Open 3,320,116,32,Lowres : Screen Hide 
   Double Buffer : Update Off : Autoback 2

   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,128,, : Screen 3 : Cls 0

   SELECTED=22

   Change Bank Font 9
   Flash 31,GREENFLASH$
   Autoback 0


   CHAMPIONSTATSDISPLAY:

   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=116-8 : Gosub _DRAWBAR


   Rem - draw scroll

   TEMPX=12 : TEMPY=12

   Paste Icon TEMPX,TEMPY,214
   Paste Icon 8+TEMPX,13+TEMPY,216
   Paste Icon 80+TEMPX,13+TEMPY,217
   Paste Icon TEMPX,56+TEMPY,215
   Ink 3 : Bar 24+TEMPX,15+TEMPY To 24+TEMPX+55,15+TEMPY+40

   INY=TEMPY+75 : INX=12 : INZ=(12*8)-1
   Gosub _CHAMPIONNAMEBAR


   Rem -- draw options
If SELECTED=22 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 120,20,"    CHAMPION: "+Lzstr$(1+CHAMPION,2)

   Rem -------------

If SELECTED=23 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=0 : Text 120,32,"       LEVEL: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)

   TEMP$="LEVEL  " : Ink 13,3 : Text TEMPX+18,TEMPY+21,TEMP$
   TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2) : Ink 14,3 : Text TEMPX+18+(8*7),TEMPY+21,TEMP$


   Rem -------------

If SELECTED=24 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=1 : Text 120,44,"    STRENGTH: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)

   TEMP$="ST"
   Ink 7,3 : Text TEMPX+18,TEMPY+29,TEMP$
   TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 13,3 : Text TEMPX+18+16,TEMPY+29,TEMP$

   Rem -------------

If SELECTED=25 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=2 : Text 120,52,"     AGILITY: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)

   Ink 1,3 : Text TEMPX+18+32,TEMPY+29,"-"
   TEMP$="AG"
   Ink 7,3 : Text TEMPX+18+40,TEMPY+29,TEMP$
   TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 13,3 : Text TEMPX+18+40+16,TEMPY+29,TEMP$

   Rem -------------

If SELECTED=26 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=3 : Text 120,60,"INTELLIGENCE: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)

   TEMP$="IN"
   Ink 7,3 : Text TEMPX+18,TEMPY+29+8,TEMP$
   TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 13,3 : Text TEMPX+18+16,TEMPY+29+8,TEMP$


   Rem -------------
If SELECTED=27 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=4 : Text 120,68,"    CHARISMA: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)

   Ink 1,3 : Text TEMPX+18+32,TEMPY+29+8,"-"
   TEMP$="CH"
   Ink 7,3 : Text TEMPX+18+40,TEMPY+29+8,TEMP$
   TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 13,3 : Text TEMPX+18+40+16,TEMPY+29+8,TEMP$


   Rem -------------
If SELECTED=28 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=5 : ALL$="  HIT-POINTS: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)+" / "

   LOC=6 : ALL$=ALL$+Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Text 120,80,ALL$

   Ink 1,3 : Text TEMPX+18+40,TEMPY+29+16,"/"
   TEMP$="HP"
   Ink 0,3 : Text TEMPX+18,TEMPY+29+16,TEMP$

   LOC=5 : TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 14,3 : Text TEMPX+18+24,TEMPY+29+16,TEMP$

   LOC=6 : TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 6,3 : Text TEMPX+18+40+8,TEMPY+29+16,TEMP$


   Rem -------------

If SELECTED=29 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=7 : ALL$="    VITALITY: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)+" / "

   LOC=8 : ALL$=ALL$+Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Text 120,88,ALL$
   Ink 13,3 : 


   Ink 1,3 : Text TEMPX+18+40,TEMPY+29+16,"/"
   TEMP$="VI"
   Ink 0,3 : Text TEMPX+18,TEMPY+29+24,TEMP$

   LOC=7 : TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 14,3 : Text TEMPX+18+24,TEMPY+29+24,TEMP$

   LOC=8 : TEMP$=Right$((Str$( Fn CHAMPIONSTAT+100)),2)
   Ink 6,3 : Text TEMPX+18+40+8,TEMPY+29+24,TEMP$


   Rem -------------

If SELECTED=30 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=$B : Text 120,100,"      ARMOUR: "+Right$((Str$( Fn CHAMPIONSTAT+100)),2)


   Rem -  
   Bob Off 1 : Bob Off 2
   Screen Show 3 : Wait Vbl : Wait 5 : Clear Key : QUIT=0


   Screen Swap 
   PRESSRETURN=False

   Rem - check keys 
   Repeat 


      If SELECTED=22 and Key State($4E)=-1 : Rem champ up 
         CHAMPION=(CHAMPION+1) mod 16 : QUIT=1

      Else If SELECTED=22 and Key State($4F)=-1 : Rem champ down 

         CHAMPION=(CHAMPION+15) mod 16 : QUIT=1
      End If 


      If SELECTED=23 and Key State($4E)=-1 : Rem champ level up   

         LOC=0 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=23 and Key State($4F)=-1 : Rem champ level down 
         LOC=0 : PATCHBVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 


      If SELECTED=24 and Key State($4E)=-1 : Rem champ str up     

         LOC=1 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=24 and Key State($4F)=-1 : Rem champ str down   
         LOC=1 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 

      If SELECTED=25 and Key State($4E)=-1 : Rem champ agil up      

         LOC=2 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=25 and Key State($4F)=-1 : Rem champ agil down    
         LOC=2 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 


      If SELECTED=26 and Key State($4E)=-1 : Rem champ int up     

         LOC=3 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=26 and Key State($4F)=-1 : Rem champ int down   
         LOC=3 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 


      If SELECTED=27 and Key State($4E)=-1 : Rem champ chr up     

         LOC=4 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=27 and Key State($4F)=-1 : Rem champ chr down   
         LOC=4 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 


      If SELECTED=28 and Key State($4E)=-1 : Rem champ HP up      

         LOC=6 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
         LOC=5 : Gosub CHAMPIONSTAT_PUT

      Else If SELECTED=28 and Key State($4F)=-1 : Rem champ HP down    
         LOC=6 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
         LOC=5 : Gosub CHAMPIONSTAT_PUT

      End If 

      If SELECTED=29 and Key State($4E)=-1 : Rem champ HP up      

         LOC=8 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
         LOC=7 : Gosub CHAMPIONSTAT_PUT

      Else If SELECTED=29 and Key State($4F)=-1 : Rem champ HP down    
         LOC=8 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1
         LOC=7 : Gosub CHAMPIONSTAT_PUT

      End If 

      If SELECTED=30 and Key State($4E)=-1 : Rem champ armour up      

         LOC=$B : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1


      Else If SELECTED=30 and Key State($4F)=-1 : Rem champ armour down    
         LOC=$B : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONSTAT_PUT : QUIT=1

      End If 


      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=SELECTED-1

         If SELECTED<=21 : SELECTED=30 : End If 
         QUIT=1

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=SELECTED+1

         If SELECTED>=31 : SELECTED=22 : End If 
         QUIT=1

      Else If Key State($40)=-1 : Rem space
         QUIT=2 : 
         SELECTED=8 : REFRESH=1

      End If 


   Until QUIT<>0

   If QUIT=1 Then Goto CHAMPIONSTATSDISPLAY

   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   Screen Close 3 : Autoback 2 : Update On 
   Wait Vbl 
   Return 


   _SHOWCHAMPIONPOCKETS:

   Screen Open 3,320,136,32,Lowres : Screen Hide 
   Double Buffer : Update Off : Autoback 2


   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,126,, : Screen 3 : Cls 0

   SELECTED=22

   Change Bank Font 9
   Flash 31,GREENFLASH$
   Autoback 0


   CHAMPIONPOCKETSDISPLAY:


   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=136-8 : Gosub _DRAWBAR

   Rem - draw all 

   TEMPX=12 : TEMPY=28



   INY=TEMPY+60 : INX=12 : INZ=(12*8)-1
   Gosub _CHAMPIONNAMEBAR


   Rem -- draw pockets empty    
   Rem -- draw top parts

    Paste Icon 2+TEMPX,TEMPY-7,211 : Rem -  top chain 
    Ink 3,0 : Bar 0+TEMPX,TEMPY To 94+TEMPX,7+TEMPY
    Ink 13,3 : Text 0+TEMPX,6+TEMPY," INVENTORY"

   Rem -- check gloves

   LOC=$12 : OBJECTCODE= Fn CHAMPIONSTAT

   If OBJECTCODE=>$2B and OBJECTCODE<=$2F
      OBJECTCODE=(OBJECTCODE-$2B)*2
      OBJECTCODE=OBJECTCODE+$31
   Else : OBJECTCODE=0
   End If 

   If OBJECTCODE<>0
      Paste Icon 0+TEMPX,8+TEMPY,OBJECTCODE : Rem - left hand
      Paste Icon 16+TEMPX,8+TEMPY,OBJECTCODE+1 : Rem - right hand 
   Else 
      Paste Icon 0+TEMPX+1,8+TEMPY,195 : Rem - left hand
      Paste Icon 16+TEMPX+1,8+TEMPY,196 : Rem - right hand   
   End If 


   Rem -- item left hand  

   OUTF=0 : LOC=0 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF<>0

      Paste Icon 0+TEMPX+1,8+TEMPY,OUTF

      If INF=>$1 and INF<=$4
         LOC=$B+INF : AMM= Fn CHAMPIONPOCKETS
         Z=(((INF+1)/2)-1)*7
         Ink 6,0 : Text 0+TEMPX+2,8+TEMPY+6+Z,Right$(Str$(100+AMM),2)
      End If 

   End If 



   Rem -- item right hand   

   OUTF=0 : LOC=1 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF<>0

      Paste Icon 16+TEMPX+1,8+TEMPY,OUTF

      If INF=>$1 and INF<=$4
         LOC=$B+INF : AMM= Fn CHAMPIONPOCKETS
         Z=(((INF+1)/2)-1)*7
         Ink 6,0 : Text 16+TEMPX+2,8+TEMPY+6+Z,Right$(Str$(100+AMM),2)
      End If 

   End If 


   Rem -- item ARMOUR 

   OUTF=0 : Z=0 : LOC=2 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF=0 : Z=1 : OUTF=197 : End If 
   Paste Icon 32+TEMPX+1+Z,8+TEMPY,OUTF


   Rem -- item SHIELD 

   OUTF=0 : LOC=3 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF=0 and Even(CHAMPION)=True : OUTF=198
Else If OUTF=0 : OUTF=199 : End If 
   Paste Icon 48+TEMPX+1,8+TEMPY,OUTF


   Rem -- item ITEM 1 

   OUTF=0 : LOC=4 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF=0 : OUTF=192 : End If 
   Paste Icon 64+TEMPX+1,8+TEMPY,OUTF

   If INF=>$1 and INF<=$4
      LOC=$B+INF : AMM= Fn CHAMPIONPOCKETS
      Z=(((INF+1)/2)-1)*7
      Ink 6,0 : Text 64+TEMPX+2,Z+8+TEMPY+6,Right$(Str$(100+AMM),2)
   End If 


   Rem -- item ITEM 2 

   OUTF=0 : LOC=5 : INF= Fn CHAMPIONPOCKETS
   Gosub _OBJECTIMAGECONVERT

   If OUTF=0 : OUTF=192 : End If 
   Paste Icon 80+TEMPX+1,8+TEMPY,OUTF

   If INF=>$1 and INF<=$4
      LOC=$B+INF : AMM= Fn CHAMPIONPOCKETS
      Z=(((INF+1)/2)-1)*7
      Ink 6,0 : Text 80+TEMPX+2,Z+8+TEMPY+6,Right$(Str$(100+AMM),2)
   End If 



   For C=0 To 5
      OUTF=0 : LOC=6+C : INF= Fn CHAMPIONPOCKETS
      Gosub _OBJECTIMAGECONVERT

      If OUTF=0 : OUTF=192 : End If 
      Paste Icon(C*16)+TEMPX+1,24+TEMPY,OUTF

      If INF=>$1 and INF<=$4
         LOC=$B+INF : AMM= Fn CHAMPIONPOCKETS
         Z=(((INF+1)/2)-1)*7
         Ink 6,0 : Text(C*16)+TEMPX+2,Z+24+TEMPY+6,Right$(Str$(100+AMM),2)
      End If 


   Next C


   Rem -- display parts 
   Ink 3,0 : Bar 0+TEMPX,40+TEMPY To 94+TEMPX,47+TEMPY
   Ink 13,3 : Text TEMPX,46+TEMPY," ARMOUR:"

   Paste Icon 2+TEMPX,49+TEMPY,211 : Rem -  bottom chain  


   Rem -- draw options
If SELECTED=22 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 112,20,"    CHAMPION: "+Right$(Str$(1001+CHAMPION),2)


   ' held items 
   Ink 6,0 : Text 120,32," HELD ITEMS: "

If SELECTED=23 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=0 : Text 224,32,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=24 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=1 : Text 248,32,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

   Ink 6,0 : Text 120,42,"     ARMOUR: "

If SELECTED=25 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=2 : Text 224,42,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

   Ink 6,0 : Text 120,52,"     SHIELD: "

If SELECTED=26 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=3 : Text 224,52,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)


   Ink 6,0 : Text 120,62,"    POCKETS: "

If SELECTED=27 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=4 : Text 224,62,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=28 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=5 : Text 248,62,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=29 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=6 : Text 272,62,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=30 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=7 : Text 294,62,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)


If SELECTED=31 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=8 : Text 224,72,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=32 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=9 : Text 248,72,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=33 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=10 : Text 272,72,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)

If SELECTED=34 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=11 : Text 294,72,Right$(Hex$($100+ Fn CHAMPIONPOCKETS),2)


   Ink 6,0 : Text 120,82,"    COINAGE: "

If SELECTED=35 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=12 : Text 224,82,Lzstr$( Fn CHAMPIONPOCKETS,2)

   Ink 6,0 : Text 120,92,"COMMON KEYS: "

If SELECTED=36 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=13 : Text 224,92,Lzstr$( Fn CHAMPIONPOCKETS,2)

   Ink 6,0 : Text 120,102,"     ARROWS: "

If SELECTED=37 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=14 : Text 224,102,Lzstr$( Fn CHAMPIONPOCKETS,2)

   Ink 6,0 : Text 120,112," ELF ARROWS: "

If SELECTED=38 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=15 : Text 224,112,Lzstr$( Fn CHAMPIONPOCKETS,2)

   Ink 6,0 : Text 120,122,"     GLOVES: "

If SELECTED=39 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=$12 : Text 224,122,Right$(Hex$($100+ Fn CHAMPIONSTAT),2)



   Rem -  
   Bob Off 1 : Bob Off 2 : Autoback 0
   Screen Show 3 : Wait Vbl : Wait 5 : Clear Key : QUIT=0



   PRESSRETURN=False

   CHAMPIONPOCKETKEYCHECK:

   Screen Swap 
   Rem - check keys 
   Repeat 

      If SELECTED=22 and Key State($4E)=-1 : Rem champ up 
         CHAMPION=(CHAMPION+1) mod 16 : QUIT=1

      Else If SELECTED=22 and Key State($4F)=-1 : Rem champ down 

         CHAMPION=(CHAMPION+15) mod 16 : QUIT=1
      End If 

      If((SELECTED>=23 and SELECTED<=24) or(SELECTED>=27 and SELECTED<=34)) and Key State($4E)=-1 : Rem any item up    

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+1) mod $6E
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      Else If((SELECTED>=23 and SELECTED<=24) or(SELECTED>=27 and SELECTED<=34)) and Key State($4F)=-1 : Rem any item down    

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+$6D) mod $6E
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      End If 


      If(SELECTED>=35 and SELECTED<=38) and Key State($4E)=-1 : Rem values of coin,key etc 

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+1) mod 100
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      Else If(SELECTED>=35 and SELECTED<=38) and Key State($4F)=-1 : Rem  

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+99) mod 100
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      End If 



      If SELECTED=25 and Key State($4E)=-1 : Rem armour up    

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+1) mod $24
         If PATCHVALUE=>$1 and PATCHVALUE<$1B : PATCHVALUE=$1B : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      Else If SELECTED=25 and Key State($4F)=-1 : Rem armour down    

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+$23) mod $24
         If PATCHVALUE=>$1 and PATCHVALUE<$1B : PATCHVALUE=$0 : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      End If 


      If SELECTED=26 and Even(CHAMPION)=True and Key State($4E)=-1 : Rem large shield up

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+1) mod $2B
         If PATCHVALUE=>$1 and PATCHVALUE<$24 : PATCHVALUE=$24 : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      Else If SELECTED=26 and Even(CHAMPION)=True and Key State($4F)=-1 : Rem large shield down

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+$2A) mod $2B
         If PATCHVALUE=>$1 and PATCHVALUE<$24 : PATCHVALUE=$0 : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      End If 


      If SELECTED=26 and Even(CHAMPION)=False and Key State($4E)=-1 : Rem shield up

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+1) mod $27
         If PATCHVALUE=>$1 and PATCHVALUE<$24 : PATCHVALUE=$24 : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      Else If SELECTED=26 and Even(CHAMPION)=False and Key State($4F)=-1 : Rem shield down

         LOC=SELECTED-23 : PATCHVALUE= Fn CHAMPIONPOCKETS
         PATCHVALUE=(PATCHVALUE+$26) mod $27
         If PATCHVALUE=>$1 and PATCHVALUE<$24 : PATCHVALUE=$0 : End If 
         Gosub CHAMPIONPOCKETS_PUT : QUIT=1

      End If 




      If SELECTED=39 and Key State($4E)=-1 : Rem gloves up      

         LOC=$12 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+1) mod $30
         If PATCHVALUE=>$1 and PATCHVALUE<=$2A : PATCHVALUE=$2B : End If 

         Gosub CHAMPIONSTAT_PUT : QUIT=1

      Else If SELECTED=39 and Key State($4F)=-1 : Rem gloves down      
         LOC=$12 : PATCHVALUE= Fn CHAMPIONSTAT
         PATCHVALUE=(PATCHVALUE+$2F) mod $30
         If PATCHVALUE=>$1 and PATCHVALUE<=$2A : PATCHVALUE=$0 : End If 

         Gosub CHAMPIONSTAT_PUT : QUIT=1
      End If 




      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=(SELECTED+39) mod 40 : QUIT=1
         If SELECTED<22 : SELECTED=39 : End If 

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=(SELECTED+1) mod 40 : QUIT=1
         If SELECTED<22 : SELECTED=22 : End If 


      Else If Key State($40)=-1 : Rem space
         QUIT=2 : 
         SELECTED=10 : REFRESH=1

      End If 


   Until QUIT<>0

   If QUIT=1 Then Goto CHAMPIONPOCKETSDISPLAY

   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   Screen Close 3 : Update On : Autoback 2
   Wait Vbl 
   Return 



   _SHOWCHAMPIONSPELLS:

   Screen Open 3,320,120,32,Lowres : Screen Hide 
   Double Buffer : Update Off : Autoback 2


   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,128,, : Screen 3 : Cls 0

   SELECTED=22


   Change Bank Font 9
   Flash 31,GREENFLASH$

   Screen Show 3
   Autoback 0


   CHAMPIONSPELLSDISPLAY:
   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=120-8 : Gosub _DRAWBAR


   Rem Wait Vbl 

   Rem - draw scroll

   TEMPX=14 : TEMPY=14

   INY=TEMPY+68 : INX=TEMPX-1 : INZ=(12*8)-1
   Gosub _CHAMPIONNAMEBAR

   Paste Icon TEMPX,TEMPY,219


   Ink 1,3

   ' left page
   For A=0 To 3
      For B=0 To 3

      If B=3 : XTRA=1 : Else : XTRA=0 : End If 
         LOC=(PAGE*32)+(A*4)+B : C= Fn SPELLTEXT : Rem - do the text


         LOC=$C+PAGE
         D= Fn CHAMPIONSTAT
         D=D/$10
      If Btst(3-A,D)=True : Ink 14 : Else Ink 1 : End If 

         Text(B*8)+TEMPX+8,21+(A*8)+TEMPY-XTRA,Chr$(C)

      Next B
   Next A

   ' right page 
   For A=0 To 3
      For B=0 To 3

      If B=0 : XTRA=1 : Else : XTRA=0 : End If 
         LOC=(PAGE*32)+(A*4)+B+16 : C= Fn SPELLTEXT : Rem - do the text


         LOC=$C+PAGE
         D= Fn CHAMPIONSTAT
         D=D mod $10
      If Btst(3-A,D)=True : Ink 14 : Else Ink 1 : End If 

         Text(B*8)+TEMPX+8+48,21+(A*8)+TEMPY-XTRA,Chr$(C)

      Next B
   Next A



   Wait Vbl : QUIT=0

   Rem -- draw options
If SELECTED=22 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 120,20,"    CHAMPION: "+Right$(Str$(1001+CHAMPION),2)

   Rem -------------

If SELECTED=23 : III=31 : Else III=6 : End If 
   Ink III,0 : LOC=0 : Text 120,32,"        PAGE: "+Right$((Str$(PAGE+11)),1)


   ' spells options 

   For C=0 To 7

      LOC=$C+PAGE
      D= Fn CHAMPIONSTAT
   If Btst(7-C,D)=True : TEMP$=" ON " : Else TEMP$=" OFF" : End If 

   If SELECTED=24+C : III=31 : Else III=6 : End If 
      Rem - get the spellname, and right-align it

      SPELLNUMB=(PAGE*8)+C
      SPELLNAME$=Itemstr$(SPELLBLOCK$,SPELLNUMB)
      SPELLNAME$=Replacestr$(SPELLNAME$," " To "")
      For Q=Len(SPELLNAME$) To 11
         SPELLNAME$=" "+SPELLNAME$
      Next Q

      Ink III,0 : LOC=0 : Text 120,32+12+(C*8),SPELLNAME$+":"+TEMP$

   Next C


   Screen Swap 

   Rem - check keys 
   Repeat 
      Wait Vbl 

      If SELECTED=22 and Key State($4E)=-1 : Rem champ up 
         CHAMPION=(CHAMPION+1) mod 16 : QUIT=1

      Else If SELECTED=22 and Key State($4F)=-1 : Rem champ down 

         CHAMPION=(CHAMPION+15) mod 16 : QUIT=1
      End If 


      If SELECTED=23 and Key State($4E)=-1 : Rem page up  
         PAGE=(PAGE+1) mod 4 : QUIT=1 : Wait Vbl 

      Else If SELECTED=23 and Key State($4F)=-1 : Rem page down  

         PAGE=(PAGE+3) mod 4 : QUIT=1 : Wait Vbl 
      End If 



      If SELECTED>=24 and SELECTED<=31 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem toggle spell 

         C=SELECTED-24 : LOC=$C+PAGE
         PATCHVALUE= Fn CHAMPIONSTAT
         Bchg 7-C,PATCHVALUE : QUIT=1
         Gosub CHAMPIONSTAT_PUT
         Wait Vbl : QUIT=1

      End If 


      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=SELECTED-1

         If SELECTED<=21 : SELECTED=30 : End If 
         QUIT=1 : Wait Vbl 

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=SELECTED+1

         If SELECTED>=32 : SELECTED=22 : End If 
         QUIT=1 : Wait Vbl 

      Else If Key State($40)=-1 : Rem space
         QUIT=2 : SELECTED=9 : REFRESH=1
      End If 

   Until QUIT<>0

   If QUIT=1 Then Goto CHAMPIONSPELLSDISPLAY

   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   Screen Close 3 : Update On : Autoback 2
   Wait Vbl 

   Return 

   _CHAMPIONNAMEBAR:

   Rem - inx,iny
   Rem - inz=length 

   Turbo Draw INX,INY To INX+INZ,INY,1
   Turbo Draw INX,INY+1 To INX+INZ,INY+1,2
   Turbo Draw INX,INY+2 To INX+INZ,INY+2,3
   Turbo Draw INX,INY+3 To INX+INZ,INY+3,4

   Ink 7 : Bar INX,INY+4 To INX+INZ,INY+11

   Ink 13,7 : Text INX,INY+10,Itemstr$(NAMEBLOCK$,CHAMPION)

   Turbo Draw INX,INY+12 To INX+INZ,INY+12,4
   Turbo Draw INX,INY+13 To INX+INZ,INY+13,3
   Turbo Draw INX,INY+14 To INX+INZ,INY+14,2
   Turbo Draw INX,INY+15 To INX+INZ,INY+15,1


   Return 


   _TEXTS4:
   Return 

   _EDITKEYS4:

   Return 



   '
   '
   '
   '  ~~~ LAYOUT EDITOR ~~~   
   '
   '

   _TEXTS5:

   OPTION(4)=True : OPTION(5)=True : OPTION(7)=True : OPTION(8)=True
   OPTION(10)=True : OPTION(11)=True : OPTION(13)=True : OPTION(14)=True

   A= Fn FLOORNUMBER
   LINE$(4)="TOP FLOOR:"+Str$(A)


   LINE$(5)="SPECIAL FLOOR"


   A= Fn FLOORWIDTH
   LINE$(7)="WIDTH:"+Str$(A)
   A= Fn FLOORHEIGHT
   LINE$(8)="HEIGHT:"+Str$(A)

   A= Fn FLOOROFFSETX
   LINE$(10)="X OFFSET:"+Str$(A)
   A= Fn FLOOROFFSETY
   LINE$(11)="Y OFFSET:"+Str$(A)


   Rem - VIEW ABOVE FLOOR 
If Btst(1,PREVIEW)=True : RESULT$="ON" : Else RESULT$="OFF" : End If 
   LINE$(13)="ABOVE: "+RESULT$


   Rem - VIEW BELOW FLOOR 
If Btst(0,PREVIEW)=True : RESULT$="ON" : Else RESULT$="OFF" : End If 
   LINE$(14)="BELOW: "+RESULT$


   Gosub DUNGEONBYTESUSED
   LINE$(21)="FREE: "+Hex$($1000-$38-OUTPUT,4)

   Return 


   _EDITKEYS5:

   Z=EYEZ : Rem -- on this mode, we are always patching the viewed floor 

If Key State($40)=-1 and SELECTED=-1 : REFRESH=1 : SELECTED=4 : Else If Key State($40)=-1 : SELECTED=-1 : REFRESH=1 : End If 
   If Key State($1A)=-1 : Bchg 0,PREVIEW : QUIT=1 : End If 
   If Key State($1B)=-1 : Bchg 1,PREVIEW : QUIT=1 : End If 

   ' lets do stuff! 


   If SELECTED=10 and Key State($4E)=-1 : Rem- up x offset'

      A= Fn FLOOROFFSETX
      B=31- Fn FLOORWIDTH
      A=Vclip(A+1,0 To B)
      PATCHVALUE=A
      Gosub FLOOROFFSETX_PUT
      QUIT=1

   Else If SELECTED=10 and Key State($4F)=-1 : Rem-down x offset' 
      A= Fn FLOOROFFSETX
      B=31- Fn FLOORWIDTH
      A=Vclip(A-1,0 To B)
      PATCHVALUE=A
      Gosub FLOOROFFSETX_PUT
      QUIT=1

   Else If SELECTED=11 and Key State($4E)=-1 : Rem ' up y offset' 
      A= Fn FLOOROFFSETY
      B=31- Fn FLOORHEIGHT
      A=Vclip(A+1,0 To B)
      PATCHVALUE=A
      Gosub FLOOROFFSETY_PUT
      QUIT=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem ' down y offset' 
      A= Fn FLOOROFFSETY
      B=31- Fn FLOORHEIGHT
      A=Vclip(A-1,0 To B)
      PATCHVALUE=A
      Gosub FLOOROFFSETY_PUT
      QUIT=1
   End If 

   If SELECTED=5 and Key State($44)=-1 : 

      TEMPX=X : TEMPY=Y : TEMPZ=Z
      X=0 : Y=0 : Z=EYEZ


      PATCHVALUE= Fn FLOORWIDTH
      Doke Start(10)+LOOKUPTOWER(DUNGEON)+$30,PATCHVALUE

      PATCHVALUE= Fn FLOORHEIGHT
      Doke Start(10)+LOOKUPTOWER(DUNGEON)+$32,PATCHVALUE

      PATCHVALUE= Fn ALLFLOORDATAOFFSET
      Doke Start(10)+LOOKUPTOWER(DUNGEON)+$34,PATCHVALUE

      Gosub _FLASH_GOOD
      X=TEMPX : Y=TEMPY : Z=TEMPZ

   End If 

   If SELECTED=4 and Key State($4E)=-1 : Rem ' top floor up 
      A= Fn FLOORNUMBER
      A=Vclip(A+1,0 To 7)
      PATCHVALUE=A
      Gosub FLOORNUMBER_PUT
      QUIT=1

   Else If SELECTED=4 and Key State($4F)=-1 : Rem ' top floor down 
      A= Fn FLOORNUMBER
      A=Vclip(A-1,0 To 7)
      PATCHVALUE=A
      Gosub FLOORNUMBER_PUT
      QUIT=1

   Else If SELECTED=7 and Key State($4E)=-1 : Rem ' wider  

      Gosub DUNGEONBYTESUSED
      D=$1000-$38-OUTPUT
      If D-(( Fn FLOORHEIGHT)*2)<0 : Return : End If 

      A= Fn FLOORWIDTH
      A=Vclip(A+1,0 To 31)
      PATCHVALUE=A
      Gosub FLOORWIDTH_PUT

      C= Fn FLOOROFFSETX

      If A+C>31
         PATCHVALUE=Vclip(C-1,0 To 31)
         Gosub FLOOROFFSETX_PUT
      End If 

      QUIT=1

   Else If SELECTED=7 and Key State($4F)=-1 : Rem ' slimer 
      A= Fn FLOORWIDTH
      A=Vclip(A-1,0 To 31)
      PATCHVALUE=A
      Gosub FLOORWIDTH_PUT
      QUIT=1

   Else If SELECTED=8 and Key State($4E)=-1 : Rem ' taller 
      Gosub DUNGEONBYTESUSED
      D=$1000-$38-OUTPUT
      If D-(( Fn FLOORWIDTH)*2)<0 : Return : End If 

      A= Fn FLOORHEIGHT
      A=Vclip(A+1,0 To 31)
      PATCHVALUE=A
      Gosub FLOORHEIGHT_PUT

      C= Fn FLOOROFFSETY

      If A+C>31
         PATCHVALUE=Vclip(C-1,0 To 31)
         Gosub FLOOROFFSETY_PUT
      End If 



      QUIT=1


   Else If SELECTED=8 and Key State($4F)=-1 : Rem ' top floor down 
      A= Fn FLOORHEIGHT
      A=Vclip(A-1,0 To 31)
      PATCHVALUE=A
      Gosub FLOORHEIGHT_PUT
      QUIT=1

   End If 


   If(Key State($4F)=-1 or Key State($4E)=-1) and SELECTED=14 : Bchg 0,PREVIEW : QUIT=1 : End If 
   If(Key State($4F)=-1 or Key State($4E)=-1) and SELECTED=13 : Bchg 1,PREVIEW : QUIT=1 : End If 


   Return 




   '
   '
   '
   '  ~~~ SHARED SUBS ~~~   
   '


   _DRAWBAR:
   'IN
   For SOME=0 To 4
      Turbo Draw 0,IN+SOME To 320,IN+SOME,SOME
   Next SOME

   For SOME=5 To 7
      Turbo Draw 0,IN+SOME To 320,IN+SOME,8-SOME
   Next SOME

   Return 


   _OBJECTIMAGECONVERT:
   Rem INF , OUTF 

   If INF=<0 and INF>=$6E Then OUTF=0
   If INF=>1 and INF<=$26 Then OUTF=INF
   If INF=>$27 and INF<=$2A Then OUTF=INF+$3 : Rem large shields
   If INF=>$2B and INF<=$2F Then OUTF=INF+$80 : Rem gloves 
   If INF=>$30 and INF<=$31 Then OUTF=INF+$B : Rem daggers
   If INF=>$32 and INF<=$34 Then OUTF=INF+$B : Rem swords 
   If INF=>$35 and INF<=$36 Then OUTF=INF+$C : Rem swords 2 
   If INF=>$37 and INF<=$37 Then OUTF=176 : Rem ace of swords
   If INF=>$38 and INF<=$3A Then OUTF=INF+$D : Rem axes 
   If INF=>$3B and INF<=$3C Then OUTF=INF+$F : Rem axes 2 
   If INF=>$3D and INF<=$3F Then OUTF=INF+$11 : Rem staff  

   If INF=$40 or INF=$47 or INF=$4A or INF=$4D Then OUTF=$51 : Rem green body 
   If INF=$41 or INF=$44 or INF=$4B or INF=$4E Then OUTF=$52 : Rem yellow body  
   If INF=$42 or INF=$45 or INF=$48 or INF=$4F Then OUTF=$53 : Rem red body 
   If INF=$43 or INF=$46 or INF=$49 or INF=$4C Then OUTF=$54 : Rem blue body  

   If INF=>$50 and INF<=$6D Then OUTF=INF+$5 : Rem rest 


   Return 


   '
   _MONSTERIMAGECONVERT:

   Rem inf inl

   If INF>=$0 and INF=<MONSTERTYPECOUNT : Rem - humanoids
      OUT=INF+4

   Else If INF>=$64 and INF=<$65 : Rem - fat bastard

      OUT=90 : OTHER=INL-SUMMONOFFSET
      Gosub _DOOTHER

      If INL=>$80 : OUT=90+(NUMBEROFGRADES*6) : End If : Rem - illusion 


   Else If INF=$66 : Rem - floaters 

      OUT=90+(NUMBEROFGRADES*1) : OTHER=INL-BEHOLDEROFFSET
      Gosub _DOOTHER

   End If 

   If INF=$67 : Rem - big basts

      OUT=90+(NUMBEROFGRADES*2) : OTHER=INL-BEHEMOTHOFFSET
      Gosub _DOOTHER


   Else If INF=$68 : Rem - crab 

      OUT=90+(NUMBEROFGRADES*3) : OTHER=INL-CRABOFFSET
      Gosub _DOOTHER


   Else If INF=$69 : Rem - big dragon 

      OUT=90+(NUMBEROFGRADES*4) : OTHER=INL-BIGDRAGONOFFSET
      Gosub _DOOTHER

   Else If INF=$6A : Rem - small dragon 

      OUT=90+(NUMBEROFGRADES*5) : OTHER=INL-SMALLDRAGONOFFSET
      Gosub _DOOTHER

   Else If(INF=$6B or INF=$6C) and BEXT=True : Rem - Entropy

      EXTRA=INF-$6B
      OUT=90+(NUMBEROFGRADES*6)+2+(EXTRA*$4)+DUNGEON


   Else If INF=$6B : Rem - Entropy

      OUT=90+(NUMBEROFGRADES*6)+1


   Else If INF>$6C or(INF>MONSTERTYPECOUNT and INF<=$63)

      ' OUT=90+(NUMBEROFGRADES*6)+1
      OUT=0
   End If 
   Return 


   _DOOTHER:

   If OTHER<0
      OTHER=0
   Else If OTHER>NUMBEROFGRADES-1
      OTHER=NUMBEROFGRADES-1
   End If 

   OUT=OUT+OTHER
   Return 

   _SHOWWALLSCROLL:

   Screen Open 3,320,116,32,Lowres : Screen Hide 
   Double Buffer : Update Off : Autoback 2

   Flash Off : Curs Off : Get Palette 0
   Screen Display 3,,128,, : Screen 3 : Cls 0

   SELECTED=22

   Change Bank Font 9
   Flash 31,GREENFLASH$
   Autoback 0

   WALLSCROLLDISPLAY:


   Rem  WALLSCROLL_CONTENT$(6),WALLSCROLL_X(6)

   Rem --- find data for a complete scroll
   Rem --- there are 7 possible rows
   Rem --- max row length is 9 chars

   Rem -- clear contents


   For ROW=0 To 6
      WALLSCROLL_CONTENT$(ROW)=""
      WALLSCROLL_X(ROW)=0
   Next ROW


   LOC=0 : ROW=0 : A=0



   Do 
      A= Fn FINDSCROLLTEXT

      If A=$FF Then Exit : Rem - terminator 

      If A=$FC : Rem -- this is a "line declaration"

         LOC=LOC+1 : Rem -- get the X value 
         STORE=( Fn FINDSCROLLTEXT)-$1E

         LOC=LOC+1 : Rem -- get the row number
         ROW=( Fn FINDSCROLLTEXT)-3

         Rem -- put in the X value  
         WALLSCROLL_X(ROW)=STORE

      Else : Rem -- get the string detail 

         WALLSCROLL_CONTENT$(ROW)=WALLSCROLL_CONTENT$(ROW)+Chr$(A)

      End If 

      LOC=LOC+1
   Loop 



   WALLSCROLL_UPDATE:
   Autoback 0

   Rem -- draw borders

   IN=-1 : Gosub _DRAWBAR
   IN=116-8 : Gosub _DRAWBAR


   Rem - draw scroll

   TEMPX=12 : TEMPY=12

   Paste Icon TEMPX,TEMPY,214
   Paste Icon 8+TEMPX,15+TEMPY,216
   Paste Icon 80+TEMPX,15+TEMPY,217
   Paste Icon TEMPX+1,70+TEMPY,215
   Ink 3 : Bar 24+TEMPX,15+TEMPY To 24+TEMPX+55,15+TEMPY+54


   Rem -- draw options
If SELECTED=22 : III=31 : Else III=6 : End If 
   Ink III,0 : Text 120,20,"      SCROLL: "+Lzstr$(WALLSCROLL+1,2)
   Ink 6,0 : Text 120,30,"      OFFSET: "+Right$(Hex$( Fn FINDSCROLL,4),4)


   Rem ------------- Draw option versions of text/ offset 

   For Z=0 To 6

      Rem -- x values
   If SELECTED=23+(Z*2) : III=31 : Else III=6 : End If 
      Ink III,0 : LOC=0 : Text 48+120,44+(Z*8),"X:"+Lzstr$(WALLSCROLL_X(Z),1)


      Rem -- the text
   If SELECTED=24+(Z*2) : III=31 : Else III=6 : End If 
      Ink III,0 : LOC=0 : 

      Text 48+156,44+(Z*8),"                         "

      '  If WALLSCROLL_CONTENT$(Z)<>"" 

      Text 48+156,44+(Z*8),WALLSCROLL_CONTENT$(Z)

      If SELECTED=24+(Z*2)

         Q=Len(WALLSCROLL_CONTENT$(Z))*8
         Bar 48+156+Q,40+(Z*8) To 48+156+4+Q,40+(Z*8)+4

         '    Else  
         '
         '         Ink 0 : Bar 48+156,40+(Z*8) To 48+156+4,40+(Z*8)+4 
      End If 

   Next Z


   Rem -- draw text on the scroll 


   For Z=0 To 6

      Ink 0,3 : Text TEMPX+17+,TEMPY+20+(8*Z),"         "
      Text TEMPX+17+(8*WALLSCROLL_X(Z)),TEMPY+20+(8*Z),WALLSCROLL_CONTENT$(Z)

   Next Z


   'Gosub _CALCULATETEXTSIZE
   'Text TEMPX+17+8,TEMPY+84,Right$(Hex$(SIZETEXT+$10000),4)


   QUIT=0
   PRESSRETURN=False

   Screen Show 3
   Wait Vbl : Screen Swap 

   _SCROLLKEYS:
   Rem - check keys 

   Repeat 

      TEST$=Inkey$
      TEST=Scancode

      ' ---------

      If SELECTED=22 and Key State($4E)=-1 : Rem scroll up  
         Rem - do patches of current one here 

         Gosub _SCROLLPATCHES
         Gosub _FIXSCROLLOFFSETS

         WALLSCROLL=(WALLSCROLL+1) mod 73 : QUIT=1 : Wait 2


      Else If SELECTED=22 and Key State($4F)=-1 : Rem scroll down    

         Gosub _SCROLLPATCHES
         Gosub _FIXSCROLLOFFSETS

         WALLSCROLL=(WALLSCROLL+72) mod 73 : QUIT=1 : Wait 2

      End If 

      If SELECTED>22 and Odd(SELECTED)=False : Rem check key changes
         Z=(SELECTED-24)/2
         Gosub EXTRASCROLLKEYS

      End If 

      If SELECTED>22 and Odd(SELECTED)=False and Key State($4E)=-1 : Rem x offset up  
         Z=(SELECTED-23)/2
         WALLSCROLL_X(Z)=(WALLSCROLL_X(Z)+1) mod 9
         If Len(WALLSCROLL_CONTENT$(Z))+WALLSCROLL_X(Z)>9 : 
            WALLSCROLL_CONTENT$(Z)=Left$(WALLSCROLL_CONTENT$(Z),Len(WALLSCROLL_CONTENT$(Z))-1)
         End If 
         QUIT=2 : Wait 5

      Else If SELECTED>22 and Odd(SELECTED)=False and Key State($4F)=-1 : Rem x offset up  
         Z=(SELECTED-23)/2
         WALLSCROLL_X(Z)=(WALLSCROLL_X(Z)+8) mod 9
         If Len(WALLSCROLL_CONTENT$(Z))+WALLSCROLL_X(Z)>9 : 
            WALLSCROLL_CONTENT$(Z)=Left$(WALLSCROLL_CONTENT$(Z),1)
         End If 
         QUIT=2 : Wait 5

      End If 

      ' ------------ 

      If Key State($4C)=-1 : Rem - cursor up

         SELECTED=SELECTED-1
         If SELECTED>22 and Odd(SELECTED)=True : SELECTED=SELECTED-1 : End If 

         If SELECTED<=21 : SELECTED=36 : End If 
         QUIT=2 : Wait 4

      Else If Key State($4D)=-1 : Rem - cursor down

         SELECTED=SELECTED+1
         If SELECTED>22 and Odd(SELECTED)=True : SELECTED=SELECTED+1 : End If 

         If SELECTED>=37 : SELECTED=22 : End If 
         QUIT=2 : Wait 4

      Else If Key State($44)=-1 : Rem return 
         Gosub _SCROLLPATCHES
         Gosub _FIXSCROLLOFFSETS

         QUIT=3 : 
         SELECTED=15 : REFRESH=1

      End If 

      Rem     Clear Key  
      Wait Vbl : Rem Wait 2 


   Until QUIT<>0

   If QUIT=1 Then Goto WALLSCROLLDISPLAY
   If QUIT=2 Then Goto WALLSCROLL_UPDATE


   QUIT=0

   If EXTRAQUIT=1 : EXTRAQUIT=0 : QUIT=2 : End If 
   If EXTRAQUIT=2 : EXTRAQUIT=0 : Rem QUIT=1 
   End If 

   Screen Close 3 : Update On : Autoback 2
   Wait Vbl 
   Return 


   _SCROLLPATCHES:
   Gosub _CALCULATETEXTSIZE
   Rem   SIZETEXT 

   F= Fn FINDSCROLL


   TEMP=WALLSCROLL : Rem -- save scroll number

   WALLSCROLL=WALLSCROLL+1

   If WALLSCROLL<=72 : Rem -- we are not on the end one, so store stuff 

      A= Fn FINDSCROLL : Rem -- this is where we start

      E=0
      For B=A To $CA1 : Rem -- move all remaining text to  
         D=Start(11)+E
         Poke D,(Peek(Start(10)+LOOKUPWALLSCROLLTEXT+B))
         Rem ---- Print Hex$((Peek(Start(10)+LOOKUPWALLSCROLLTEXT+B))) : Wait Key 
         E=E+1
      Next B
      E=E-1 : Rem -- because we want to keep the $FF at the end
      Rem -- E now stores the length of the text being "moved" 
   End If 




   Rem --- now we must create our patch of the "just edited" wall scroll
   Rem --- we will store this in bank 2 for "safekeeping" 

   Q=0
   For Z=0 To 6 : Rem-- look at all rows 

      If WALLSCROLL_CONTENT$(Z)<>""

         Poke(Start(12)+Q),$FC : Rem -- starter 
         Q=Q+1

         Poke(Start(12)+Q),$1E+WALLSCROLL_X(Z) : Rem -- x coord 
         Q=Q+1

         Poke(Start(12)+Q),$3+Z : Rem -- Y coord 
         Q=Q+1


         For W=0 To Len(WALLSCROLL_CONTENT$(Z))-1 : Rem -- text itself 

            PATCHVALUE=Asc(Mid$(WALLSCROLL_CONTENT$(Z),W+1,1))
            Rem             Print PATCHVALUE : Wait Key  
            Poke(Start(12)+Q+W),PATCHVALUE

         Next W
         Q=Q+Len(WALLSCROLL_CONTENT$(Z))

      End If 

   Next Z

   PATCHVALUE=$FF : Poke(Start(12)+Q),PATCHVALUE : Rem -- terminator


   Rem ---- now we move the data back from the storage parts to the wallscroll area 

   Rem -- Q+1 now contains the length of the current entry
   Rem -- E should contain the length of the remaining to be copied afterwards
   Rem -- F should be the offset the changed one will start at  

   For B=0 To Q

      If F+B<$CA1
         PATCHVALUE=Peek(Start(12)+B)
         Poke Start(10)+LOOKUPWALLSCROLLTEXT+F+B,PATCHVALUE
      End If 

   Next B

   For B=0 To E
      PATCHVALUE=Peek(Start(11)+B)

      If F+Q+B+1<$CA1
         Rem   Print Hex$(F+Q+B+1) : Wait Key 
         Poke Start(10)+LOOKUPWALLSCROLLTEXT+F+Q+B+1,PATCHVALUE
      End If 

   Next B


   Wait Vbl 


   WALLSCROLL=TEMP : Rem -- return to normal
   Rem clear 11 , clear 12
   For A=0 To $1023
      Poke Start(11)+A,0
      Poke Start(12)+A,0
   Next A

   Return 


   _CALCULATETEXTSIZE:

   SIZETEXT=1 : Rem -- you need at least FF  

   For Z=0 To 6
      If WALLSCROLL_CONTENT$(Z)<>""
         SIZETEXT=SIZETEXT+3 : Rem -- for FC (1E) (04)
         SIZETEXT=SIZETEXT+Len(WALLSCROLL_CONTENT$(Z))
      End If 
   Next Z

   Return 



   EXTRASCROLLKEYS:
   '   use Z for the        
   ' WALLSCROLL_CONTENT$(Z) 

   If TEST<>0

      If TEST=$41 : Rem - backspace
         WALLSCROLL_CONTENT$(Z)=Left$(WALLSCROLL_CONTENT$(Z),Len(WALLSCROLL_CONTENT$(Z))-1)
      Else If TEST=$46 : Rem - delete 
         WALLSCROLL_CONTENT$(Z)=""

      Else If Asc(TEST$)>=32 and Asc(TEST$)<=127 and(Len(WALLSCROLL_CONTENT$(Z))+WALLSCROLL_X(Z))<9
         WALLSCROLL_CONTENT$(Z)=WALLSCROLL_CONTENT$(Z)+Upper$(TEST$)
      End If 

      QUIT=2

   End If 

   Return 



   _FIXSCROLLOFFSETS:

   Rem -- this is used to go "through" the scroll data
   Rem -- and patch the offsets to wherever it finds a $FC (starter) value


   Rem Screen 3 : Colour 0,$F0 : Wait Vbl 

   BEGINPLACE=Start(10)+LOOKUPWALLSCROLLTEXT
   TEMP=WALLSCROLL : TEMP2=LOC


   WALLSCROLL=0
   PATCHVALUE=0

   Rem -- i should set them all to zero first 

   For TEMP3=0 To 72
      Doke(Start(10)+LOOKUPWALLSCROLLREF+(TEMP3*2)),0
   Next TEMP3



   WALLSCROLL=1 : LOC=0

   Do 
      A=Peek(BEGINPLACE+LOC)

      Rem    Screen 3 : Ink 6,0 : Text 80,30,Hex$($1000000+A)  

      If A=$FF : Rem -- it finds a terminator   

         PATCHVALUE=LOC+1
         Gosub FINDSCROLL_PUT
         WALLSCROLL=WALLSCROLL+1

      End If 


      LOC=LOC+1
      If LOC>$CA2 or WALLSCROLL=73 Then Exit 

   Loop 


   WALLSCROLL=TEMP
   LOC=TEMP2


   Rem -- we are done here

   Colour 0,$0


   Return 


   _MAPEDITKEYS0:
   Return 

   _MAPEDITKEYS1:

   If SELECTED=11 and Key State($4E)=-1 : Rem  up blank/direction

      If Btst(3,CC)=False
         Bset 3,CC : Bclr 0,CC : Bclr 1,CC
      Else 
         FIRST=0 : SECOND=1 : IN=CC : Gosub _TWOBIT_ROTATE_UP : CC=OUT

         If Btst(0,CC)=False and Btst(1,CC)=False
         Bclr 0,CC : Bclr 1,CC : Bclr 3,CC : End If 

      End If 

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem- down blank/direction

      If Btst(3,CC)=False
         Bset 3,CC : Bset 0,CC : Bset 1,CC
      Else 

         FIRST=0 : SECOND=1 : IN=CC : Gosub _TWOBIT_ROTATE_DOWN : CC=OUT

         If Btst(0,CC)=True and Btst(1,CC)=True
         Bclr 0,CC : Bclr 1,CC : Bclr 3,CC : End If 

      End If 

      Gosub _SPOTUPDATE
      REFRESH=1

   End If 

   If SELECTED=12 and Key State($4E)=-1 : Rem- 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_UP : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=12 and Key State($4F)=-1 : Rem- 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_DOWN : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1


   Else If BB mod 4=1 and SELECTED=13 and Key State($4E)=-1 : Rem- up sign colour

      BB=(BB+4) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If BB mod 4=1 and SELECTED=13 and Key State($4F)=-1 : Rem- up sign colour

      BB=(BB+252) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 


   If BB mod 4=1 and SELECTED=15 and Key State($44)=-1 : Rem -- text editor 

      WALLSCROLL=((((AA*16)+BB)/4)-4)-1

      If DUNGEON=0 and GAME=6 : WALLSCROLL=WALLSCROLL
      Else If DUNGEON=1 and GAME=6 : WALLSCROLL=WALLSCROLL+21
      Else If DUNGEON=2 and GAME=6 : WALLSCROLL=WALLSCROLL+33
      Else If DUNGEON=3 and GAME=6 : WALLSCROLL=WALLSCROLL+41
      Else If DUNGEON=4 and GAME=6 : WALLSCROLL=WALLSCROLL+49
      Else If DUNGEON=5 and GAME=6 : WALLSCROLL=WALLSCROLL+59
      End If 

      If WALLSCROLL>72 : WALLSCROLL=0 : End If 

      Gosub _SHOWWALLSCROLL : REFRESH=1 : Wait Vbl : Screen 0 : Return 

   End If 

   If BB mod 4=0 and SELECTED=13 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem Shelf / conceal
      Bchg 3,DD
      Gosub _SPOTUPDATE
      REFRESH=1


   End If 

   If BB mod 4=3 and SELECTED=13 and Key State($4E)=-1 : Rem- up crystals 

      EE=(EE+8) mod $40 : AA=Int(EE/16) : BB=EE mod 16

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If BB mod 4=3 and SELECTED=13 and Key State($4F)=-1 : Rem- crystals

      EE=(EE+$38) mod $40 : AA=Int(EE/16) : BB=EE mod 16

      Gosub _SPOTUPDATE
      REFRESH=1
   End If 

   If(BB mod 4=2 or BB mod 4=3) and SELECTED=14 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem - crystals and switches

      Bchg 2,BB
      Gosub _SPOTUPDATE
      REFRESH=1


   Else If BB mod 4=2 and SELECTED=13 and Key State($4E)=-1 : Rem- up switches 

      EE=(EE+8) mod $100 : AA=Int(EE/16) : BB=EE mod 16

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If BB mod 4=2 and SELECTED=13 and Key State($4F)=-1 : Rem- switches

      EE=(EE+248) mod $100 : AA=Int(EE/16) : BB=EE mod 16

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If BB mod 4=2 and SELECTED=16 and Key State($4E)=-1 : Rem- up switch type  

      SWITCH=(EE/8)-0
      PATCHVALUE=(( Fn SWITCHTYPE)+2) mod $10
      Gosub SWITCHTYPE_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If BB mod 4=2 and SELECTED=16 and Key State($4F)=-1 : Rem- up switch type  

      SWITCH=(EE/8)-0
      PATCHVALUE=(( Fn SWITCHTYPE)+$1E) mod $10
      Gosub SWITCHTYPE_PUT

      Gosub _SPOTUPDATE
      REFRESH=1
   End If 


   ' Place a location reference for a switch

   If BB mod 4=2 and SELECTED=17 and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 

      SWITCH=(EE/8)-0
      XXX2= Fn SWITCHX
      YYY2= Fn SWITCHY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Select a location reference for a switch 

   Else If BB mod 4=2 and SELECTED=17 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location 

      Bob Off 2
      SWITCH=(EE/8)-0
      PATCHVALUE=XXX2 : Gosub SWITCHX_PUT
      PATCHVALUE=YYY2 : Gosub SWITCHY_PUT

      Gosub SWITCHPOS_UPDATE : 

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

    End If 

      ' Place a location reference for blueish gem placements (first)


FISH:


   If Key State($44)=-1 and BB mod 4=3
    Rem Screen 1 : Ink 14,0 : Text 30,30,"PLCME: "+Str$(PLACEMODE)+" EE:"+Hex$(EE,2)+" SELECTED"+Str$(SELECTED)+"  BB MOD 4(3)="+Str$(BB mod 4)+"         "
    Wait Vbl 

    If SELECTED=17 and EE=>$28 and EE=<$2F and PLACEMODE=0 : Rem- select a location 
      LOC=0
      XXX2= Fn GEMBLUX
      YYY2= Fn GEMBLUY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Place a location reference for blueish gem placements (second) 

   Else If SELECTED=20 and EE=>$28 and EE=<$2F and PLACEMODE=0 : Rem- select a location 

      LOC=1
      XXX2= Fn GEMBLUX
      YYY2= Fn GEMBLUY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Select a location reference for a blueish gem placements (first) 

   Else If EE=>$28 and EE=<$2F and SELECTED=17 and PLACEMODE=1 : Rem- select a location   

      Bob Off 2
      LOC=0
      PATCHVALUE=XXX2 : Gosub GEMBLUX_PUT
      PATCHVALUE=YYY2 : Gosub GEMBLUY_PUT

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Select a location reference for a blueish gem placements (second)

   Else If EE=>$28 and EE=<$2F and SELECTED=20 and PLACEMODE=1 : Rem- select a location   

      Bob Off 2
      LOC=1
      PATCHVALUE=XXX2 : Gosub GEMBLUX_PUT
      PATCHVALUE=YYY2 : Gosub GEMBLUY_PUT

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 

   ' Place a location reference for tan gem placements (first)

   If SELECTED=17 and EE=>$38 and EE=<$3F and PLACEMODE=0 : Rem- select a location 

      LOC=0
      XXX2= Fn GEMTANX
      YYY2= Fn GEMTANY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Place a location reference for tan gem placements (second) 

   Else If SELECTED=20 and EE=>$38 and EE=<$3F and PLACEMODE=0 : Rem- select a location 

      LOC=1
      XXX2= Fn GEMTANX
      YYY2= Fn GEMTANY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Select a location reference for a tan gem placements (first) 

   Else If EE=>$38 and EE=<$3F and SELECTED=17 and PLACEMODE=1 : Rem- select a location   

      Bob Off 2
      LOC=0
      PATCHVALUE=XXX2 : Gosub GEMTANX_PUT
      PATCHVALUE=YYY2 : Gosub GEMTANY_PUT

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

      ' Select a location reference for a tan gem placements (second)

   Else If EE=>$38 and EE=<$3F and SELECTED=20 and PLACEMODE=1 : Rem- select a location   

      Bob Off 2
      LOC=1
      PATCHVALUE=XXX2 : Gosub GEMTANX_PUT
      PATCHVALUE=YYY2 : Gosub GEMTANY_PUT

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 
   End If 

   '===== crystals

   ' Place a location reference for crystal removeals 
   ' first locations  


   If BB mod 4=3 and SELECTED=17 and EE=>$0 and EE=<$1F and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 


      If EE=>$0 and EE<=$7
         XXX2= Fn CRYSTALEFFECT1X
         YYY2= Fn CRYSTALEFFECT1Y

      Else If EE=>$8 and EE<=$F
         XXX2= Fn CRYSTALEFFECT6X
         YYY2= Fn CRYSTALEFFECT6Y

      Else If EE=>$10 and EE<=$17
         XXX2= Fn CRYSTALEFFECT4X
         YYY2= Fn CRYSTALEFFECT4Y

      Else If EE=>$18 and EE<=$1F
         XXX2= Fn CRYSTALEFFECT2X
         YYY2= Fn CRYSTALEFFECT2Y

      End If 


      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1


   Else If BB mod 4=3 and SELECTED=17 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location   


      Bob Off 2

      If EE=>$0 and EE<=$7
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT1X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT1Y_PUT

      Else If EE=>$8 and EE<=$F
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT6X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT6Y_PUT

      Else If EE=>$10 and EE<=$17
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT4X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT4Y_PUT

      Else If EE=>$18 and EE<=$1F
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT2X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT2Y_PUT

      End If 


      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1


   Else If BB mod 4=3 and SELECTED=20 and EE=>$10 and EE=<$1F and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 

      LOC=0

      If EE=>$10 and EE<=$17
         XXX2= Fn CRYSTALEFFECT5X
         YYY2= Fn CRYSTALEFFECT5Y

      Else If EE=>$18 and EE<=$1F
         XXX2= Fn CRYSTALEFFECT3X
         YYY2= Fn CRYSTALEFFECT3Y

      End If 


      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1


   Else If BB mod 4=3 and EE=>$10 and EE=<$1F and SELECTED=20 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2

      If EE=>$10 and EE<=$17
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT5X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT5Y_PUT

      Else If EE=>$18 and EE<=$1F
         PATCHVALUE=XXX2 : Gosub CRYSTALEFFECT3X_PUT
         PATCHVALUE=YYY2 : Gosub CRYSTALEFFECT3Y_PUT

      End If 


      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 


   Return 


   _MAPEDITKEYS2:

   If SELECTED=11 and Key State($4E)=-1 : Rem- up north wood 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_UP : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem- down north wood 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_DOWN : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=12 and Key State($4E)=-1 : Rem- up east wood

      FIRST=2 : SECOND=3 : IN=BB : Gosub _TWOBIT_ROTATE_UP : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=12 and Key State($4F)=-1 : Rem- down east wood

      FIRST=2 : SECOND=3 : IN=BB : Gosub _TWOBIT_ROTATE_DOWN : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1
   End If 

   If SELECTED=13 and Key State($4E)=-1 : Rem- up south wood 

      FIRST=0 : SECOND=1 : IN=AA : Gosub _TWOBIT_ROTATE_UP : AA=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=13 and Key State($4F)=-1 : Rem- down south wood 

      FIRST=0 : SECOND=1 : IN=AA : Gosub _TWOBIT_ROTATE_DOWN : AA=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=14 and Key State($4E)=-1 : Rem- up west wood  

      FIRST=2 : SECOND=3 : IN=AA : Gosub _TWOBIT_ROTATE_UP : AA=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=14 and Key State($4F)=-1 : Rem- down west wood

      FIRST=2 : SECOND=3 : IN=AA : Gosub _TWOBIT_ROTATE_DOWN : AA=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=15 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- lock  

      Bchg 0,CC
      Gosub _SPOTUPDATE
      REFRESH=1

   End If 

   Return 

   _MAPEDITKEYS3:

   If SELECTED=11 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- misc

      If AA=0 and(BB=1 or BB=0) : Bchg 0,BB
   Else : AA=0 : BB=1 : End If 

      Gosub _SPOTUPDATE
      REFRESH=1
   End If 

   Return 

   _MAPEDITKEYS4:

   If SELECTED=11 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- misc
      If BB=>8 or AA<>0
         BB=0 : AA=0
      Else 
         Bchg 0,BB
      End If 

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=12 and Key State($4E)=-1 : Rem- up stairs direction 


      FIRST=1 : SECOND=2 : IN=BB : Gosub _TWOBIT_ROTATE_UP : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   Else If SELECTED=12 and Key State($4F)=-1 : Rem- down  stairs direction

      FIRST=1 : SECOND=2 : IN=BB : Gosub _TWOBIT_ROTATE_DOWN : BB=OUT
      Gosub _SPOTUPDATE : REFRESH=1

   End If 

   Return 

   _MAPEDITKEYS5:

   If SELECTED=11 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- door type 
      Bchg 1,BB
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=12 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- orientation 
      Bchg 2,BB
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=13 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- open/closed 
      Bchg 0,BB
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=14 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- lock

      Bchg 0,CC
      If Btst(0,CC)=False : AA=0 : End If : Rem -- if unlocking, remove lock type
      If Btst(3,BB)=True : Bclr 0,CC : End If : Rem -- if void lock, stay clear

      Gosub _SPOTUPDATE
      REFRESH=1
   End If 
   If SELECTED=15 and Key State($4E)=-1 : Rem- locktype  

      If Btst(3,BB)=False : AA=(AA+1) : Rem -- if not on void lock , do normal 
   Else : AA=0 : Bclr 3,BB : Bset 0,CC : End If : Rem -- otherwise, magelock, locked door, mage, not void

      If AA>7 : Bset 3,BB : Bclr 0,CC : AA=0 : End If : Rem -- if top lock, do void lock, clear locked flag, no type 

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=15 and Key State($4F)=-1 : Rem- locktype

      If Btst(3,BB)=False : AA=AA-1 : Rem -- if not on void lock , do normal 
   Else : AA=7 : Bclr 3,BB : Bset 0,CC : End If : Rem -- otherwise, magelock, locked door, chromatic, not void 

      If AA<0 : Bset 3,BB : Bclr 0,CC : AA=0 : End If : Rem -- if top lock, do void lock, clear locked flag, no type 

      Gosub _SPOTUPDATE
      REFRESH=1


   End If 


   Return 

   _MAPEDITKEYS6:

   Rem --  this needs some extra work!

   TRIGGER=(EE/8)-0
   TRIGTYPE= Fn TRIGGERTYPE


   If SELECTED=11 and Key State($4E)=-1 : Rem- 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_UP : BB=OUT
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem- 

      FIRST=0 : SECOND=1 : IN=BB : Gosub _TWOBIT_ROTATE_DOWN : BB=OUT
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=12 and(Key State($4E)=-1 or Key State($4F)=-1) : Rem- ceiling 
      Bchg 2,BB
      Gosub _SPOTUPDATE
      REFRESH=1
   End If 
   If SELECTED=13 and Key State($4E)=-1 : Rem- magic type  
      BB=(BB+8) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=13 and Key State($4F)=-1 : Rem- 
      BB=(BB+248) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=15 and Key State($4E)=-1 : Rem- up trigger type   

      TRIGGER=(EE/8)-0

      BEXTRAS=0-(4*BEXT)

      PATCHVALUE=(( Fn TRIGGERTYPE)+2) mod($3E+BEXTRAS)
      Gosub TRIGGERTYPE_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=15 and Key State($4F)=-1 : Rem- dwn trigger type  

      TRIGGER=(EE/8)-0

      BEXTRAS=0-(4*BEXT)

      PATCHVALUE=(( Fn TRIGGERTYPE)+$3C+BEXTRAS) mod($3E+BEXTRAS)
      Gosub TRIGGERTYPE_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

   End If 

   ' pick an x/y coord parameter on same floor  

   If(TRIGTYPE=$6 or TRIGTYPE=$16 or TRIGTYPE=$18 or TRIGTYPE=$1A or TRIGTYPE=$1C or TRIGTYPE=$1E or TRIGTYPE=$24 or TRIGTYPE=$2C or TRIGTYPE=$2E or TRIGTYPE=$36) and SELECTED=16 and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 

      XXX2= Fn TRIGGERX
      YYY2= Fn TRIGGERY

      PLACEMODE=1
      Gosub _SPOTUPDATE
      REFRESH=1

      ' accept an x/y coord parameter on same floor  
   Else If(TRIGTYPE=$6 or TRIGTYPE=$16 or TRIGTYPE=$18 or TRIGTYPE=$1A or TRIGTYPE=$1C or TRIGTYPE=$1E or TRIGTYPE=$24 or TRIGTYPE=$2C or TRIGTYPE=$2E or TRIGTYPE=$36) and SELECTED=16 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location 

      Bob Off 2
      PATCHVALUE=XXX2 : Gosub TRIGGERX_PUT
      PATCHVALUE=YYY2 : Gosub TRIGGERY_PUT

      Gosub TRIGGERPOS_UPDATE : 

      PLACEMODE=0
      Gosub _SPOTUPDATE
      REFRESH=1


   Else If TRIGTYPE=$C and SELECTED=17 and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 

      XXX2= Fn SPECIAL1X : YYY2= Fn SPECIAL1Y
      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1


   Else If TRIGTYPE=$C and SELECTED=17 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location 

      Bob Off 2
      PATCHVALUE=XXX2 : Gosub SPECIAL1X_PUT
      PATCHVALUE=YYY2 : Gosub SPECIAL1Y_PUT

      Gosub SPECIAL1POS_UPDATE : 
      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1


   Else If TRIGTYPE=$E and SELECTED=17 and PLACEMODE=0 and Key State($44)=-1 : Rem- select a location 

      XXX2= Fn SPECIAL2X : YYY2= Fn SPECIAL2Y
      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1

   Else If TRIGTYPE=$E and SELECTED=17 and PLACEMODE=1 and Key State($44)=-1 : Rem- select a location 

      Bob Off 2
      PATCHVALUE=XXX2 : Gosub SPECIAL2X_PUT
      PATCHVALUE=YYY2 : Gosub SPECIAL2Y_PUT

      Gosub SPECIAL2POS_UPDATE : 
      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1

   End If 

   If(TRIGTYPE=$12) and PLACEMODE=0 and SELECTED=18 and Key State($44)=-1 : Rem- select a location   

      XXX2= Fn TRIGGERX : YYY2= Fn TRIGGERY
      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1

   Else If(TRIGTYPE=$12) and PLACEMODE=1 and SELECTED=18 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2
      PATCHVALUE=XXX2 : Gosub TRIGGERX_PUT
      PATCHVALUE=YYY2 : Gosub TRIGGERY_PUT

      Gosub TRIGGERPOS_UPDATE : 
      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1


      ' Tower Entrance Pad - Tower Picker
   Else If TRIGTYPE=$12 and SELECTED=17 and Key State($4E)=-1 : Rem- 

      PATCHVALUE=(( Fn TRIGGERF)+1)
      If PATCHVALUE>$B : PATCHVALUE=$2 : End If 
      Gosub TRIGGERF_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If TRIGTYPE=$12 and SELECTED=17 and Key State($4F)=-1 : Rem- 

      PATCHVALUE=(( Fn TRIGGERF)-1)
      If PATCHVALUE<2 : PATCHVALUE=$B : End If 
      Gosub TRIGGERF_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

      ' Tower Entrance Pad - Tower Picker
   Else If TRIGTYPE=$14 and SELECTED=17 and Key State($4E)=-1 : Rem- 

      PATCHVALUE=(( Fn TRIGGERF)+4)
      If PATCHVALUE>$14 : PATCHVALUE=$4 : End If 
      Gosub TRIGGERF_PUT

      Gosub _SPOTUPDATE
      REFRESH=1

   Else If TRIGTYPE=$14 and SELECTED=17 and Key State($4F)=-1 : Rem- 

      PATCHVALUE=(( Fn TRIGGERF)-$4)
      If PATCHVALUE<$4 : PATCHVALUE=$14 : End If 
      Gosub TRIGGERF_PUT

      Gosub _SPOTUPDATE
      REFRESH=1
   End If 
   If(TRIGTYPE=$20 or TRIGTYPE=$24 or TRIGTYPE=$26 or TRIGTYPE=$38) and PLACEMODE=0 and SELECTED=17 and Key State($44)=-1 : Rem- select a location   

      XXX2= Fn TRIGGERX : YYY2= Fn TRIGGERY
      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1

   Else If(TRIGTYPE=$20 or TRIGTYPE=$24 or TRIGTYPE=$26 or TRIGTYPE=$38) and PLACEMODE=1 and SELECTED=17 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2
      PATCHVALUE=XXX2 : Gosub TRIGGERX_PUT
      PATCHVALUE=YYY2 : Gosub TRIGGERY_PUT

      Gosub TRIGGERPOS_UPDATE : 
      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1

      Rem - tower entrance locations   

   Else If(TRIGTYPE=$28) and PLACEMODE=0 and(SELECTED=18 or SELECTED=19) and Key State($44)=-1 : Rem- select a location   

      LOC=SELECTED-18

      XXX2= Fn DUNGEONSTARTX : YYY2= Fn DUNGEONSTARTY
      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1

   Else If(TRIGTYPE=$28) and PLACEMODE=1 and(SELECTED=18 or SELECTED=19) and Key State($44)=-1 : Rem- select a location   

      Bob Off 2 : LOC=SELECTED-18

      PATCHVALUE=XXX2 : Gosub DUNGEONSTARTX_PUT
      PATCHVALUE=YYY2 : Gosub DUNGEONSTARTY_PUT

      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1
   End If 

   Rem - keep return locations (BLOODWYCH)  

   ' Reminder... placemode 0 happens when you click it, placemode 1 happens when second cursor selects a location 
   If(TRIGTYPE=$14) and PLACEMODE=0 and(SELECTED=19 or SELECTED=20) and Key State($44)=-1 : Rem- select a location   

      LOC=SELECTED-19

      If BEXT=False
         XXX2= Fn KEEPSTARTX : YYY2= Fn KEEPSTARTY
      Else 
         XXX2= Fn DUNGEONSTARTX_EX : YYY2= Fn DUNGEONSTARTY_EX
      End If 

      PLACEMODE=1 : Gosub _SPOTUPDATE : REFRESH=1

   Else If(TRIGTYPE=$14) and PLACEMODE=1 and(SELECTED=19 or SELECTED=20) and Key State($44)=-1 : Rem- select a location   

      Bob Off 2 : LOC=SELECTED-19

      DUNGEONNAME= Fn TRIGGERF

      If BEXT=False
         FROM=DUNGEONNAME/$4

         PATCHVALUE=XXX2 : Gosub KEEPSTARTX_PUT
         PATCHVALUE=YYY2 : Gosub KEEPSTARTY_PUT
         PATCHVALUE=EYEZ : Gosub KEEPSTARTF_PUT
      Else 
         FROM=DUNGEONNAME

         PATCHVALUE=XXX2 : Gosub DUNGEONSTARTX_EX_PUT
         PATCHVALUE=YYY2 : Gosub DUNGEONSTARTY_EX_PUT
         If DUNGEONNAME=1
            PATCHVALUE=EYEZ : Gosub DUNGEONSTARTF_EX_PUT
         End If 
      End If 
      PLACEMODE=0 : Gosub _SPOTUPDATE : REFRESH=1



      ' Flash Teleport 

   Else If(TRIGTYPE=$2A or TRIGTYPE=$32) and PLACEMODE=0 and SELECTED=16 and Key State($44)=-1 : Rem- select a location   

      XXX2= Fn TRIGGERX : YYY2= Fn TRIGGERY

      ZZZ1=EYEZ : Rem- edit floor = currently viewing' 

      PLACEMODE=2 : REFRESH=1

      If EYEZ<> Fn TRIGGERF : 
         EYEZ= Fn TRIGGERF : QUIT=2
         Bob Off 
      End If 


      ' flash teleport unselect

   Else If(TRIGTYPE=$2A or TRIGTYPE=$32) and PLACEMODE<>0 and Key State($44)=-1 : Rem- select a location   

      Bob Off 2 : Rem Stop 

      Gosub TELEPORTPOS_UPDATE

      PLACEMODE=0 : REFRESH=1

      If EYEZ<>ZZZ1 : QUIT=2 : End If 
      EYEZ=ZZZ1



   End If 



   Return 

   _MAPEDITKEYS7:

   If SELECTED=11 and Key State($4E)=-1 : Rem- magic type  
      BB=(BB+1) mod 4
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=11 and Key State($4F)=-1 : Rem- 
      BB=(BB+7) mod 4
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=12 and Key State($4E)=-1 : Rem- magic type  
      BB=(BB+4) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1

   Else If SELECTED=12 and Key State($4F)=-1 : Rem- 
      BB=(BB+252) mod 256
      Gosub _SPOTUPDATE
      REFRESH=1
   End If 



   Return 

   _TWOBIT_ROTATE_UP:
   If Btst(FIRST,IN)=False and Btst(SECOND,IN)=False : Bset FIRST,IN : Bclr SECOND,IN
   Else If Btst(FIRST,IN)=True and Btst(SECOND,IN)=False : Bclr FIRST,IN : Bset SECOND,IN
   Else If Btst(FIRST,IN)=False and Btst(SECOND,IN)=True : Bset FIRST,IN : Bset SECOND,IN
Else If Btst(FIRST,IN)=True and Btst(SECOND,IN)=True : Bclr FIRST,IN : Bclr SECOND,IN : End If 
   OUT=IN
   Return 

   _TWOBIT_ROTATE_DOWN:
   If Btst(FIRST,IN)=False and Btst(SECOND,IN)=False : Bset FIRST,IN : Bset SECOND,IN
   Else If Btst(FIRST,IN)=True and Btst(SECOND,IN)=False : Bclr FIRST,IN : Bclr SECOND,IN
   Else If Btst(FIRST,IN)=False and Btst(SECOND,IN)=True : Bset FIRST,IN : Bclr SECOND,IN
Else If Btst(FIRST,IN)=True and Btst(SECOND,IN)=True : Bclr FIRST,IN : Bset SECOND,IN : End If 
   OUT=IN
   Return 


   _SPOTUPDATE:

   X=XXX1
   Y=YYY1
   Z=EYEZ

   PATCHVALUE1=(AA*16)+BB
   PATCHVALUE2=(CC*16)+DD

   Gosub MAPDATA_PUT

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8

   INX=0+5+E+(XXX1*16)+1
   INY=(YYY1*8)+5+F+1
   OUTX=INX+14
   OUTY=INY+6

   Bob Off 1 : Bob Update 
   Ink 0 : Bar INX,INY To OUTX,OUTY

   Gosub _DRAWICON
   '        Gosub _DISPLAY
   REFRESH=1

   Return 




   SWITCHPOS_UPDATE:
   SWITCH=(EE/8)-0
   PATCHVALUE=XXX2 : Gosub SWITCHX_PUT
   PATCHVALUE=YYY2 : Gosub SWITCHY_PUT
   Return 

   TRIGGERPOS_UPDATE:
   TRIGGER=(EE/8)-0
   PATCHVALUE=XXX2 : Gosub TRIGGERX_PUT
   PATCHVALUE=YYY2 : Gosub TRIGGERY_PUT
   Return 

   TELEPORTPOS_UPDATE:
   TRIGGER=(EE/8)-0
   PATCHVALUE=XXX2 : Gosub TRIGGERX_PUT
   PATCHVALUE=YYY2 : Gosub TRIGGERY_PUT
   PATCHVALUE=EYEZ : Gosub TRIGGERF_PUT
   Return 


   SPECIAL1POS_UPDATE:
   PATCHVALUE=XXX2 : Gosub SPECIAL1X_PUT
   PATCHVALUE=YYY2 : Gosub SPECIAL1Y_PUT
   Return 

   SPECIAL2POS_UPDATE:
   PATCHVALUE=XXX2 : Gosub SPECIAL2X_PUT
   PATCHVALUE=YYY2 : Gosub SPECIAL2Y_PUT
   Return 

   _DRAWGRID:

   Screen 0 : Cls 0 : Wait Vbl 

   Z=EYEZ

   If Btst(0,PREVIEW)=True and MAUDE=5 Then Gosub _BELOWGRID
   If Btst(1,PREVIEW)=True and MAUDE=5 Then Gosub _ABOVEGRID

   Gosub _MAINGRID
   If MAUDE=5 Then Gosub _OUTERSQUARE


   Return 


   _BELOWGRID:
   Z=Z-1
   If Z<0 : Z=Z+1 : Return : End If 

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8
   G=1 : Rem -- ink colour
   H=-1 : Rem - pixel offset 
   Gosub _ACTUALGRID

   If MAUDE=5
      For B=0 To D-1
         For A=0 To C-1

            INX=0+5+E+(A*16)+1
            INY=(B*8)+5+F+1
            OUTX=INX+14
            OUTY=INY+5


            X=A : Y=B

            Gosub _DRAWLEVELICONS

         Next A
      Next B

   End If 

   Z=Z+1
   Z=Z mod 8


   Return 


   _ABOVEGRID:
   Z=Z+1
   If Z> Fn FLOORNUMBER : Z=Z-1 : Return : End If 

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8
   G=2 : Rem -- ink colour
   H=1 : Rem -- pixel offset
   Gosub _ACTUALGRID


   If MAUDE=5
      For B=0 To D-1
         For A=0 To C-1

            INX=0+5+E+(A*16)+1
            INY=(B*8)+5+F+1
            OUTX=INX+14
            OUTY=INY+6

            X=A : Y=B

            Gosub _DRAWLEVELICONS

         Next A
      Next B

   End If 

   Z=Z-1
   Z=Z mod 8


   Return 


   _MAINGRID:


   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8

   If MAUDE=5
      G=14 : Rem -- ink colour
Else : G=2 : End If 

   H=0 : Rem - pixel offset 

   Gosub _ACTUALGRID


   If MAUDE=5
      For B=0 To D-1
         For A=0 To C-1


            INX=0+5+E+(A*16)+1
            INY=(B*8)+5+F+1
            OUTX=INX+14
            OUTY=INY+6

            X=A : Y=B

            Gosub _DRAWLEVELICONS

         Next A
      Next B

   End If 

   Return 


   _ACTUALGRID:

   Screen 0

   If C=0 and D=0 Then Return 

   For A=0 To D
      Turbo Draw 0+5+E+(H*2),(A*8)+5+F+H To(C*16)+5+E+(H*2),(A*8)+5+F+H,G
   Next A

   For A=0 To C
      Turbo Draw(A*16)+5+E+(H*2),0+5+F+H To(A*16)+5+E+(H*2),(D*8)+5+F+H,G
   Next A

   Return 


   _OUTERSQUARE:

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8
   G=15 : Rem -- ink colour
   H=0 : Rem - pixel offset 

   If C=0 and D=0 Then Return 

   A=0 : Turbo Draw 0+5+E+(H*2),(A*8)+5+F+H To(C*16)+5+E+(H*2),(A*8)+5+F+H,G
   A=D : Turbo Draw 0+5+E+(H*2),(A*8)+5+F+H To(C*16)+5+E+(H*2),(A*8)+5+F+H,G
   A=0 : Turbo Draw(A*16)+5+E+(H*2),0+5+F+H To(A*16)+5+E+(H*2),(D*8)+5+F+H,G
   A=C : Turbo Draw(A*16)+5+E+(H*2),0+5+F+H To(A*16)+5+E+(H*2),(D*8)+5+F+H,G

   Return 


   _CURSOR:

   Rem If MAUDE=5 Then Stop 

   If MAUDE=2 : X=XXX1 : Y=YYY1 : Z=EYEZ : End If 

   Bob Off 1 : Bob Off 2

   Z=EYEZ

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8

   If ZZZ1<>EYEZ Then Goto SKIPY : 

   If MAUDE=3 Then Goto SKIPY : 

   If XXX1<0 Then XXX1=0
   If YYY1<0 Then YYY1=0

   If XXX1=>C-1 Then XXX1=C-1
   If YYY1=>D-1 Then YYY1=D-1

   If C=0 and D=0 : Return : End If 

   FINALX=0+5+E+(XXX1*16)
   FINALY=(YYY1*8)+5+F

   Bob 1,FINALX,FINALY,1

   SKIPY:

   If PLACEMODE=0 Then Return 

   If XXX2<0 Then XXX2=0
   If YYY2<0 Then YYY2=0

   If XXX2=>C-1 Then XXX2=C-1
   If YYY2=>D-1 Then YYY2=D-1

   If C=0 and D=0 Then Return 

   FINALX=0+5+E+(XXX2*16)
   FINALY=(YYY2*8)+5+F

   Bob 2,FINALX,FINALY,1


   Return 

   _DRAWOVERLAY:

   SWITCHLIST$=""
   PADLIST$=""
   CRYSTALLIST$=""
   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8

   If C=0 and D=0 Then Return 

   Change Bank Font 9 : Ink 14,0
   ' go thru all locations, and "number" the triggers/traps 
   For B=0 To D-1
      For A=0 To C-1
         INX=0+5+E+(A*16)+1
         INY=(B*8)+5+F+1
         OUTX=INX+14
         OUTY=INY+6

         X=A : Y=B

         Gosub _DRAWNUMBER

         '     Text INX+4,INY+5,Right$(Str$( Fn MAPDATA2 mod 8),2)
         X=A : Y=B
      Next A
   Next B

   If(MAUDE=3 or MAUDE=0) and(Btst(1,MARKERS)=True or Btst(2,MARKERS)=True) : Gosub _PLACEMONSTERMARKERS : REFRESH=1 : End If 
   If(MAUDE=3 or MAUDE=0) and Btst(0,MARKERS)=True : Gosub _PLACECHAMPIONMARKERS : REFRESH=1 : End If 



   Return 
_DRAWLIST:
   Screen 0
   Change Bank Font 9
   If LIGHT=False : Ink 4,0
   Else : Ink 15,0 : End If 
   LINECOUNT=1

 ' === draw the switch list 

   Text 20,(LINECOUNT*8),"~ SWITCHES ~"
   LINECOUNT=LINECOUNT+2
   If MSWITCHLIST$<>""
    For COUNT=0 To 31
       MSWITCHLIST$=MSWITCHLIST$+Chr$($A)
    Next 

   For COUNT=0 To 31
      ITEM$=Itemstr$(MSWITCHLIST$,COUNT,Chr$($A))
      If ITEM$<>""
      'LINE$(4+COUNT)=ITEM$
        Text 20,(LINECOUNT*8),ITEM$
        LINECOUNT=LINECOUNT+1
      End If 

   Next 
   Else 
        Text 20,(LINECOUNT*8),"NONE"
        LINECOUNT=LINECOUNT+1
   End If 

 ' === draw the trigger list  
   LINECOUNT=LINECOUNT+1
   Text 20,(LINECOUNT*8),"~ TRIGGERS ~"
   LINECOUNT=LINECOUNT+2
   If MTRIGGERLIST$<>""
    For COUNT=0 To 31
       MTRIGGERLIST$=MTRIGGERLIST$+Chr$($A)
    Next 

   For COUNT=0 To 31
      ITEM$=Itemstr$(MTRIGGERLIST$,COUNT,Chr$($A))
      If ITEM$<>""
      'LINE$(4+COUNT)=ITEM$
        Text 20,(LINECOUNT*8),ITEM$
        LINECOUNT=LINECOUNT+1
      End If 

   Next 
   Else 
        Text 20,(LINECOUNT*8),"NONE"
   End If 

   MTRIGGERLIST$=""
   MSWITCHLIST$=""
   Return 


   _DRAWMAP:

   Screen 0

   C= Fn FLOORWIDTH
   D= Fn FLOORHEIGHT
   E=( Fn FLOOROFFSETX)*16
   F=( Fn FLOOROFFSETY)*8

   If C=0 and D=0 Then Return 

   Change Bank Font 9 : Ink 14,0


   For B=0 To D-1
      For A=0 To C-1
         INX=0+5+E+(A*16)+1
         INY=(B*8)+5+F+1
         OUTX=INX+14
         OUTY=INY+6

         X=A : Y=B

         Gosub _DRAWICON

         '     Text INX+4,INY+5,Right$(Str$( Fn MAPDATA2 mod 8),2)

         X=A : Y=B


      Next A
   Next B


   If MAUDE=3 and(Btst(1,MARKERS)=True or Btst(2,MARKERS)=True) : Gosub _PLACEMONSTERMARKERS : REFRESH=1 : End If 
   If MAUDE=3 and Btst(0,MARKERS)=True : Gosub _PLACECHAMPIONMARKERS : REFRESH=1 : End If 


   Return 


   _DRAWNUMBER:

   Bob Off 1 : Bob Update 

   EE= Fn MAPDATA1
   FF= Fn MAPDATA2

   AA=Int(EE/16) : BB=EE mod 16
   CC=Int(FF/16) : DD=FF mod 16


   ' check  

   ' TYPE$="_TYPE"+Right$(Str$(FF mod 8),1) 
   ' Gosub TYPE$

' ======== DO LINES / MARKERS FOR SWITCHES 
SWCH:
   If(FF mod 8)=$1 : Rem---- its a wall   
      If BB mod 4=2 : Rem ----- (CCC) and errr ?  not sign/shelf/hole  

       If(AA*16)+BB=>8 : Rem - (BBB) if valid switch

         '  If BB=2 or BB=$A or BB=6 or BB=$E ': rem ... rotation i think?  

            EE=(AA*16)+BB : SWITCH=(EE/8)-0
            Screen 0 : Ink 0 : BIGY=0 : BIGX=620
         '* clear a space 
            Ink 0 : Bar BIGX,BIGY To BIGX+15,BIGY+6

      For COUNT=0 To 2
               If COUNT=0 : CULA=1
          Else If COUNT=1 : CULA=12
          Else If COUNT=2 : CULA=9
          End If 
         '* write the number  
            Ink CULA : Text BIGX,BIGY+5,Lzstr$(SWITCH,2)
                       Text BIGX+7,BIGY+5,Right$(Lzstr$(SWITCH,2),1)+" "
         '* make it a bob 
            Get Bob 0,300+COUNT,BIGX,BIGY To BIGX+16,BIGY+6
         '* clear the space 
            Ink 0 : Bar BIGX,BIGY To BIGX+15,BIGY+6
      Next 
         '*       
     ''    If Btst(2,MARKERS)=True
            Paste Bob INX+1,INY,300
     ''    Else   
     ''       Paste Bob INX+1,INY,302 
     ''    End If 
            ' destination highlight
               SWITCHLIST$=""
               SWITCHLIST$=SWITCHLIST$+Lzstr$(SWITCH,2)+": "
               SWITCHTYPE= Fn SWITCHTYPE
                 If SWITCHTYPE=0
                     SWITCHLIST$=SWITCHLIST$+"NO EFFECT"
            Else If SWITCHTYPE=2
                     SWITCHLIST$=SWITCHLIST$+"REMOVE"
            Else If SWITCHTYPE=4
                     SWITCHLIST$=SWITCHLIST$+"TOGGLE WALL"
            Else If SWITCHTYPE=6
                     SWITCHLIST$=SWITCHLIST$+"OPEN METAL DOOR"
            Else If SWITCHTYPE=8
                     SWITCHLIST$=SWITCHLIST$+"ROTATE WALL"
            Else If SWITCHTYPE=10
                     SWITCHLIST$=SWITCHLIST$+"TOGGLE PILLAR"
            Else If SWITCHTYPE=12
                     SWITCHLIST$=SWITCHLIST$+"PLACE PILLAR"
            Else If SWITCHTYPE=14
                     SWITCHLIST$=SWITCHLIST$+"ROTATE WOODEN"
            Else 
                     SWITCHLIST$=SWITCHLIST$+"INVALID SWITCH "+Hex$(SWITCHTYPE)
            End If 
      ' AAA

      If SWITCHTYPE>0 and SWITCHTYPE<=14 : Rem (AAA)
            TARGETX= Fn SWITCHX
            TARGETY= Fn SWITCHY
            SWITCHLIST$=SWITCHLIST$+" X:"+Lzstr$(TARGETX,2)
            SWITCHLIST$=SWITCHLIST$+" Y:"+Lzstr$(TARGETY,2)
            INX2=0+5+E+(TARGETX*16) : INY2=(TARGETY*8)+5+F
            OUTX2=INX2+15+1 : OUTY2=INY2+7+1

        If Btst(3,MARKERS)=True

            Ink 10 : Box INX2,INY2 To OUTX2,OUTY2
               Paste Bob INX2+2,INY2+1,301
           End If 
         End If : Rem -- (AAA) approriate switchtype (i.e. has a target) 
         SWITCHLIST$=SWITCHLIST$+Chr$($A)

       ' add to list if needed
         If Instr(MSWITCHLIST$,SWITCHLIST$)<1
            MSWITCHLIST$=MSWITCHLIST$+SWITCHLIST$
         End If 

        Else : Rem (BBB) - shooter dontcare           
        End If : Rem - (BBB)
     End If : Rem - (CCC)

'==================  DO MARKERS/LINES FOR PADS   
PADS:
   Else If(FF mod 8)=$6
       If BB mod 8=2 or BB mod 8=3 or BB mod 8=6 or BB mod 8=7
       Rem -- green pad / invisible pad 

       DDDD=(AA*16)+BB : TRIGGER=DDDD/8

      TRIGGERLIST$=""
      If TRIGGER<>0
          TRIGGERLIST$=TRIGGERLIST$+Lzstr$(TRIGGER,2)+": "

            Screen 0 : Ink 0 : BIGY=0 : BIGX=620
         '* clear a space 
            Ink 0 : Bar BIGX,BIGY To BIGX+15,BIGY+6

      For COUNT=0 To 2
               If COUNT=0 and LIGHT=False : CULA=14
          Else If COUNT=0 and LIGHT=True : CULA=1
          Else If COUNT=1 : CULA=6
          Else If COUNT=2 : CULA=5
          End If 
'         '* write the number  
            Ink CULA : Text BIGX,BIGY+5,Lzstr$(TRIGGER,2)
                       Text BIGX+7,BIGY+5,Right$(Lzstr$(TRIGGER,2),1)+" "
         '* make it a bob 
            Get Bob 0,300+COUNT,BIGX,BIGY To BIGX+16,BIGY+6
         '* clear the space 
            Ink 0 : Bar BIGX,BIGY To BIGX+15,BIGY+6
      Next 
         '*       
            Paste Bob INX+1,INY,300

            ' destination highlight

   ' now lets talk about what the switch does 
         LOC=0 : TRIGGERTYPE= Fn TRIGGERTYPE : COORD=0

 '''  If TRIGGERTYPE<=$3C and Btst(0,TRIGGERTYPE)=False  : End If   
        If TRIGGERTYPE=$0 : TRIGGERLIST$=TRIGGERLIST$+"NO EVENT"
   Else If TRIGGERTYPE=$2 : TRIGGERLIST$=TRIGGERLIST$+"SPINNER 1 (180)"
   Else If TRIGGERTYPE=$4 : TRIGGERLIST$=TRIGGERLIST$+"SPINNER 2"
   Else If TRIGGERTYPE=$6 : TRIGGERLIST$=TRIGGERLIST$+"OPEN METAL DOOR"
                            COORD=1
   Else If TRIGGERTYPE=$8 : TRIGGERLIST$=TRIGGERLIST$+"VIVIFY MACHINE EXTERNAL"
   Else If TRIGGERTYPE=$A : TRIGGERLIST$=TRIGGERLIST$+"VIVIFY MACHINE INTERNAL"

   Else If TRIGGERTYPE=$C : TRIGGERLIST$=TRIGGERLIST$+" WOOD DOOR TRAP - RIGHT"
          ' TRIGGERLIST$=TRIGGERLIST$+"X: "+Lzstr$( Fn SPECIAL1X,2)+" Y: "+Lzstr$( Fn SPECIAL1Y,2) 
          ' TARGETX= Fn SPECIAL1X
          ' TARGETY= Fn SPECIAL1Y
           COORD=5
   Else If TRIGGERTYPE=$E : TRIGGERLIST$=TRIGGERLIST$+" WOOD DOOR TRAP - LEFT"
          ' TRIGGERLIST$=TRIGGERLIST$+" X: "+Lzstr$( Fn SPECIAL2X,2)+" Y: "+Lzstr$( Fn SPECIAL2Y,2)
           COORD=6
   End If 
        If TRIGGERTYPE=$10 : TRIGGERLIST$=TRIGGERLIST$+"TRADER DOOR"

   Else If TRIGGERTYPE=$12 and BEXT=False

      TRIGGERLIST$=TRIGGERLIST$+"TOWER ENTRANCE -"
      DUNGEONNAME= Fn TRIGGERF

           If DUNGEONNAME=$2 : TRIGGERLIST$=TRIGGERLIST$+" SERPENT TOWER 1"
      Else If DUNGEONNAME=$4 : TRIGGERLIST$=TRIGGERLIST$+" MOON TOWER 1"
      Else If DUNGEONNAME=$6 : TRIGGERLIST$=TRIGGERLIST$+" DRAGON TOWER 1"
      Else If DUNGEONNAME=$8 : TRIGGERLIST$=TRIGGERLIST$+" CHAOS TOWER 1"
      Else If DUNGEONNAME=$A : TRIGGERLIST$=TRIGGERLIST$+" ZENDIK'S TOWER 1"

      Else If DUNGEONNAME=$3 : TRIGGERLIST$=TRIGGERLIST$+" SERPENT TOWER 2"
      Else If DUNGEONNAME=$5 : TRIGGERLIST$=TRIGGERLIST$+" MOON TOWER 2"
      Else If DUNGEONNAME=$7 : TRIGGERLIST$=TRIGGERLIST$+" DRAGON TOWER 2"
      Else If DUNGEONNAME=$9 : TRIGGERLIST$=TRIGGERLIST$+" CHAOS TOWER 2"
      Else If DUNGEONNAME=$B : TRIGGERLIST$=TRIGGERLIST$+" ZENDIK'S TOWER 2"
      Else : TRIGGERLIST$=TRIGGERLIST$+" INVALID" : End If 
      TRIGGERLIST$=TRIGGERLIST$+" (2 PLAYER PAD)" : COORD=2
   Else If TRIGGERTYPE=$12 and BEXT=True
      TRIGGERLIST$=TRIGGERLIST$+"DUNGEON ENTRANCE"
      TRIGGERLIST$=TRIGGERLIST$+" (2 PLAYER PAD)" : COORD=2

      DUNGEONNAME= Fn TRIGGERF

           If DUNGEONNAME=$1 : TRIGGERLIST$=TRIGGERLIST$+" NEXT DUNGEON"
      Else If DUNGEONNAME=$0 : TRIGGERLIST$=TRIGGERLIST$+" PREVIOUS DUNGEON"
   Else : TRIGGERLIST$=TRIGGERLIST$+"INVALID " : End If 


   Else If TRIGGERTYPE=$14 and BEXT=False

      TRIGGERLIST$=TRIGGERLIST$+"TOWER ENTRANCE - "

      DUNGEONNAME= Fn TRIGGERF

           If DUNGEONNAME=$4 : TRIGGERLIST$=TRIGGERLIST$+"SERPENT TOWER"
      Else If DUNGEONNAME=$8 : TRIGGERLIST$=TRIGGERLIST$+"MOON TOWER"
      Else If DUNGEONNAME=$C : TRIGGERLIST$=TRIGGERLIST$+"DRAGON TOWER"
      Else If DUNGEONNAME=$10 : TRIGGERLIST$=TRIGGERLIST$+"CHAOS TOWER"
      Else If DUNGEONNAME=$14 : TRIGGERLIST$=TRIGGERLIST$+"ZENDIK'S TOWER"
   Else : TRIGGERLIST$=TRIGGERLIST$+"INVALID" : End If 

      FROM=DUNGEONNAME/$4

   '   LOC=0
   '   TRIGGERLIST$=TRIGGERLIST$+" X: "+Lzstr$( Fn KEEPSTARTX,2)
   '   TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$( Fn KEEPSTARTY,2)

   '   LOC=1
   '   TRIGGERLIST$=TRIGGERLIST$+"/ X: "+Lzstr$( Fn KEEPSTARTX,2) 
   '   TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$( Fn KEEPSTARTY,2)
   '   TRIGGERLIST$=TRIGGERLIST$+"FLOOR: "+Lzstr$(KEEPSTARTF,1) 
      TRIGGERLIST$=TRIGGERLIST$+" (MAIN PAD)" : COORD=2

   Else If TRIGGERTYPE=$14 and BEXT=True

      TRIGGERLIST$=TRIGGERLIST$+"DUNGEON ENTRANCE"
      TRIGGERLIST$=TRIGGERLIST$+"MAIN PAD"

      DUNGEONNAME= Fn TRIGGERF

      If DUNGEONNAME=$0 : TRIGGERLIST$=TRIGGERLIST$+"PREVIOUS DUNGEON"
      Else If DUNGEONNAME=$1 : TRIGGERLIST$=TRIGGERLIST$+"NEXT DUNGEON"
   Else : TRIGGERLIST$=TRIGGERLIST$+"INVALID" : End If 


      FROM=DUNGEONNAME
      LOC=0
      TRIGGERLIST$=TRIGGERLIST$+"X: "+Lzstr$( Fn DUNGEONSTARTX_EX,2)
      TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$( Fn DUNGEONSTARTY_EX,2)

      LOC=1
      TRIGGERLIST$=TRIGGERLIST$+"X: "+Lzstr$( Fn DUNGEONSTARTX_EX,2)
      TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$(DUNGEONSTARTY_EX,2)

      If DUNGEONNAME=1 : Rem - only give floor if "next dungeon"

         TRIGGERLIST$=TRIGGERLIST$+Hex$(DUNGEON)
         TRIGGERLIST$=TRIGGERLIST$+"FLOOR: "+Lzstr$( Fn DUNGEONSTARTF_EX,1)

      End If 

   Else If TRIGGERTYPE=$16 : TRIGGERLIST$=TRIGGERLIST$+"REMOVE" : COORD=1
   Else If TRIGGERTYPE=$18 : TRIGGERLIST$=TRIGGERLIST$+"CLOSE METAL DOOR" : COORD=1
   End If 

        If TRIGGERTYPE=$1A : TRIGGERLIST$=TRIGGERLIST$+"TOGGLE PILLAR" : COORD=1
   Else If TRIGGERTYPE=$1C : TRIGGERLIST$=TRIGGERLIST$+"CREATE PAD" : COORD=1
   Else If TRIGGERTYPE=$1E : TRIGGERLIST$=TRIGGERLIST$+"CREATE WALL" : COORD=1
   Else If TRIGGERTYPE=$20 : TRIGGERLIST$=TRIGGERLIST$+"MULTIPAD REMOVE" : COORD=4

   Else If TRIGGERTYPE=$22 : TRIGGERLIST$=TRIGGERLIST$+"MOVE PILLAR " : TRIGGERLIST$=TRIGGERLIST$+" N.E. TO N."

   Else If TRIGGERTYPE=$24 : TRIGGERLIST$=TRIGGERLIST$+"CREATE PILLAR" : COORD=1
   Else If TRIGGERTYPE=$26 and BEXT=False : TRIGGERLIST$=TRIGGERLIST$+"KEEP ENTRANCE" : TRIGGERLIST$=TRIGGERLIST$+" (2 PLAYER PAD)" : COORD=4
   Else If TRIGGERTYPE=$28 and BEXT=False : TRIGGERLIST$=TRIGGERLIST$+"KEEP ENTRANCE" : TRIGGERLIST$=TRIGGERLIST$+" (MAIN PAD)"

    '  TRIGGERLIST$=TRIGGERLIST$+"START POSITIONS"       
    '  LOC=0 
    '  TRIGGERLIST$=TRIGGERLIST$+"X: "+Lzstr$( Fn DUNGEONSTARTX,2) 
    '  TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$( Fn DUNGEONSTARTY,2)      
    '  LOC=1 
    '  TRIGGERLIST$=TRIGGERLIST$+"X: "+Lzstr$( Fn DUNGEONSTARTX,2) 
    '  TRIGGERLIST$=TRIGGERLIST$+" Y: "+Lzstr$( Fn DUNGEONSTARTY,2)

   End If 
   If TRIGGERTYPE=$2A : TRIGGERLIST$=TRIGGERLIST$+"FLASH TELEPORT" : COORD=3
   Else If TRIGGERTYPE=$2C : TRIGGERLIST$=TRIGGERLIST$+"ROTATE WALL" : COORD=1
   Else If TRIGGERTYPE=$2E : TRIGGERLIST$=TRIGGERLIST$+"TOGGLE WALL" : COORD=1

   Else If TRIGGERTYPE=$30 : TRIGGERLIST$=TRIGGERLIST$+"SPINNER 3"
   Else If TRIGGERTYPE=$32 : TRIGGERLIST$=TRIGGERLIST$+"CLICK TELEPORT" : COORD=3
   Else If TRIGGERTYPE=$34 : TRIGGERLIST$=TRIGGERLIST$+"CHANGE MAP DATA" : TRIGGERLIST$=TRIGGERLIST$+" DATA TYPE +2/8" : COORD=4
   Else If TRIGGERTYPE=$36 : TRIGGERLIST$=TRIGGERLIST$+"ROTATE WOOD WALL" : COORD=1
   Else If TRIGGERTYPE=$38 : TRIGGERLIST$=TRIGGERLIST$+"CHANGE MAP DATA" : TRIGGERLIST$=TRIGGERLIST$+" PARAMETER +1/4" : COORD=4
   Else If TRIGGERTYPE=$3A : TRIGGERLIST$=TRIGGERLIST$+"GAME COMPLETION"
   Else If TRIGGERTYPE=$3C : TRIGGERLIST$=TRIGGERLIST$+"SPECIAL CASE" : TRIGGERLIST$=TRIGGERLIST$+" - REMOVE PILLAR" : COORD=4

   Else If TRIGGERTYPE=$3E and BEXT=True : TRIGGERLIST$=TRIGGERLIST$+"SUMMON PAD " : COORD=0
   Else If TRIGGERTYPE=$40 and BEXT=True : TRIGGERLIST$=TRIGGERLIST$+"SPECIAL CASE" : TRIGGERLIST$=TRIGGERLIST$+" UNKNOWN" : COORD=0

   End If 

         TARGETX=-1
         TARGETY=-1
         TARGETF=-1
   If COORD=1 : Rem -- normal
      TARGETX= Fn TRIGGERX
      TARGETY= Fn TRIGGERY
      TRIGGERLIST$=TRIGGERLIST$+" X:"+Lzstr$(TARGETX,2)+" Y:"+Lzstr$(TARGETY,2)
   Else If COORD=4 : Rem -- as before, but a line up  
      TARGETX= Fn TRIGGERX
      TARGETY= Fn TRIGGERY
      TRIGGERLIST$=TRIGGERLIST$+" X:"+Lzstr$(TARGETX,2)+" Y:"+Lzstr$(TARGETY,2)
   Else If COORD=2 : Rem -- entrance pad location selector
      TARGETX= Fn TRIGGERX
      TARGETY= Fn TRIGGERY
   Else If COORD=3 : Rem -- as before, but a line up  
      TARGETX= Fn TRIGGERX
      TARGETY= Fn TRIGGERY
      TARGETF= Fn TRIGGERF
      TRIGGERLIST$=TRIGGERLIST$+" X:"+Lzstr$(TARGETX,2)+" Y:"+Lzstr$(TARGETY,2)
      TRIGGERLIST$=TRIGGERLIST$+" FLOOR:"+Lzstr$(TARGETF,1)
   Else If COORD=5
           TARGETX= Fn SPECIAL1X
           TARGETY= Fn SPECIAL1Y
           TRIGGERLIST$=TRIGGERLIST$+" X:"+Lzstr$(TARGETX,2)+" Y:"+Lzstr$(TARGETY,2)
   Else If COORD=6
           TARGETX= Fn SPECIAL2X
           TARGETY= Fn SPECIAL2Y
           TRIGGERLIST$=TRIGGERLIST$+" X:"+Lzstr$(TARGETX,2)+" Y:"+Lzstr$(TARGETY,2)
  End If 
      TRIGGERLIST$=TRIGGERLIST$+Chr$($A)
      If TRIGGERLIST$=Chr$($A)
         TRIGGERLIST$=TRIGGERLIST$+"INVALID "+Hex$(TRIGGERTYPE)+Chr$($A)
      End If 

    ' draw target icon if on same floor, and needed and option is on 
      If(TARGETF=-1 or TARGETF=EYEZ) and TARGETX<>-1 and TARGETY<>-1
            INX2=0+5+E+(TARGETX*16) : INY2=(TARGETY*8)+5+F
            OUTX2=INX2+15+1 : OUTY2=INY2+7+1
         If Btst(3,MARKERS)=True
            Ink 5 : Box INX2,INY2 To OUTX2,OUTY2
            Paste Bob INX2+2,INY2+1,301
         End If 
      End If 

    ' add to list if needed
      If Instr(MTRIGGERLIST$,TRIGGERLIST$)<1
         MTRIGGERLIST$=MTRIGGERLIST$+TRIGGERLIST$
      End If 

      End If : Rem ...  end  triggertype
      End If 
   End If 

   Return 


   _DRAWICON:

   ' draws a map icon at INX,INY
   ' original EE : FF 
   ' parts AA BB : CC DD

   Bob Off 1 : Bob Update 

   EE= Fn MAPDATA1
   FF= Fn MAPDATA2

   AA=Int(EE/16) : BB=EE mod 16
   CC=Int(FF/16) : DD=FF mod 16


   ' check  

   TYPE$="_TYPE"+Right$(Str$(FF mod 8),1)
   Gosub TYPE$


   Return 
   _DRAWLEVELICONS:

   ' draws a map icon at INX,INY
   ' original EE : FF 
   ' parts AA BB : CC DD

   Bob Off 1 : Bob Update 

   EE= Fn MAPDATA1
   FF= Fn MAPDATA2

   AA=Int(EE/16) : BB=EE mod 16
   CC=Int(FF/16) : DD=FF mod 16

   If DD=$4 or(DD=$6 and(BB mod 4=1 or Btst(2,BB)=True))
   Else : Return 
   End If 



   ' check  

   TYPE$="_TYPE"+Right$(Str$(FF mod 8),1)
   Gosub TYPE$


   Return 


   Rem --- Spaces 
   _TYPE0:

   If EE=0 Then Return : Rem -- empty space 
   Ink 1 : Bar INX,INY To OUTX,OUTY : Rem -- reserve space 

   Return 


   Rem --- Standard Walls 
   _TYPE1:

   Ink 4 : Bar INX,INY To OUTX,OUTY

   CO=14 : Rem outer
   OC=0 : Rem inter

   Rem --- pick out colours 


   Rem --- sign colours 

   If BB mod 4=0 : Rem -- shelf 
      CO=9
   Else If AA=0 and BB=1 : Rem - seed sign
      CO=14
   Else If AA=0 and BB=5 : Rem - serp sign
      CO=6
   Else If AA=0 and BB=9 : Rem - dragon sign
      CO=12
   Else If AA=0 and BB=13 : Rem - moon sign
      CO=7
   Else If AA=1 and BB=1 : Rem - chaos sign 
      CO=13
   Else If BB mod 4=1 : Rem -- remainders are wall text
      CO=2
   End If 

   Rem --- crystals / gems

   If BB mod 4=3 : Rem -- if slot 

      EE=(AA*16)+BB

      If EE>=$0 and EE<=$7 : Rem -- serpent 
         CO=6
      Else If EE>=$8 and EE<=$F : Rem -- chaos 
         CO=13
      Else If EE>=$10 and EE<=$17 : Rem -- dragon
         CO=12
      Else If EE>=$18 and EE<=$1F : Rem -- moon  
         CO=7
      Else If EE>=$20 and EE<=$27 : Rem -- grey  
         CO=3
      Else If EE>=$28 and EE<=$2F : Rem -- bluish
         CO=8
      Else If EE>=$30 and EE<=$37 : Rem -- brown 
         CO=9
      Else If EE>=$38 and EE<=$3F : Rem -- tan 
         CO=10
      Else If EE>=$40 and EE<=$FF : Rem -- everything else that isnt 
         CO=15
      End If 

      If BB=$3 or BB=$B : Rem --- if full
         OC=CO
      Else If BB=$7 or BB=$F : Rem -- if empty
         OC=0
      End If 

   End If 

   Rem --- switches / shooters

   If BB mod 4=2

      If(AA*16)+BB=>8 : Rem - if switch

         If BB=2 or BB=$A : Rem - switch unused  

            CO=14 : OC=14

         Else If BB=6 or BB=$E : Rem - switch used

            CO=2 : OC=2

      Else : CO=14 : OC=15 : End If 


      Else : Rem - shooter

         CO=0 : OC=0

      End If 
   End If 


   Rem --- Draw what is needed


   If BB mod 4=0 or BB mod 4=1
      Rem --- its a sign or shelf

      Rem -- draw north sign/shelf 
      If CC=8 or CC=12
         Ink CO : Bar INX+2,INY To OUTX-2,INY+3

         Rem -- with conceal
         If Btst(3,DD)=True and BB mod 4=0
            Ink 8 : Bar INX+3,INY To OUTX-3,INY+2
         End If 


         Rem -- draw east sign/shelf
      Else If CC=9 or CC=13
         Ink CO : Bar OUTX-6,INY+1 To OUTX,OUTY-1
         Rem -- with conceal
         If Btst(3,DD)=True and BB mod 4=0
            Ink 8 : Bar OUTX-5,INY+2 To OUTX,OUTY-2
         End If 



         Rem -- draw south sign/shelf 
      Else If CC=10 or CC=14
         Ink CO : Bar INX+2,OUTY-3 To OUTX-2,OUTY
         Rem -- with conceal  
         If Btst(3,DD)=True and BB mod 4=0
            Ink 8 : Bar INX+3,OUTY-2 To OUTX-3,OUTY
         End If 



         Rem -- draw west sign/shelf
      Else If CC=11 or CC=15
         Ink CO : Bar INX,INY+1 To INX+6,OUTY-1
         Rem -- with conceal
         If Btst(3,DD)=True and BB mod 4=0
            Ink 8 : Bar INX,INY+2 To INX+5,OUTY-2
         End If 


      End If 



   Else If BB mod 4=2 or BB mod 4=3
      Rem --- its a switch / slot  


      Rem -- draw north  
      If CC=8 or CC=12
         Ink CO : Bar INX+6,INY To INX+7,INY+2
         Ink CO : Bar INX+4,INY To INX+9,INY+1
         Ink OC : Turbo Draw INX+6,INY To INX+7,INY,OC

         Rem -- draw east 
      Else If CC=9 or CC=13

         Ink CO : Turbo Draw OUTX-5,INY+3 To OUTX,INY+3,CO
         Ink CO : Bar OUTX-3,INY+2 To OUTX,INY+4
         Ink OC : Turbo Draw OUTX-1,INY+3 To OUTX,INY+3,OC

         Rem -- draw south  
      Else If CC=10 or CC=14
         Ink CO : Bar INX+6,OUTY-2 To INX+7,OUTY
         Ink CO : Bar INX+4,OUTY-1 To INX+9,OUTY
         Ink OC : Turbo Draw INX+6,OUTY To INX+7,OUTY,OC


         Rem -- draw west 
      Else If CC=11 or CC=15

         Ink CO : Turbo Draw INX,INY+3 To INX+5,INY+3,CO
         Ink CO : Bar INX,INY+2 To INX+3,INY+4
         Ink OC : Turbo Draw INX,INY+3 To INX+1,INY+3,OC


      End If 


   End If 


   Return 
   _TYPE2:


   Rem - - this bit of code is relatively "smart" 
   Rem --- since it actually reads the binary data properly 
   Rem - - and can actually read potential (but never used) variations


   CO=9 : If Btst(0,CC)=True Then CO=12 : Rem Locked   



   Rem -- this converts a binary string and breaks it up  
   Rem - is there a better way to do this?  yes!


   Rem --- it then draws the appropriate door or wall(s)    


   If Btst(0,EE)=True and Btst(1,EE)=False : Rem  %%% WALL N        
      Turbo Draw INX,INY To OUTX,INY,9 : Rem N
   End If 

   If Btst(2,EE)=True and Btst(3,EE)=False : Rem  %%% WALL E              
      Ink 9,0 : Bar OUTX-1,INY To OUTX,OUTY : Rem E          
   End If 

   If Btst(4,EE)=True and Btst(5,EE)=False : Rem  %%% WALL S          
      Turbo Draw INX,OUTY To OUTX,OUTY,9 : Rem S  
   End If 

   If Btst(6,EE)=True and Btst(7,EE)=False : Rem  %%% WALL W          
      Ink 9,0 : Bar INX,INY To INX+1,OUTY : Rem W          
   End If 



   If Btst(0,EE)=False and Btst(1,EE)=True : Rem  %%% OPEN DOOR N           
      Turbo Draw INX,INY To OUTX,INY,CO : Rem N  
      Turbo Draw INX+4,INY To OUTX-4,INY,O
   End If 

   If Btst(2,EE)=False and Btst(3,EE)=True : Rem  %%% OPEN DOOR E               
      Ink CO,0 : Bar OUTX-1,INY To OUTX,OUTY : Rem E        
      Ink 0,0 : Bar OUTX-1,INY+2 To OUTX,OUTY-2 : Rem E          
   End If 

   If Btst(4,EE)=False and Btst(5,EE)=True : Rem  %%% OPEN DOOR S           
      Turbo Draw INX,OUTY To OUTX,OUTY,CO : Rem S    
      Turbo Draw INX+4,OUTY To OUTX-4,OUTY,0 : Rem S  
   End If 

   If Btst(6,EE)=False and Btst(7,EE)=True : Rem  %%% OPEN DOOR W           
      Ink CO : Bar INX,INY To INX+1,OUTY : Rem W        
      Ink 0,0 : Bar INX,INY+2 To INX+1,OUTY-2 : Rem S    
   End If 


   If Btst(0,EE)=True and Btst(1,EE)=True : Rem  %%% CLOSED DOOR N           
      Turbo Draw INX,INY To OUTX,INY,CO : Rem N  
      Turbo Draw INX+4,INY To OUTX-4,INY,11
   End If 

   If Btst(2,EE)=True and Btst(3,EE)=True : Rem  %%% CLOSED DOOR E               
      Ink CO,0 : Bar OUTX-1,INY To OUTX,OUTY : Rem E        
      Ink 11,0 : Bar OUTX-1,INY+2 To OUTX,OUTY-2 : Rem E        
   End If 

   If Btst(4,EE)=True and Btst(5,EE)=True : Rem  %%% CLOSED DOOR S         
      Turbo Draw INX,OUTY To OUTX,OUTY,CO : Rem S    
      Turbo Draw INX+4,OUTY To OUTX-4,OUTY,11 : Rem S    
   End If 

   If Btst(6,EE)=True and Btst(7,EE)=True : Rem  %%% CLOSED DOOR W           
      Ink CO,0 : Bar INX,INY To INX+1,OUTY : Rem W        
      Ink 11,0 : Bar INX,INY+2 To INX+1,OUTY-2 : Rem S  
   End If 


   Return 

   _TYPE3:

   If AA=0 and BB=0 : Rem --- Bed

      Ink 5 : Bar INX,INY To OUTX,OUTY
      Ink 0,5 : Text INX+4,INY+5,"B"

   Else If AA=0 and BB=1 : Rem --- pillar 

      Ink 4 : Bar INX+4,INY+2 To OUTX-4,OUTY-2

   Else 
      Ink 5 : Bar INX,INY To OUTX,OUTY
      Ink 0,5 : Text INX+4,INY+5,Right$(Str$(DD),1)
   End If 


   Return 

   Rem --- Stairs 
   _TYPE4:

   If BB mod 2=0 : Rem --- stairs up
      CO=3
   Else If BB mod 2=1 : Rem --- stairs down
      CO=2
   Else 
      CO=15
   End If 

   If BB mod 8=0 or BB mod 8=1 : Rem -- north 

      Ink CO : Turbo Draw INX,INY+0 To OUTX,INY+0,CO
      Turbo Draw INX,INY+2 To OUTX,INY+2,CO
      Turbo Draw INX,INY+4 To OUTX,INY+4,CO

      Ink 1 : Bar INX,INY To INX+1,OUTY
      Bar OUTX,INY To OUTX+1,OUTY
      Turbo Draw INX,OUTY To OUTX,OUTY,1

      Bar INX,INY To INX+3,INY+1
      Bar OUTX-2,INY To OUTX,INY+1


   Else If BB mod 8=4 or BB mod 8=5 : Rem -- south 

      Ink CO : Turbo Draw INX,INY+2 To OUTX,INY+2,CO
      Turbo Draw INX,INY+4 To OUTX,INY+4,CO
      Turbo Draw INX,INY+6 To OUTX,INY+6,CO

      Ink 1 : Bar INX,INY To INX+1,OUTY
      Bar OUTX,INY To OUTX+1,OUTY
      Turbo Draw INX,INY To OUTX,INY,1

      Bar INX,OUTY-1 To INX+3,OUTY
      Bar OUTX-2,OUTY-1 To OUTX,OUTY


   Else If BB mod 8=2 or BB mod 8=3 : Rem -- east  


      Ink CO : Bar INX+5,INY To INX+6,OUTY
      Bar INX+9,INY To INX+10,OUTY
      Bar INX+13,INY To INX+14,OUTY

      Ink 1 : Turbo Draw INX,INY To OUTX,INY,1
      Turbo Draw INX,OUTY To OUTX,OUTY,1
      Bar INX,INY To INX+2,OUTY

      Bar OUTX-3,INY To OUTX,INY+1
      Bar OUTX-1,OUTY-1 To OUTX,OUTY


   Else If BB mod 8=6 or BB mod 8=7 : Rem -- west


      Ink CO : Bar INX+0,INY To INX+1,OUTY
      Bar INX+4,INY To INX+5,OUTY
      Bar INX+8,INY To INX+9,OUTY

      Ink 1 : Turbo Draw INX,INY To OUTX,INY,1
      Turbo Draw INX,OUTY To OUTX,OUTY,1
      Bar OUTX-2,INY To OUTX,OUTY

      Bar INX,INY To INX+3,INY+1
      Bar INX,OUTY-1 To INX+3,OUTY
   End If 


   If AA<>0 or BB>8
      Ink 13 : Bar INX,INY To OUTX,OUTY
      Ink 0,13 : Text INX+4,INY+5,Right$(Str$(DD),1)
   End If 



   Return 

   Rem --- metal doors
   _TYPE5:


   ' door open or closed  

   OPEN=Btst(0,BB)+1

   ' normal metal door or portcullis

   If Btst(1,BB)=False : CO=4
   Else If Btst(1,BB)=True : CO=2
   End If 


   If CC mod 4<>0
      LOCKED=1
   Else 
      LOCKED=0
   End If 


   If AA=0 : Rem MAGELOCKED 
      LOCK=3
   Else If AA=1 : Rem BRONZE LOCK  
      LOCK=9
   Else If AA=2 : Rem IRON LOCK    

   If LIGHT=0 : LOCK=1 : Else : LOCK=2 : End If 
   Else If AA=3 : Rem SERPENT LOCK 
      LOCK=6
   Else If AA=4 : Rem CHAOS LOCK   
      LOCK=13
   Else If AA=5 : Rem DRAGON LOCK    
      LOCK=12
   Else If AA=6 : Rem MOON LOCK
      LOCK=7
   Else If AA=7 : Rem CHROMATIC LOCK   
      LOCK=14
   Else If AA>=8 : Rem INVALID LOCK 
      LOCK=15
   Else LOCK=CO
   End If 



   If BB>=8
   If LIGHT=0 : LOCK=0 : Else : LOCK=15 : End If 
      LOCKED=1

   End If 


   Rem -- draw door 

   Rem --- north south
   If(BB=>0 and BB<=3) or(BB=>8 and BB<=11)

      Ink CO : Bar INX,INY+2 To OUTX,OUTY-2

      Rem --- east west
   Else If(BB=>4 and BB<=7) or(BB=>12 and BB<=15)

      Ink CO : Bar INX+4,INY To OUTX-5,OUTY

   End If 

   Rem ---- draw lock 


   If LOCKED=1
      Rem --- north south
      If(BB=>0 and BB<=3) or(BB=>8 and BB<=11)

         Turbo Draw INX,INY+3 To OUTX,OUTY-3,LOCK

         Rem --- east west
      Else If(BB=>4 and BB<=7) or(BB=>12 and BB<=15)

         Ink LOCK : Bar INX+6,INY To OUTX-7,OUTY

      End If 

   End If 

   Rem --- open doors 

   If OPEN=1

      Rem --- north south
      If(BB=>0 and BB<=3) or(BB=>8 and BB<=11)

         Ink 0 : Bar INX+4,INY+2 To OUTX-4,OUTY-2

         Rem --- east west
      Else If(BB=>4 and BB<=7) or(BB=>12 and BB<=15)

         Ink 0 : Bar INX+4,INY+2 To OUTX-5,OUTY-2

      End If 

   End If 

   Return 

   Rem --- Special locations
   _TYPE6:

   If BB mod 8=0 : Rem -- blank / fizzle  

      Ink 8,0 : Text INX+4,INY+5,"F"

   Else If BB mod 8=1 : Rem -- floor hole

   If LIGHT=0 : Ink 2 : Else : Ink 15 : End If 
      Bar INX+2,INY+1 To OUTX-2,OUTY-1

   Else If BB mod 8=2 : Rem -- green pad 

      Ink 6 : Bar INX+2,INY+1 To OUTX-2,OUTY-1

   Else If BB mod 8=3 : Rem -- blank space 

   If LIGHT=0 : Ink 1 : Else : Ink 3 : End If 
      Bar INX+2,INY+1 To OUTX-2,OUTY-1

   End If 

   If BB mod 8=4 : Rem -- ceiling hole fizzle 

      Ink 8,0 : Text INX+4,INY+5,"F"

   If LIGHT=0 : CO2=1 : Else : CO2=2 : End If 

      Ink CO2 : Box INX+2,INY+1 To OUTX-2,OUTY-1
      Ink CO2 : Box INX+3,INY+1 To OUTX-3,OUTY-1
      Turbo Draw INX+4,INY+1 To OUTX-5,INY+1,8
      Turbo Draw INX+5,OUTY-1 To INX+5,OUTY-1,8

   Else If BB mod 8=5 : Rem -- floor & ceiling holes 

   If LIGHT=0 : Ink 2 : CO2=1 : Else : Ink 15 : CO2=2 : End If 

      Bar INX+2,INY+1 To OUTX-2,OUTY-1
      Ink CO2 : Box INX+2,INY+1 To OUTX-2,OUTY-1
      Ink CO2 : Box INX+3,INY+1 To OUTX-3,OUTY-1

   Else If BB mod 8=6 : Rem -- ceiling hole & green pad  

      Ink 6 : Bar INX+2,INY+1 To OUTX-2,OUTY-1
      Ink 1 : Box INX+2,INY+1 To OUTX-2,OUTY-1
      Ink 1 : Box INX+3,INY+1 To OUTX-3,OUTY-1

   Else If BB mod 8=7 : Rem -- ceiling hole

      Ink 1 : Box INX+2,INY+1 To OUTX-2,OUTY-1
      Ink 1 : Box INX+3,INY+1 To OUTX-3,OUTY-1

   End If 

   Return 

   Rem --- Magic locations
   _TYPE7:

   If BB mod 4=0 : Rem -- clear 
      CO=7 : OC=0

   Else If BB mod 4=1 : Rem -- firepath
      CO=12 : OC=0

   Else If BB mod 4=2 : Rem -- mindrock
      CO=8 : OC=7

   Else If BB mod 4=3 : Rem -- formwall
      CO=3 : OC=8

   End If 

   Ink CO : Bar INX,INY To OUTX,OUTY
   Ink OC : Box INX,INY To OUTX,OUTY
   Ink OC : Box INX+1,INY To OUTX-1,OUTY

   Return 


   _WALLDESC:

   ' set x/y as cursor 1

   X=XXX1
   Y=YYY1
   Z=ZZZ1

   ' If PLACEMODE=3 Then Return 

   For FISH=0 To 9
      OPTION(FISH)=False
   Next FISH

   For FISH=10 To 21
      LINE$(FISH)=""
      OPTION(FISH)=False
   Next FISH

   OPTION(10)=True


   ' draws a map icon at INX,INY
   ' original EE : FF 
   ' parts AA BB : CC DD

   EE= Fn MAPDATA1
   FF= Fn MAPDATA2

   AA=Int(EE/16) : BB=EE mod 16
   CC=Int(FF/16) : DD=FF mod 16


   ' check  

   TYPE$="_DESC"+Right$(Str$(FF mod 8),1)
   Gosub TYPE$

   Return 

   _DESC0:

   LINE$(10)="SPACE"
   OPTION(10)=True


   Rem    OPTION(11)=True 


   Return 


   _DESC1:

   OPTION(11)=True



   LINE$(10)="STONE WALL"


   If CC=>8 : Rem - has something on it

      OPTION(12)=True

      If CC=$8 or CC=$C : Rem - north
         LINE$(11)="FACING NORTH         "
      Else If CC=$9 or CC=$D : Rem - east 
         LINE$(11)="FACING EAST          "
      Else If CC=$A or CC=$E : Rem - south
         LINE$(11)="FACING SOUTH         "
      Else If CC=$B or CC=$F : Rem - west 
         LINE$(11)="FACING WEST          "
      End If 


      If BB mod 4=0 : Rem Shelf
         LINE$(12)="SHELF         "

      If Btst(3,DD)=True : TEMP$="ON" : Else TEMP$="OFF" : End If 
         LINE$(13)="CONCEAL: "+TEMP$
         OPTION(13)=True

      Else If BB mod 4=1 : Rem Sign 

         Rem --- sign colours 

         LINE$(12)="SIGN"
         OPTION(13)=True

         If AA=0 and BB=1 : Rem - seed sign
            LINE$(13)="GENERATED COLOUR"
         Else If AA=0 and BB=5 : Rem - serp sign
            LINE$(13)="SERPENT        "
         Else If AA=0 and BB=9 : Rem - dragon sign
            LINE$(13)="DRAGON       "
         Else If AA=0 and BB=13 : Rem - moon sign
            LINE$(13)="MOON          "
         Else If AA=1 and BB=1 : Rem - chaos sign 
            LINE$(13)="CHAOS         "
         Else If BB mod 4=1 : Rem -- remainders are wall text

            WALLSCROLL=(((AA*16)+BB)/4)-4
            If DUNGEON=0 and GAME=6 : WALLSCROLL=WALLSCROLL
            Else If DUNGEON=1 and GAME=6 : WALLSCROLL=WALLSCROLL+21
            Else If DUNGEON=2 and GAME=6 : WALLSCROLL=WALLSCROLL+33
            Else If DUNGEON=3 and GAME=6 : WALLSCROLL=WALLSCROLL+41
            Else If DUNGEON=4 and GAME=6 : WALLSCROLL=WALLSCROLL+49
            Else If DUNGEON=5 and GAME=6 : WALLSCROLL=WALLSCROLL+59
            End If 

            LINE$(13)="SCROLL: "+Lzstr$(WALLSCROLL,2)
            LINE$(15)="EDIT TEXT"
            OPTION(15)=True
         End If 


      Else If BB mod 4=2 : Rem Switch 

         OPTION(13)=True

         If(AA*16)+BB>=$7
            LINE$(12)="SWITCH"

            If BB=$2 or BB=$A : Rem switch unused
               LINE$(14)="LIT"
            Else If BB=$6 or BB=$E : Rem switch used
               LINE$(14)="DIM"
            End If 

            OPTION(14)=True

            EE=(AA*16)+BB
            SWITCH=(EE/8)-0
            LINE$(13)="REFERENCE:"+Str$(SWITCH)

            ' now lets talk about what the switch does 

            SWITCHTYPE= Fn SWITCHTYPE
            If SWITCHTYPE=0 : RESULT$="NO EFFECT"
            Else If SWITCHTYPE=2 : RESULT$="REMOVE"
            Else If SWITCHTYPE=4 : RESULT$="TOGGLE WALL"
            Else If SWITCHTYPE=6 : RESULT$="OPEN METAL DOOR"
            Else If SWITCHTYPE=8 : RESULT$="ROTATE WALL"
            Else If SWITCHTYPE=10 : RESULT$="TOGGLE PILLAR"
            Else If SWITCHTYPE=12 : RESULT$="PLACE PILLAR"
            Else If SWITCHTYPE=14 : RESULT$="ROTATE WOODEN"
            Else RESULT$="INVALID "+Hex$(SWITCHTYPE)
            End If 

            LINE$(16)=RESULT$
            LINE$(17)="X: "+Right$(Hex$( Fn SWITCHX+$100),2)+" Y: "+Right$(Hex$( Fn SWITCHY+$100),2)
            OPTION(16)=True
            OPTION(17)=True




         Else : LINE$(12)="SWITCH"
         LINE$(13)="EMPTY" : End If 
      End If 
      If BB mod 4=3 : Rem crystal hole 

         LINE$(12)="SOCKET"
         OPTION(13)=True
         OPTION(14)=True

         EE=(AA*16)+BB

         If EE>=$0 and EE<=$7 : Rem -- serpent 
            LINE$(13)="SERPENT"

            If LOOKUPHARDCODE_SERP1<>0 and DUNGEON=5
               LINE$(16)="REMOVE"
               LINE$(17)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT1X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT1Y),2)

               OPTION(17)=True
               OPTION(20)=False

            End If 

         Else If EE>=$8 and EE<=$F : Rem -- chaos 
            LINE$(13)="CHAOS"
            EFFECTED1=LOOKUPHARDCODE_CHAOS1

            If LOOKUPHARDCODE_CHAOS1<>0 and DUNGEON=5
               LINE$(16)="REMOVE"
               LINE$(17)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT6X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT6Y),2)

               OPTION(17)=True
               OPTION(20)=False

            End If 



         Else If EE>=$10 and EE<=$17 : Rem -- dragon
            LINE$(13)="DRAGON"

            If LOOKUPHARDCODE_DRAG1<>0 and DUNGEON=5
               LINE$(16)="REMOVE"
               LINE$(17)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT4X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT4Y),2)
               OPTION(17)=True
            End If 

            If LOOKUPHARDCODE_DRAG2<>0 and DUNGEON=5
               LINE$(19)="REMOVE"
               LINE$(20)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT5X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT5Y),2)
               OPTION(20)=True
            End If 


         Else If EE>=$18 and EE<=$1F : Rem -- moon  

            LINE$(13)="MOON"

            If LOOKUPHARDCODE_MOON1<>0 and DUNGEON=5
               LINE$(16)="REMOVE"
               LINE$(17)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT2X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT2Y),2)
               OPTION(17)=True
            End If 

            If LOOKUPHARDCODE_MOON2<>0 and DUNGEON=5
               LINE$(19)="REMOVE"
               LINE$(20)="X: "+Right$(Hex$($100+ Fn CRYSTALEFFECT3X),2)+" Y: "+Right$(Hex$($100+ Fn CRYSTALEFFECT3Y),2)
               OPTION(20)=True
            End If 



         Else If EE>=$20 and EE<=$27 : Rem -- grey  
            LINE$(13)="GREY"

         Else If EE>=$28 and EE<=$2F : Rem -- bluish
            LINE$(13)="BLUISH"

            LINE$(16)="TELEPORT 1" : LOC=0 : LINE$(17)="X: "+Right$(Hex$($100+ Fn GEMBLUX),2)+" Y: "+Right$(Hex$($100+ Fn GEMBLUY),2)
            LINE$(19)="TELEPORT 2" : LOC=1 : LINE$(20)="X: "+Right$(Hex$($100+ Fn GEMBLUX),2)+" Y: "+Right$(Hex$($100+ Fn GEMBLUY),2)
            OPTION(17)=True : OPTION(20)=True

         Else If EE>=$30 and EE<=$37 : Rem -- brown 
            LINE$(13)="BROWN"

         Else If EE>=$38 and EE<=$3F : Rem -- tan 
            LINE$(13)="TAN"

            LINE$(16)="TELEPORT 1" : LOC=0 : LINE$(17)="X: "+Right$(Hex$($100+ Fn GEMTANX),2)+" Y: "+Right$(Hex$($100+ Fn GEMTANY),2)
            LINE$(19)="TELEPORT 2" : LOC=1 : LINE$(20)="X: "+Right$(Hex$($100+ Fn GEMTANX),2)+" Y: "+Right$(Hex$($100+ Fn GEMTANY),2)
            OPTION(17)=True : OPTION(20)=True


         Else If EE>=$40 and EE<=$FF : Rem -- everything else that isnt 
            LINE$(13)="INVALID"


         End If 


         If BB=$3 or BB=$B : Rem --- if full
            LINE$(14)="FULL"

         Else If BB=$7 or BB=$F : Rem -- if empty

            LINE$(14)="EMPTY"
         End If 


      End If 

   Else 
      LINE$(11)="PLAIN"

   End If 

   Return 


   Return 

   _DESC2:
   LINE$(10)="WOODEN STRUCTURE  "

   E=(AA*16)+BB

   LINE$(11)="N: "
   LINE$(12)="E: "
   LINE$(13)="S: "
   LINE$(14)="W: "

   For COT=0 To 3
      BOT=COT*2

      If Btst(BOT,EE)=False and Btst(BOT+1,EE)=False : Rem  %%% NOTHING     
         LINE$(11+COT)=LINE$(11+COT)+"NOTHING     "

      Else If Btst(BOT,EE)=True and Btst(BOT+1,EE)=False : Rem  %%% WALL    
         LINE$(11+COT)=LINE$(11+COT)+"WOOD WALL   "

      Else If Btst(BOT,EE)=False and Btst(BOT+1,EE)=True : Rem  %%% OPEN DOOR     
         LINE$(11+COT)=LINE$(11+COT)+"OPEN DOOR   "

      Else If Btst(BOT,EE)=True and Btst(BOT+1,EE)=True : Rem  %%% CLOSED    
         LINE$(11+COT)=LINE$(11+COT)+"CLOSED DOOR "

      End If 
   Next COT

   If Btst(0,CC)=True
      LINE$(15)="LOCKED"
   Else 
      LINE$(15)="NO LOCK"
   End If 

   For COT=10 To 15
      OPTION(COT)=True
   Next COT




   Return 

   _DESC3:

   LINE$(10)="MISC. LOCATION"

   If AA=0 and BB=1
      LINE$(11)="PILLAR"
   Else If AA=0 and BB=0
      LINE$(11)="BED"
   Else 
      LINE$(11)="INVALID"
   End If 

   OPTION(11)=True
   Return 


   _DESC4:
   LINE$(10)="STAIRS"
   OPTION(11)=True
   OPTION(12)=True


   If BB=>8 or AA<>0

      LINE$(11)="INVALID STAIRS"
      LINE$(12)=""
      OPTION(12)=False


   Else If BB mod 2=0 : Rem --- stairs up

      LINE$(11)="UPWARDS"

   Else If BB mod 2=1 : Rem --- stairs down

      LINE$(11)="DOWNWARDS"

   End If 

   OPTION(11)=True


   If AA=0
      If BB>=0 and BB<=1 : LINE$(12)="FACING NORTH "
      Else If BB>=2 and BB<=3 : LINE$(12)="FACING EAST  "
      Else If BB>=4 and BB<=5 : LINE$(12)="FACING SOUTH "
      Else If BB>=6 and BB<=7 : LINE$(12)="FACING WEST  "
      Else : LINE$(12)=""
   End If : End If 

   Return 

   _DESC5:
   LINE$(10)="METAL DOOR       "
   OPTION(11)=True
   OPTION(12)=True
   OPTION(13)=True
   OPTION(14)=True



   If BB mod 4=0 or BB mod 4=1
      LINE$(11)="REGULAR        "
   Else If BB mod 4=2 or BB mod 4=3
      LINE$(11)="PORTCULLIS     "
   End If 


   If BB mod 2=0
      LINE$(13)="OPEN          "
   Else If BB mod 2=1
      LINE$(13)="CLOSED        "
   End If 


   If(BB=>0 and BB<=3) or(BB=>8 and BB<=11)
      LINE$(12)="NORTH / SOUTH  "
   Else If(BB=>4 and BB<=7) or(BB=>12 and BB<=15)
      LINE$(12)="EAST / WEST    "
   End If 


   If CC mod 4=1
      LINE$(14)="LOCKED"
      LOCKED=1
      OPTION(15)=True

   Else If AA=0
      LINE$(14)="UNLOCKED"
      LINE$(15)=""
      LOCKED=0
   Else If AA>0 and(CC mod 4<>1)
      LINE$(14)="TRICK LOCK"
      OPTION(15)=True
   End If 


   If AA=0 and LOCKED=1 : LINE$(15)="MAGELOCKED"
   Else If AA=1 : LINE$(15)="BRONZE LOCK"
   Else If AA=2 : LINE$(15)="IRON LOCK"
   Else If AA=3 : LINE$(15)="SERPENT LOCK"
   Else If AA=4 : LINE$(15)="CHAOS LOCK"
   Else If AA=5 : LINE$(15)="DRAGON LOCK"
   Else If AA=6 : LINE$(15)="MOON LOCK"
   Else If AA=7 : LINE$(15)="CHROMATIC LOCK"
   Else If AA>=8 : LINE$(15)="INVALID LOCK"
   End If 


   If BB>=8
      LINE$(14)="LOCKED"
      LINE$(15)="VOID LOCK"
      OPTION(15)=True
   End If 

   Return 



   _DESC6:
   LINE$(10)="HOLE / TRIGGER   "


   If BB mod 4=0 : Rem -- blank / fizzle  
      LINE$(11)="SPELLS FIZZLE          "

   Else If BB mod 4=1 : Rem -- floor hole
      LINE$(11)="FLOOR HOLE     "

   Else If BB mod 4=2 : Rem -- green pad 
      LINE$(11)="GREEN PAD               "

   Else If BB mod 4=3 : Rem -- blank space 
      LINE$(11)="INVISIBLE PAD    "

   End If 

   OPTION(11)=True


   If Btst(2,BB)=True
      LINE$(12)="CEILING HOLE"
   Else If Btst(2,BB)=False
      LINE$(12)="NOTHING "
   End If 

   OPTION(12)=True

   If BB mod 4=0 or BB mod 4=1 Then Return 


   DDDD=(AA*16)+BB : TRIGGER=DDDD/8

   If TRIGGER<>0
      LINE$(13)="REFERENCE:"+Str$(TRIGGER)
Else : LINE$(13)="NO TRIGGER" : End If 
   OPTION(13)=True

   ' now lets talk about what the switch does 

   TRIGGERTYPE= Fn TRIGGERTYPE : COORD=0 : RESULT=15

   LINE$(RESULT)="INVALID "+Hex$(TRIGGERTYPE)

   If TRIGGERTYPE<=$3C and Btst(0,TRIGGERTYPE)=False : LINE$(RESULT)="VALID" : End If 

   If TRIGGERTYPE=$0 : LINE$(RESULT)="NO EVENT"
   Else If TRIGGERTYPE=$2 : LINE$(RESULT)="SPINNER 1 (180)"
   Else If TRIGGERTYPE=$4 : LINE$(RESULT)="SPINNER 2"

   Else If TRIGGERTYPE=$6 : LINE$(RESULT)="OPEN METAL DOOR" : COORD=1

   Else If TRIGGERTYPE=$8 : LINE$(RESULT)="VIVIFY MACHINE" : LINE$(RESULT+1)="EXTERNAL"
   Else If TRIGGERTYPE=$A : LINE$(RESULT)="VIVIFY MACHINE" : LINE$(RESULT+1)="INTERNAL"

   Else If TRIGGERTYPE=$C : LINE$(RESULT)="WOOD DOOR TRAP" : LINE$(RESULT+1)="RIGHT"
      LINE$(RESULT+2)="X: "+Right$(Hex$( Fn SPECIAL1X+$100),2)+" Y: "+Right$(Hex$( Fn SPECIAL1Y+$100),2) : OPTION(RESULT+2)=True

   Else If TRIGGERTYPE=$E : LINE$(RESULT)="WOOD DOOR TRAP" : LINE$(RESULT+1)="LEFT"
      LINE$(RESULT+2)="X: "+Right$(Hex$( Fn SPECIAL2X+$100),2)+" Y: "+Right$(Hex$( Fn SPECIAL2Y+$100),2) : OPTION(RESULT+2)=True
   End If 

   If TRIGGERTYPE=$10 : LINE$(RESULT)="TRADER DOOR"


   Else If TRIGGERTYPE=$12 and BEXT=False

      LINE$(RESULT)="TOWER ENTRANCE"
      LINE$(RESULT+1)="2 PLAYER PAD" : COORD=2

      DUNGEONNAME= Fn TRIGGERF


      If DUNGEONNAME=$2 : LINE$(RESULT+2)="SERPENT TOWER 1"
      Else If DUNGEONNAME=$4 : LINE$(RESULT+2)="MOON TOWER 1"
      Else If DUNGEONNAME=$6 : LINE$(RESULT+2)="DRAGON TOWER 1"
      Else If DUNGEONNAME=$8 : LINE$(RESULT+2)="CHAOS TOWER 1"
      Else If DUNGEONNAME=$A : LINE$(RESULT+2)="ZENDIK'S TOWER 1"

      Else If DUNGEONNAME=$3 : LINE$(RESULT+2)="SERPENT TOWER 2"
      Else If DUNGEONNAME=$5 : LINE$(RESULT+2)="MOON TOWER 2"
      Else If DUNGEONNAME=$7 : LINE$(RESULT+2)="DRAGON TOWER 2"
      Else If DUNGEONNAME=$9 : LINE$(RESULT+2)="CHAOS TOWER 2"
      Else If DUNGEONNAME=$B : LINE$(RESULT+2)="ZENDIK'S TOWER 2"
   Else : LINE$(RESULT+2)="INVALID" : End If : OPTION(RESULT+2)=True

   Else If TRIGGERTYPE=$12 and BEXT=True
      LINE$(RESULT)="DUNGEON ENTRANCE"
      LINE$(RESULT+1)="2 PLAYER PAD" : COORD=2

      DUNGEONNAME= Fn TRIGGERF

      If DUNGEONNAME=$1 : LINE$(RESULT+2)="NEXT DUNGEON"
      Else If DUNGEONNAME=$0 : LINE$(RESULT+2)="PREVIOUS DUNGEON"
   Else : LINE$(RESULT+2)="INVALID" : End If : OPTION(RESULT+2)=True


   Else If TRIGGERTYPE=$14 and BEXT=False

      LINE$(RESULT)="TOWER ENTRANCE"
      LINE$(RESULT+1)="MAIN PAD"

      DUNGEONNAME= Fn TRIGGERF

      If DUNGEONNAME=$4 : LINE$(RESULT+2)="SERPENT TOWER"
      Else If DUNGEONNAME=$8 : LINE$(RESULT+2)="MOON TOWER"
      Else If DUNGEONNAME=$C : LINE$(RESULT+2)="DRAGON TOWER"
      Else If DUNGEONNAME=$10 : LINE$(RESULT+2)="CHAOS TOWER"
      Else If DUNGEONNAME=$14 : LINE$(RESULT+2)="ZENDIK'S TOWER"
   Else : LINE$(RESULT+2)="INVALID" : End If : OPTION(RESULT+2)=True

      FROM=DUNGEONNAME/$4

      LOC=0 : OPTION(RESULT+4)=True
      LINE$(RESULT+4)="X: "+Right$(Hex$($100+ Fn KEEPSTARTX),2)
      LINE$(RESULT+4)=LINE$(RESULT+4)+" Y: "+Right$(Hex$($100+ Fn KEEPSTARTY),2)

      LOC=1 : OPTION(RESULT+5)=True
      LINE$(RESULT+5)="X: "+Right$(Hex$($100+ Fn KEEPSTARTX),2)
      LINE$(RESULT+5)=LINE$(RESULT+5)+" Y: "+Right$(Hex$($100+ Fn KEEPSTARTY),2)

      OPTION(RESULT+6)=False
      LINE$(RESULT+6)="FLOOR: "+Right$(Hex$($100+ Fn KEEPSTARTF),1)



   Else If TRIGGERTYPE=$14 and BEXT=True

      LINE$(RESULT)="DUNGEON ENTRANCE"
      LINE$(RESULT+1)="MAIN PAD"

      DUNGEONNAME= Fn TRIGGERF

      If DUNGEONNAME=$0 : LINE$(RESULT+2)="PREVIOUS DUNGEON"
      Else If DUNGEONNAME=$1 : LINE$(RESULT+2)="NEXT DUNGEON"
   Else : LINE$(RESULT+2)="INVALID" : End If : OPTION(RESULT+2)=True


      FROM=DUNGEONNAME

      LOC=0 : OPTION(RESULT+4)=True
      LINE$(RESULT+4)="X: "+Right$(Hex$($100+ Fn DUNGEONSTARTX_EX),2)
      LINE$(RESULT+4)=LINE$(RESULT+4)+" Y: "+Right$(Hex$($100+ Fn DUNGEONSTARTY_EX),2)

      LOC=1 : OPTION(RESULT+5)=True
      LINE$(RESULT+5)="X: "+Right$(Hex$($100+ Fn DUNGEONSTARTX_EX),2)
      LINE$(RESULT+5)=LINE$(RESULT+5)+" Y: "+Right$(Hex$($100+ Fn DUNGEONSTARTY_EX),2)

      If DUNGEONNAME=1 : Rem - only give floor if "next dungeon"

         LINE$(RESULT+6)=Hex$(DUNGEON)
         OPTION(RESULT+6)=True
         LINE$(RESULT+6)="FLOOR: "+Right$(Hex$($100+ Fn DUNGEONSTARTF_EX),1)

      End If 

   Else If TRIGGERTYPE=$16 : LINE$(RESULT)="REMOVE" : COORD=1
   Else If TRIGGERTYPE=$18 : LINE$(RESULT)="CLOSE METAL DOOR" : COORD=1
   End If 

   If TRIGGERTYPE=$1A : LINE$(RESULT)="TOGGLE PILLAR" : COORD=1
   Else If TRIGGERTYPE=$1C : LINE$(RESULT)="CREATE PAD" : COORD=1
   Else If TRIGGERTYPE=$1E : LINE$(RESULT)="CREATE WALL" : COORD=1
   Else If TRIGGERTYPE=$20 : LINE$(RESULT)="MULTIPAD REMOVE" : COORD=4

   Else If TRIGGERTYPE=$22 : LINE$(RESULT)="MOVE PILLAR " : LINE$(RESULT+1)="N.E. TO N."

   Else If TRIGGERTYPE=$24 : LINE$(RESULT)="CREATE PILLAR" : COORD=1
   Else If TRIGGERTYPE=$26 and BEXT=False : LINE$(RESULT)="KEEP ENTRANCE" : LINE$(RESULT+1)="2 PLAYER PAD" : COORD=4
   Else If TRIGGERTYPE=$28 and BEXT=False : LINE$(RESULT)="KEEP ENTRANCE" : LINE$(RESULT+1)="MAIN PAD"

      '                     LINE$(RESULT+3)="START POSITIONS"

      LOC=0 : OPTION(RESULT+3)=True
      LINE$(RESULT+3)="X: "+Right$(Hex$($100+ Fn DUNGEONSTARTX),2)
      LINE$(RESULT+3)=LINE$(RESULT+3)+" Y: "+Right$(Hex$($100+ Fn DUNGEONSTARTY),2)

      LOC=1 : OPTION(RESULT+4)=True
      LINE$(RESULT+4)="X: "+Right$(Hex$($100+ Fn DUNGEONSTARTX),2)
      LINE$(RESULT+4)=LINE$(RESULT+4)+" Y: "+Right$(Hex$($100+ Fn DUNGEONSTARTY),2)

   End If 
   If TRIGGERTYPE=$2A : LINE$(RESULT)="FLASH TELEPORT" : COORD=3
   Else If TRIGGERTYPE=$2C : LINE$(RESULT)="ROTATE WALL" : COORD=1
   Else If TRIGGERTYPE=$2E : LINE$(RESULT)="TOGGLE WALL" : COORD=1

   Else If TRIGGERTYPE=$30 : LINE$(RESULT)="SPINNER 3"
   Else If TRIGGERTYPE=$32 : LINE$(RESULT)="CLICK TELEPORT" : COORD=3
   Else If TRIGGERTYPE=$34 : LINE$(RESULT)="CHANGE MAP DATA" : LINE$(RESULT+1)="DATA TYPE +2/8" : COORD=4
   Else If TRIGGERTYPE=$36 : LINE$(RESULT)="ROTATE WOOD WALL" : COORD=1
   Else If TRIGGERTYPE=$38 : LINE$(RESULT)="CHANGE MAP DATA" : LINE$(RESULT+1)="PARAMETER +1/4" : COORD=4
   Else If TRIGGERTYPE=$3A : LINE$(RESULT)="GAME COMPLETION"
   Else If TRIGGERTYPE=$3C : LINE$(RESULT)="SPECIAL CASE" : LINE$(RESULT+1)="REMOVE PILLAR" : COORD=4

   Else If TRIGGERTYPE=$3E and BEXT=True : LINE$(RESULT)="SPECIAL CASE" : LINE$(RESULT+1)="SUMMON PAD" : COORD=0
   Else If TRIGGERTYPE=$40 and BEXT=True : LINE$(RESULT)="SPECIAL CASE" : LINE$(RESULT+1)="UNKNOWN" : COORD=0

   End If 


   '         LINE$(16)=Hex$( Fn TRIGGERTYPE)
   OPTION(RESULT)=True


   If COORD=0 Then Return 

   If COORD=1 : Rem -- normal
      LINE$(16)="X: "+Right$(Hex$( Fn TRIGGERX+$100),2)+"  Y: "+Right$(Hex$( Fn TRIGGERY+$100),2)
      OPTION(16)=True

   Else If COORD=4 : Rem -- as before, but a line up  
      LINE$(17)="X: "+Right$(Hex$( Fn TRIGGERX+$100),2)+"  Y: "+Right$(Hex$( Fn TRIGGERY+$100),2)
      OPTION(17)=True

   Else If COORD=2 : Rem -- entrance pad location selector
      LINE$(18)="X: "+Right$(Hex$( Fn TRIGGERX+$100),2)+"  Y: "+Right$(Hex$( Fn TRIGGERY+$100),2)
      OPTION(18)=True

   Else If COORD=3 : Rem -- as before, but a line up  
      LINE$(16)="X: "+Right$(Hex$( Fn TRIGGERX+$100),2)+"  Y: "+Right$(Hex$( Fn TRIGGERY+$100),2)
      OPTION(16)=True : OPTION(17)=False
      LINE$(17)="FLOOR: "+Right$(Hex$( Fn TRIGGERF+$100),1)

   End If 




   Return 




   _DESC7:
   LINE$(10)="MAGIC LOCATION   "


   If BB mod 4=0 : Rem -- magic space 
      LINE$(11)="SPACE     "
   Else If BB mod 4=1 : Rem -- firepath
      LINE$(11)="FIREPATH  "
   Else If BB mod 4=2 : Rem -- mind rock 
      LINE$(11)="MINDROCK  "
   Else If BB mod 4=3 : Rem -- formwall
      LINE$(11)="FORMWALL  "
   End If 

   POWER=((AA*16)+BB)/4
   LINE$(12)="POWER:"+Str$(POWER)+"     "

   OPTION(11)=True
   OPTION(12)=True

   Return 


   _GETCHAMPIONNAMES:
   ' get names into one long string 
   '
   COUNT=0

   For D=0 To 15


      A=Peek(Start(10)+LOOKUPNAMES+COUNT)
   If A<$20 : B=A : Else B=0 : End If 


      For C=COUNT To COUNT+B
         COUNT=COUNT+1
         A=Peek(Start(10)+LOOKUPNAMES+COUNT)
         NAMEBLOCK$=NAMEBLOCK$+Chr$(A)
      Next C

      NAMEBLOCK$=NAMEBLOCK$+"|"

   Next D

   Return 

   _GETSPELLNAMES:

   SPELLBLOCK$=""

   For A=0 To 31

      For LOC=(A*8)+0 To(A*8)+7
         B= Fn SPELLNAMES
         SPELLBLOCK$=SPELLBLOCK$+Chr$(B)
      Next LOC
      SPELLBLOCK$=SPELLBLOCK$+"|"

   Next A

   Return 

   _DRAWUPDATES:
   Screen 0
   Clear Key 

   Return 


   _REFRESH:

   Screen Copy 0 To 1
   Repeat 
      '    Wait Vbl  
   Until Timer-MAINTIME>3
   Wait Vbl 
   MAINTIME=Timer


   Return 



   _DATALOAD:
   Reserve As Work 10,Object Size(FILEPATH$+BINARY$)
   Bload FILEPATH$+BINARY$,10
   Reserve As Work 11,$1024
   Reserve As Work 12,$1024

   Return 


   _DATAPATCH:
   Examine Object Dir$+FILEPATH$+BINARY$
   PROT=Object Protection

   If Btst(2,PROT)=False and Btst(0,PROT)=False
    ' save normal
      Wsave FILEPATH$+BINARY$,10

   '  call the patches procedure
     _DO_PATCHES
      Wsave FILEPATH$+BINARY$+"_Patched",10
      Erase 10

   ' reload the unpatched version 
      Wload FILEPATH$+BINARY$,10
      Gosub _FLASH_GOOD
      REFRESH=2
   Else 
      Gosub _FLASH_BAD
   End If 

   Return 

   _DATASAVE:
   Examine Object Dir$+FILEPATH$+BINARY$
   PROT=Object Protection

   If Btst(2,PROT)=False and Btst(0,PROT)=False
 Rem  Bsave Dir$+FILEPATH$+BINARY$,Start(10) To Start(10)+Length(10)
      Wsave Dir$+FILEPATH$+BINARY$,10
      Gosub _FLASH_GOOD
   Else 
      Gosub _FLASH_BAD
   End If 

   Return 

   _SAVESAVE:

   Examine Object Dir$+FILEPATH$+SVEFILE$
   PROT=Object Protection

   If Btst(2,PROT)=False and Btst(0,PROT)=False
      Bsave Dir$+FILEPATH$+SVEFILE$,Start(10)+LOOKUPCHAMPIONSTATS To Start(10)+LOOKUPCHAMPIONSTATS+($1600*9)
      Gosub _FLASH_ALT
   Else 
      Gosub _FLASH_BAD
   End If 

   Return 

   _FLASH_GOOD:
   Screen 1
   Colour 0,$F0 : Wait Vbl : Wait 3 : 
If LIGHT=0 : Colour 0,$0 : Else Colour 0,$FFF : End If 
   Screen 0
   Return 

   _FLASH_ALT:
   Screen 1
   Colour 0,$FC : Wait Vbl : Wait 3 : 
If LIGHT=0 : Colour 0,$0 : Else Colour 0,$FFF : End If 
   Screen 0
   Return 

   _FLASH_BAD:
   Screen 1
   Colour 0,$F00 : Wait Vbl : Wait 3 : 
If LIGHT=0 : Colour 0,$0 : Else Colour 0,$FFF : End If 
   Screen 0
   Return 

   _FLASH_WTF:
   Screen 1
   Colour 0,$F : Wait Vbl : Wait 3 : 
If LIGHT=0 : Colour 0,$0 : Else Colour 0,$FFF : End If 
   Screen 0
   Return 


   _DATATEST:

   Exec Dir$+"whdload bloodwych.slave preload quitkey=69 custom2=3 custom="+BINARY$+" NOWRITECACHE"

   Return 


_EXPORT_MAPS:
   Rem - check what edit mode we are in and go to it  
   If Exist("editor/Game Data/Maps "+BINARY$+"")=False
            Mkdir Dir$+"editor/Game Data/Maps "+BINARY$+""
      End If 

   HOLDLIGHT=LIGHT
   LIGHT=True

   MYCMD$="cd ram:"+Chr$($A)


   Screen Close 0 : Screen Close 1
   Screen Open 0,660,256,16,Lowres : Screen Show 0
   Screen Open 1,660,256,16,Lowres : Screen Show 1


   For QUICKLEV=0 To GAME-1

      For QUICKFLR=0 To 7
      MAUDE=0
      DUNGEON=QUICKLEV
      EYEZ=QUICKFLR
      Z=QUICKFLR
      Rem LIGHT=True 

     ' Print At(0,1)+"game... "+Str$(GAME-1)
     ' Print "quicklev: "+Str$(QUICKLEV)
     ' Print At(0,3)+"quickflr: "+Str$(QUICKFLR)
     ' Print At(0,4)+"floor width:"+Str$( Fn FLOORWIDTH)+"  - height:"+Str$( Fn FLOORHEIGHT)
     ' Wait Key   

      If Fn FLOORWIDTH<>0 and Fn FLOORHEIGHT<>0

      _NUMB_TO_TOWER[QUICKLEV]
        TEMPDUNG$=Param$

   '--part 1  
      Gosub _DRAWGRID
      Gosub _DRAWMAP
      Gosub _DRAWOVERLAY
       Gosub _DISPLAY
       Gosub _DRAWUPDATES
       Gosub _REFRESH
       Screen 1

       FISH$=""
       FISH$=FISH$+Lzstr$(DUNGEON,1)+"_"+TEMPDUNG$
       FISH$=FISH$+"_Floor_"+Lzstr$(EYEZ,1)

       MYCMD$=MYCMD$+"C:amgif "+Chr$(34)+FISH$+"_map.iff"+Chr$(34)+" "+Chr$(34)+FISH$+"_Map.gif"+Chr$(34)+Chr$($A)

       Save Iff "ram:"+FISH$+"_Map.iff"
       Wait Vbl 

    '--part 2  
       Screen 0 : Cls 0 : Wait Vbl 
       Gosub _DRAWOVERLAY
       Screen 0 : Cls 0 : Wait Vbl 
       Gosub _DRAWLIST
        Gosub _DISPLAY
        Gosub _DRAWUPDATES
        Gosub _REFRESH
       Screen 1
      'Save Iff "editor/Game Data/Maps ("+BINARY$+")/"+Lzstr$(DUNGEON,1)+"_"+TEMPDUNG$+"_Floor_"+Lzstr$(EYEZ,1)+"_Info.iff"

       MYCMD$=MYCMD$+"C:amgif "+Chr$(34)+FISH$+"_Info.iff"+Chr$(34)+" "+Chr$(34)+FISH$+"_Info.gif"+Chr$(34)+Chr$($A)

       Save Iff "ram:"+FISH$+"_Info.iff"
       Wait Vbl 

      End If 
     Next QUICKFLR

   Next QUICKLEV

   Screen Close 0 : Screen Close 1
   Screen Open 0,660,256,16,Lowres : Screen Show 0
   Screen Open 1,660,256,16,Lowres : Screen Show 1

   MYCMD$=MYCMD$+"c:copy RAM:#?.iff to "+Chr$($22)+Dir$+"editor/Game Data/Maps "+BINARY$+"/"+Chr$($22)+Chr$($A)
   MYCMD$=MYCMD$+"c:copy RAM:#?.gif to "+Chr$($22)+Dir$+"editor/Game Data/Maps "+BINARY$+"/"+Chr$($22)+Chr$($A)
   MYCMD$=MYCMD$+"c:delete ram:#?.if#?"+Chr$($A)

   Reserve As Work 20,Len(MYCMD$)+1
   For N=0 To Len(MYCMD$)-1
    Poke Start(20)+N,Asc(Mid$(MYCMD$,N+1,1))
   Next 
   Poke Start(20)+Len(MYCMD$),$A
   Wsave "ram:script",20
   Erase 20

   Exec("c:run c:execute ram:script")

   Wait Vbl 


   LIGHT=HOLDLIGHT
   REFRESH=2
   EYEZ=0

Return 

End Proc

Procedure _IMPORTEXPORT
Shared LOOKUPTOWER(),LOOKUPOBJECTS(),LOOKUPSWITCHES(),LOOKUPTRIGGERS()
Shared LOOKUPMONSTERCOUNT,LOOKUPMONSTER()
Shared LOOKUPHARDCODE_WOODTRAP1,LOOKUPHARDCODE_WOODTRAP2,LOOKUPGEMBLU,LOOKUPGEMTAN
Shared LOOKUPHARDCODE_SERP,LOOKUPHARDCODE_MOON1
Shared LOOKUPHARDCODE_MOON2,LOOKUPHARDCODE_DRAG1
Shared LOOKUPHARDCODE_DRAG2,LOOKUPHARDCODE_CHAOS1
Shared LOOKUPHARDCODE_CHAOS2
Shared LOOKUPDUNGEONSTART,LOOKUPKEEPSTART,LOOKUPKEEPFLOORSTART
Shared LOOKUPCHAMPIONSTATS,LOOKUPCHAMPIONPOCKETS,LOOKUPWALLSCROLLREF,LOOKUPWALLSCROLLTEXT
'
Auto View Off : Screen Open 3,320,256,16,Lowres : Screen To Front 3 : Flash Off 
Curs Off : Get Palette 0 : Change Bank Font 9 : Cls 0 : Autoback 2
INOUTFOLDER$="editor/Game Data/Game Files ("+BINARY$+")"
Rem If Not Exist(Dir$+INOUTFOLDER$) Then Mkdir Dir$+INOUTFOLDER$ 
Screen Show 3 : Ink 6,0 : View : Wait Vbl 
PLACEX=30 : Clear Key 

TXT$="BLOODWYCH EDITOR"
Ink 12,0 : Text 160-((Len(TXT$)/2)*8),(16*2),TXT$ : Ink 6,0
TXT$="~ IMPORT / EXPORT DATA FILES ~"
Ink 9,0 : Text 160-((Len(TXT$)/2)*8),(16*3),TXT$ : Ink 6,0
TXT$="(C) ULTIMATE AMIGA"
Ink 3,0 : Text 160-((Len(TXT$)/2)*8),(16*14),TXT$ : Ink 6,0

Ink 6,0 : Text 28,(16*5),"F1   OVERLAY SAVE FILE" : Ink 6,0
If BEXT=False
Ink 6,0 : Text 28,(16*6),"F2   IMPORT BY TOWER" : Ink 6,0
Ink 6,0 : Text 28,(16*7),"F3   EXPORT BY TOWER" : Ink 6,0
Else 
Ink 6,0 : Text 28,(16*6),"F2   IMPORT BY DUNGEON" : Ink 6,0
Ink 6,0 : Text 28,(16*7),"F3   EXPORT BY DUNGEON" : Ink 6,0
End If 
Ink 6,0 : Text 28,(16*8),"F4   IMPORT ALL DATA" : Ink 6,0
Ink 6,0 : Text 28,(16*9),"F5   EXPORT ALL DATA" : Ink 6,0
Ink 6,0 : Text 28,(16*10),"F6   CREATE STATISTICS" : Ink 6,0
Ink 6,0 : Text 28,(16*11),"F7   CREATE MAPS" : Ink 6,0


Do 
   A$=Inkey$
   If Key State($50)=True
         Cls 0 : Gosub _OVERLAY_SAVE : Exit 
   Else If Key State($51)=True
         Cls 0 : Gosub _IMPORT_PART : Exit 
   Else If Key State($52)=True
         Cls 0 : Gosub _EXPORT_PART : Exit 
   Else If Key State($53)=True and BEXT=False
         Cls 0 : Gosub _IMPORT_ALL : Exit 
   Else If Key State($54)=True and BEXT=False
         Cls 0 : Gosub _EXPORT_ALL : Exit 
   Else If Key State($53)=True and BEXT=True
         Cls 0 : Gosub _IMPORT_ALL_EXT : Exit 
   Else If Key State($54)=True and BEXT=True
         Cls 0 : Gosub _EXPORT_ALL_EXT : Exit 
   Else If Key State($55)=True
         Cls 0
         TXT$="~ GENERATING STATISTICS ~"
         Ink 6,0 : Text 160-((Len(TXT$)/2)*8),(16*6),TXT$ : Ink 6,0

          If Not Exist("editor/Game Data/Statistics ("+BINARY$+")")
            Mkdir Dir$+"editor/Game Data/Statistics ("+BINARY$+")"
          End If 
            _STATS_MONSTERS
            _STATS_SWITCHES
            _STATS_TRIGGERS
            _STATS_OBJECTS
            Exit 
' maps 
   Else If Key State($56)=True
         Cls 0 : MAKEMAP=True : Flash Off : Exit 

   Else If Key State($45)=True
         Exit 
   End If 
Loop 

LEAVEME:
Screen Close 3 : Auto View On 
Pop Proc

Return 

_OVERLAY_SAVE:
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
Ink 6,0 : Text 20,90,"    SELECT FILE 0-9, F10 - REMOVE" : Ink 6,0
   FILEFIND$="blood"
If BEXT=True Then FILEFIND$="BEXT"
Do 
      A$=Inkey$
   If A$="" Then KEYHELD=False
   ' 0-9
   For PICKNUMB=0 To $A
      If Key State(PICKNUMB)=True and KEYHELD=False
         KEYHELD=False
         If PICKNUMB=$A : PICKNUMB=0 : End If 
            PICKNUMBB$=Right$(Str$(PICKNUMB),1)
         If Exist(FILEPATH$+FILEFIND$+"SAVE"+PICKNUMBB$)=True
            Bload FILEPATH$+FILEFIND$+"SAVE"+PICKNUMBB$,Start(10)+LOOKUPCHAMPIONSTATS
            Gosub _FLASH_GOOD
            SVEGAME=True
            SVEFILE$=FILEFIND$+"SAVE"+PICKNUMBB$
            Exit 2
         Else 
            SVEFILE$=""
            Gosub _FLASH_BAD
            Exit 1
         End If 
      End If 
   Next PICKNUMB
   ' F10
   If Key State($59)=True
         Erase 10
         SVEFILE$=""
         SVEGAME=False
         Reserve As Work 10,Object Size(FILEPATH$+BINARY$)
         Bload FILEPATH$+BINARY$,10
         Exit 
   End If 

   ' esc
   If Key State($45)=True
         Exit 
   End If 
Loop 
Return 

_IMPORT_PART:

Clear Key 
TXT$="BLOODWYCH EDITOR"
Ink 12,0 : Text 160-((Len(TXT$)/2)*8),(16*2),TXT$ : Ink 6,0
If BEXT=False
TXT$="~ SELECT TOWER TO IMPORT ~"
Else 
TXT$="~ SELECT DUNGEON TO IMPORT ~"
End If 
Ink 9,0 : Text 160-((Len(TXT$)/2)*8),(16*3),TXT$ : Ink 6,0
TXT$="(C) ULTIMATE AMIGA"
Ink 3,0 : Text 160-((Len(TXT$)/2)*8),(16*14),TXT$ : Ink 6,0

If BEXT=False
TXT$="F1   THE KEEP"
Ink 6,0 : Text 28,(16*5),TXT$ : Ink 6,0
TXT$="F2   SERPENT TOWER"
Ink 6,0 : Text 28,(16*6),TXT$ : Ink 6,0
TXT$="F3   MOON TOWER"
Ink 6,0 : Text 28,(16*7),TXT$ : Ink 6,0
TXT$="F4   DRAGON TOWER"
Ink 6,0 : Text 28,(16*8),TXT$ : Ink 6,0
TXT$="F5   CHAOS TOWER"
Ink 6,0 : Text 28,(16*9),TXT$ : Ink 6,0
TXT$="F6   ZENDICK'S TOWER"
Ink 6,0 : Text 28,(16*10),TXT$ : Ink 6,0
Else 
TXT$="F1   SERPENT DUNGEON"
Ink 6,0 : Text 28,(16*5),TXT$ : Ink 6,0
TXT$="F2   CHAOS DUNGEON"
Ink 6,0 : Text 28,(16*6),TXT$ : Ink 6,0
TXT$="F3   MOON DUNGEON"
Ink 6,0 : Text 28,(16*7),TXT$ : Ink 6,0
TXT$="F4   DRAGON DUNGEON"
Ink 6,0 : Text 28,(16*8),TXT$ : Ink 6,0
End If 

'For TW=0 To 6+(BEXT*2)
'Next TW 


Repeat 
      If Key State($50)=True : Cls 0 : TW=0 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($51)=True : Cls 0 : TW=1 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($52)=True : Cls 0 : TW=2 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($53)=True : Cls 0 : TW=3 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($54)=True and BEXT=False : Cls 0 : TW=4 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($55)=True and BEXT=False : Cls 0 : TW=5 : Gosub _PARTIMPORT : Exit : End If 
      If Key State($45)=-1 Then Exit 
      Rem PPPPP$=Inkey$
      Wait Vbl 

Until 1=0

Return 

_PARTIMPORT:
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
   If BEXT=False
      If TW=0 : DUNG$="MOD0" : End If 
      If TW=1 : DUNG$="SERP" : End If 
      If TW=2 : DUNG$="MOON" : End If 
      If TW=3 : DUNG$="DRAG" : End If 
      If TW=4 : DUNG$="CHAOS" : End If 
      If TW=5 : DUNG$="ZENDIK" : End If 
   Else 
      If TW=0 : DUNG$="SERP_EX" : End If 
      If TW=1 : DUNG$="CHAOS_EX" : End If 
      If TW=2 : DUNG$="MOON_EX" : End If 
      If TW=3 : DUNG$="DRAG_EX" : End If 
   End If 

   PLACEY=60 : Gosub "_IMP_MAP_"+DUNG$
   PLACEY=70 : Gosub "_IMP_OBJ_"+DUNG$
   PLACEY=80 : Gosub "_IMP_MONSTER_"+DUNG$
   PLACEY=90 : Gosub "_IMP_SWITCHES_"+DUNG$
   PLACEY=100 : Gosub "_IMP_TRIGGERS_"+DUNG$
Rem   PLACEY=110 : Gosub "_IMP_MONSTER_TOTALS" 
Rem  
Rem
Clear Key : Wait Vbl : Wait 1 : Wait Key 

Return 

_EXPORT_PART:

Return 

_IMPORT_ALL_EXT:

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _IMP_MAP_SERP_EX
PLACEY=70 : Gosub _IMP_MAP_CHAOS_EX
PLACEY=80 : Gosub _IMP_MAP_MOON_EX
PLACEY=90 : Gosub _IMP_MAP_DRAG_EX
PLACEY=100 : Gosub _IMP_OBJ_SERP_EX
PLACEY=110 : Gosub _IMP_OBJ_CHAOS_EX
PLACEY=120 : Gosub _IMP_OBJ_MOON_EX
PLACEY=130 : Gosub _IMP_OBJ_DRAG_EX
PLACEY=140 : Gosub _IMP_MONSTER_TOTALS_EX
PLACEY=150 : Gosub _IMP_MONSTER_SERP_EX
PLACEY=160 : Gosub _IMP_MONSTER_CHAOS_EX
PLACEY=170 : Gosub _IMP_MONSTER_MOON_EX
PLACEY=180 : Gosub _IMP_MONSTER_DRAG_EX
PLACEY=190 : Gosub _IMP_SWITCHES_SERP_EX
PLACEY=200 : Gosub _IMP_SWITCHES_CHAOS_EX
PLACEY=210 : Gosub _IMP_SWITCHES_MOON_EX
PLACEY=220 : Gosub _IMP_SWITCHES_DRAG_EX
PLACEY=230 : Gosub _IMP_TRIGGERS_SERP_EX
PLACEY=240 : Gosub _IMP_TRIGGERS_CHAOS_EX

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _IMP_TRIGGERS_MOON_EX
PLACEY=70 : Gosub _IMP_TRIGGERS_DRAG_EX
PLACEY=80 : Gosub _IMP_DUNGEON_STARTS_EX
PLACEY=90 : Gosub _IMP_TANGEMS_EX
PLACEY=100 : Gosub _IMP_BLUGEMS_EX
'PLACEY=220 : Gosub _IMP_WOODTRAP1 
'PLACEY=230 : Gosub _IMP_WOODTRAP2 
'PLACEY=60 : Gosub _IMP_CHAMPSTATS 
'PLACEY=70 : Gosub _IMP_CHAMPPOCKETS 
'PLACEY=80 : Gosub _IMP_WALLSCROLLS

PLACEY=110 : Gosub _IMP_CHARACTERHEADS
PLACEY=120 : Gosub _IMP_CHARACTERBODIES
PLACEY=130 : Gosub _IMP_CHARACTERCOLOURS
PLACEY=140 : Gosub _IMP_MONSTERPALETTE
PLACEY=150 : Gosub _IMP_SUMMONCOLOURS
PLACEY=160 : Gosub _IMP_BEHOLDERCOLOURS
PLACEY=170 : Gosub _IMP_BEHEMOTHCOLOURS
PLACEY=180 : Gosub _IMP_CRABCOLOURS
PLACEY=190 : Gosub _IMP_DRAGONCOLOURS


Clear Key : Wait Vbl : Wait 1 : Wait Key 
Return 


_IMPORT_ALL:
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0

PLACEY=60 : Gosub _IMP_MAP_MOD0
PLACEY=70 : Gosub _IMP_MAP_SERP
PLACEY=80 : Gosub _IMP_MAP_MOON
PLACEY=90 : Gosub _IMP_MAP_DRAG
PLACEY=100 : Gosub _IMP_MAP_CHAOS
PLACEY=110 : Gosub _IMP_MAP_ZENDIK
PLACEY=120 : Gosub _IMP_OBJ_MOD0
PLACEY=130 : Gosub _IMP_OBJ_SERP
PLACEY=140 : Gosub _IMP_OBJ_MOON
PLACEY=150 : Gosub _IMP_OBJ_DRAG
PLACEY=160 : Gosub _IMP_OBJ_CHAOS
PLACEY=170 : Gosub _IMP_OBJ_ZENDIK
PLACEY=180 : Gosub _IMP_MONSTER_TOTALS
PLACEY=190 : Gosub _IMP_MONSTER_MOD0
PLACEY=200 : Gosub _IMP_MONSTER_SERP
PLACEY=210 : Gosub _IMP_MONSTER_MOON
PLACEY=220 : Gosub _IMP_MONSTER_DRAG
PLACEY=230 : Gosub _IMP_MONSTER_CHAOS
PLACEY=240 : Gosub _IMP_MONSTER_ZENDIK
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _IMP_SWITCHES_MOD0
PLACEY=70 : Gosub _IMP_SWITCHES_SERP
PLACEY=80 : Gosub _IMP_SWITCHES_MOON
PLACEY=90 : Gosub _IMP_SWITCHES_DRAG
PLACEY=100 : Gosub _IMP_SWITCHES_CHAOS
PLACEY=110 : Gosub _IMP_SWITCHES_ZENDIK
PLACEY=120 : Gosub _IMP_TRIGGERS_MOD0
PLACEY=130 : Gosub _IMP_TRIGGERS_SERP
PLACEY=140 : Gosub _IMP_TRIGGERS_MOON
PLACEY=150 : Gosub _IMP_TRIGGERS_DRAG
PLACEY=160 : Gosub _IMP_TRIGGERS_CHAOS
PLACEY=170 : Gosub _IMP_TRIGGERS_ZENDIK
PLACEY=180 : Gosub _IMP_KEEP_STARTS
PLACEY=190 : Gosub _IMP_DUNGEON_STARTS
PLACEY=200 : Gosub _IMP_TANGEMS
PLACEY=210 : Gosub _IMP_BLUGEMS

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _IMP_CHAMPSTATS
PLACEY=70 : Gosub _IMP_CHAMPPOCKETS
PLACEY=80 : Gosub _IMP_WALLSCROLLS
PLACEY=90 : Gosub _IMP_CHARACTERHEADS
PLACEY=100 : Gosub _IMP_CHARACTERBODIES
PLACEY=110 : Gosub _IMP_CHARACTERCOLOURS
PLACEY=120 : Gosub _IMP_MONSTERPALETTE
PLACEY=130 : Gosub _IMP_SUMMONCOLOURS
PLACEY=140 : Gosub _IMP_BEHOLDERCOLOURS
PLACEY=150 : Gosub _IMP_BEHEMOTHCOLOURS
PLACEY=160 : Gosub _IMP_CRABCOLOURS
PLACEY=170 : Gosub _IMP_DRAGONCOLOURS

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"IMPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _IMP_WOODTRAP1
PLACEY=70 : Gosub _IMP_WOODTRAP2
PLACEY=80 : Gosub _IMP_CRYLOC1
PLACEY=90 : Gosub _IMP_CRYLOC2
PLACEY=100 : Gosub _IMP_CRYLOC3
PLACEY=110 : Gosub _IMP_CRYLOC4
PLACEY=120 : Gosub _IMP_CRYLOC5
PLACEY=130 : Gosub _IMP_CRYLOC6
PLACEY=140 : Gosub _IMP_CRYLOC7

PLACEY=150 : Gosub _IMP_SUMMONOFFSET
PLACEY=160 : Gosub _IMP_BEHOLDEROFFSET
PLACEY=170 : Gosub _IMP_BEHEMOTHOFFSET
PLACEY=180 : Gosub _IMP_CRABOFFSET
PLACEY=190 : Gosub _IMP_BIGDRAGONOFFSET
PLACEY=200 : Gosub _IMP_LITTLEDRAGONOFFSET
PLACEY=210 : Gosub _IMP_GRADELIMIT

Clear Key : Wait Vbl : Wait 1 : Wait Key 
Return 

_EXPORT_ALL_EXT:

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_MAP_SERP_EX
PLACEY=70 : Gosub _EXP_MAP_CHAOS_EX
PLACEY=80 : Gosub _EXP_MAP_MOON_EX
PLACEY=90 : Gosub _EXP_MAP_DRAG_EX
PLACEY=100 : Gosub _EXP_OBJ_SERP_EX
PLACEY=110 : Gosub _EXP_OBJ_CHAOS_EX
PLACEY=120 : Gosub _EXP_OBJ_MOON_EX
PLACEY=130 : Gosub _EXP_OBJ_DRAG_EX
PLACEY=140 : Gosub _EXP_MONSTER_TOTALS_EX
PLACEY=150 : Gosub _EXP_MONSTER_SERP_EX
PLACEY=160 : Gosub _EXP_MONSTER_CHAOS_EX
PLACEY=170 : Gosub _EXP_MONSTER_MOON_EX
PLACEY=180 : Gosub _EXP_MONSTER_DRAG_EX
PLACEY=190 : Gosub _EXP_SWITCHES_SERP_EX
PLACEY=200 : Gosub _EXP_SWITCHES_CHAOS_EX
PLACEY=210 : Gosub _EXP_SWITCHES_MOON_EX
PLACEY=220 : Gosub _EXP_SWITCHES_DRAG_EX
PLACEY=230 : Gosub _EXP_TRIGGERS_SERP_EX
PLACEY=240 : Gosub _EXP_TRIGGERS_CHAOS_EX

Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_TRIGGERS_MOON_EX
PLACEY=70 : Gosub _EXP_TRIGGERS_DRAG_EX
PLACEY=80 : Gosub _EXP_DUNGEON_STARTS_EX
PLACEY=90 : Gosub _EXP_TANGEMS_EX
PLACEY=100 : Gosub _EXP_BLUGEMS_EX
'PLACEY=220 : Gosub _IMP_WOODTRAP1 
'PLACEY=230 : Gosub _IMP_WOODTRAP2 : 
'PLACEY=60 : Gosub _IMP_CHAMPSTATS 
'PLACEY=70 : Gosub _IMP_CHAMPPOCKETS 
'PLACEY=80 : Gosub _IMP_WALLSCROLLS
PLACEY=110 : Gosub _EXP_CHARACTERHEADS
PLACEY=120 : Gosub _EXP_CHARACTERBODIES
PLACEY=130 : Gosub _EXP_CHARACTERCOLOURS
PLACEY=140 : Gosub _EXP_MONSTERPALETTE
PLACEY=150 : Gosub _EXP_SUMMONCOLOURS
PLACEY=160 : Gosub _EXP_BEHOLDERCOLOURS
PLACEY=170 : Gosub _EXP_BEHEMOTHCOLOURS
PLACEY=180 : Gosub _EXP_CRABCOLOURS
PLACEY=190 : Gosub _EXP_DRAGONCOLOURS
Clear Key : Wait Vbl : Wait 1 : Wait Key 
Return 

_EXPORT_ALL:
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_MAP_MOD0
PLACEY=70 : Gosub _EXP_MAP_SERP
PLACEY=80 : Gosub _EXP_MAP_MOON
PLACEY=90 : Gosub _EXP_MAP_DRAG
PLACEY=100 : Gosub _EXP_MAP_CHAOS
PLACEY=110 : Gosub _EXP_MAP_ZENDIK
PLACEY=120 : Gosub _EXP_OBJ_MOD0
PLACEY=130 : Gosub _EXP_OBJ_SERP
PLACEY=140 : Gosub _EXP_OBJ_MOON
PLACEY=150 : Gosub _EXP_OBJ_DRAG
PLACEY=160 : Gosub _EXP_OBJ_CHAOS
PLACEY=170 : Gosub _EXP_OBJ_ZENDIK
PLACEY=180 : Gosub _EXP_MONSTER_TOTALS
PLACEY=190 : Gosub _EXP_MONSTER_MOD0
PLACEY=200 : Gosub _EXP_MONSTER_SERP
PLACEY=210 : Gosub _EXP_MONSTER_MOON
PLACEY=220 : Gosub _EXP_MONSTER_DRAG
PLACEY=230 : Gosub _EXP_MONSTER_CHAOS
PLACEY=240 : Gosub _EXP_MONSTER_ZENDIK
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_SWITCHES_MOD0
PLACEY=70 : Gosub _EXP_SWITCHES_SERP
PLACEY=80 : Gosub _EXP_SWITCHES_MOON
PLACEY=90 : Gosub _EXP_SWITCHES_DRAG
PLACEY=100 : Gosub _EXP_SWITCHES_CHAOS
PLACEY=110 : Gosub _EXP_SWITCHES_ZENDIK
PLACEY=120 : Gosub _EXP_TRIGGERS_MOD0
PLACEY=130 : Gosub _EXP_TRIGGERS_SERP
PLACEY=140 : Gosub _EXP_TRIGGERS_MOON
PLACEY=150 : Gosub _EXP_TRIGGERS_DRAG
PLACEY=160 : Gosub _EXP_TRIGGERS_CHAOS
PLACEY=170 : Gosub _EXP_TRIGGERS_ZENDIK
PLACEY=180 : Gosub _EXP_KEEP_STARTS
PLACEY=190 : Gosub _EXP_DUNGEON_STARTS
PLACEY=200 : Gosub _EXP_TANGEMS
PLACEY=210 : Gosub _EXP_BLUGEMS
'PLACEY=220 : Gosub _EXP_WOODTRAP1 
'PLACEY=230 : Gosub _EXP_WOODTRAP2 
Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_CHAMPSTATS
PLACEY=70 : Gosub _EXP_CHAMPPOCKETS
PLACEY=80 : Gosub _EXP_WALLSCROLLS
PLACEY=90 : Gosub _EXP_CHARACTERHEADS
PLACEY=100 : Gosub _EXP_CHARACTERBODIES
PLACEY=110 : Gosub _EXP_CHARACTERCOLOURS
PLACEY=120 : Gosub _EXP_MONSTERPALETTE
PLACEY=130 : Gosub _EXP_SUMMONCOLOURS
PLACEY=140 : Gosub _EXP_BEHOLDERCOLOURS
PLACEY=150 : Gosub _EXP_BEHEMOTHCOLOURS
PLACEY=160 : Gosub _EXP_CRABCOLOURS
PLACEY=170 : Gosub _EXP_DRAGONCOLOURS


Wait 50 : Cls 0
Ink 12,0 : Text 88,30,"EXPORTING DATA FILES" : Ink 6,0
PLACEY=60 : Gosub _EXP_WOODTRAP1
PLACEY=70 : Gosub _EXP_WOODTRAP2
PLACEY=80 : Gosub _EXP_CRYLOC1
PLACEY=90 : Gosub _EXP_CRYLOC2
PLACEY=100 : Gosub _EXP_CRYLOC3
PLACEY=110 : Gosub _EXP_CRYLOC4
PLACEY=120 : Gosub _EXP_CRYLOC5
PLACEY=130 : Gosub _EXP_CRYLOC6
PLACEY=140 : Gosub _EXP_CRYLOC7
PLACEY=150 : Gosub _EXP_SUMMONOFFSET
PLACEY=160 : Gosub _EXP_BEHOLDEROFFSET
PLACEY=170 : Gosub _EXP_BEHEMOTHOFFSET
PLACEY=180 : Gosub _EXP_CRABOFFSET
PLACEY=190 : Gosub _EXP_BIGDRAGONOFFSET
PLACEY=200 : Gosub _EXP_LITTLEDRAGONOFFSET
PLACEY=210 : Gosub _EXP_GRADELIMIT

' LOOKUPMONSTERPALETTE=Leek(Start(3)+$CC)
'  LOOKUPSUMMONCOLOURS=Leek(Start(3)+$D0)
'LOOKUPBEHOLDERCOLOURS=Leek(Start(3)+$D4)
'LOOKUPBEHEMOTHCOLOURS=Leek(Start(3)+$D8)
'    LOOKUPCRABCOLOURS=Leek(Start(3)+$DC)  
'  LOOKUPDRAGONCOLOURS=Leek(Start(3)+$E0)

Clear Key : Wait Vbl : Wait 1 : Wait Key 
Return 


_FLASH_GOOD:
      Screen 3
      Colour 0,$F0 : Wait Vbl : Wait 3
      Colour 0,$0 : Screen 3
Return 
_FLASH_BAD:
      Screen 3
      Colour 0,$F00 : Wait Vbl : Wait 3
      Colour 0,$0 : Screen 3
Return 

'  
' IMPORT GO_SUBS 
'
_IMP_MAP_MOD0:
' mod0.map 
       EXFILE$="mod0.map" : IN=Start(10)+LOOKUPTOWER(0) : OUT=IN+$1000
       Gosub _IMP_LOADTEXT
       Return 

_IMP_MAP_SERP:
' serpent.map  
      EXFILE$="serp.map" : IN=Start(10)+LOOKUPTOWER(1) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 

_IMP_MAP_MOON:
' moon.map 
      EXFILE$="moon.map" : IN=Start(10)+LOOKUPTOWER(2) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MAP_DRAG:
' dragon.map 
      EXFILE$="drag.map" : IN=Start(10)+LOOKUPTOWER(3) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MAP_CHAOS:
' chaos.map  
      EXFILE$="chaos.map" : IN=Start(10)+LOOKUPTOWER(4) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 

_IMP_MAP_ZENDIK:
' zendik.map 
      EXFILE$="zendik.map" : IN=Start(10)+LOOKUPTOWER(5) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 

' ============== 
_IMP_MAP_SERP_EX:
' serpent.map  
      EXFILE$="serpex.map" : IN=Start(10)+LOOKUPTOWER(0) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MAP_CHAOS_EX:
' chaos.map  
      EXFILE$="chaosex.map" : IN=Start(10)+LOOKUPTOWER(1) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MAP_MOON_EX:
' moon.map 
      EXFILE$="moonex.map" : IN=Start(10)+LOOKUPTOWER(2) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MAP_DRAG_EX:
' dragon.map 
      EXFILE$="dragex.map" : IN=Start(10)+LOOKUPTOWER(3) : OUT=IN+$1000
      Gosub _IMP_LOADTEXT
      Return 
' ===========================

_IMP_OBJ_MOD0:
' mod0 
      EXFILE$="mod0.ob" : IN=Start(10)+LOOKUPOBJECTS(0)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_SERP:
' serpent
      EXFILE$="serp.ob" : IN=Start(10)+LOOKUPOBJECTS(1)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_MOON:
' moon 
      EXFILE$="moon.ob" : IN=Start(10)+LOOKUPOBJECTS(2)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_DRAG:
' dragon 
      EXFILE$="drag.ob" : IN=Start(10)+LOOKUPOBJECTS(3)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_CHAOS:
' chaos  
      EXFILE$="chaos.ob" : IN=Start(10)+LOOKUPOBJECTS(4)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_ZENDIK:
' zendik 
      EXFILE$="zendik.ob" : IN=Start(10)+LOOKUPOBJECTS(5)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
' ===========================
_IMP_OBJ_SERP_EX:
' serpent
      EXFILE$="serpex.ob" : IN=Start(10)+LOOKUPOBJECTS(0)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_CHAOS_EX:
' chaos  
      EXFILE$="chaosex.ob" : IN=Start(10)+LOOKUPOBJECTS(1)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_MOON_EX:
' moon 
      EXFILE$="moonex.ob" : IN=Start(10)+LOOKUPOBJECTS(2)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 
_IMP_OBJ_DRAG_EX:
' dragon 
      EXFILE$="dragex.ob" : IN=Start(10)+LOOKUPOBJECTS(3)-2 : OUT=IN+$402
      Gosub _IMP_LOADTEXT
      Return 

' ===============================
_IMP_MONSTER_TOTALS:
' lists
      EXFILE$="monsters.totals" : IN=Start(10)+LOOKUPMONSTERCOUNT : OUT=IN+$C
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_MOD0:
' mod0 
      EXFILE$="mod0.monsters" : IN=Start(10)+LOOKUPMONSTER(0) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_SERP:
' serp 
      EXFILE$="serp.monsters" : IN=Start(10)+LOOKUPMONSTER(1) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_MOON:
' moon 
      EXFILE$="moon.monsters" : IN=Start(10)+LOOKUPMONSTER(2) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 

_IMP_MONSTER_DRAG:
' dragon 
      EXFILE$="drag.monsters" : IN=Start(10)+LOOKUPMONSTER(3) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_CHAOS:
' chaos  
      EXFILE$="chaos.monsters" : IN=Start(10)+LOOKUPMONSTER(4) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_ZENDIK:
' zendik 
      EXFILE$="zendik.monsters" : IN=Start(10)+LOOKUPMONSTER(5) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 

' ===============================
_IMP_MONSTER_TOTALS_EX:
' lists
      EXFILE$="monstersex.totals" : IN=Start(10)+LOOKUPMONSTERCOUNT : OUT=IN+$C
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_SERP_EX:
' serp 
      EXFILE$="serpex.monsters" : IN=Start(10)+LOOKUPMONSTER(0) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_CHAOS_EX:
' chaos  
      EXFILE$="chaosex.monsters" : IN=Start(10)+LOOKUPMONSTER(1) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_MOON_EX:
' moon 
      EXFILE$="moonex.monsters" : IN=Start(10)+LOOKUPMONSTER(2) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 
_IMP_MONSTER_DRAG_EX:
' dragon 
      EXFILE$="dragex.monsters" : IN=Start(10)+LOOKUPMONSTER(3) : OUT=IN+$300
      Gosub _IMP_LOADTEXT
      Return 

' ====================== 
_IMP_SWITCHES_MOD0:
' mod0.switches  
      EXFILE$="mod0.switches" : IN=Start(10)+LOOKUPSWITCHES(0) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_SERP:
' serpent.switches   
      EXFILE$="serp.switches" : IN=Start(10)+LOOKUPSWITCHES(1) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_MOON:
' moon.switches  
      EXFILE$="moon.switches" : IN=Start(10)+LOOKUPSWITCHES(2) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_DRAG:
' dragon.switches  
      EXFILE$="drag.switches" : IN=Start(10)+LOOKUPSWITCHES(3) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_CHAOS:
' chaos.switches   
      EXFILE$="chaos.switches" : IN=Start(10)+LOOKUPSWITCHES(4) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_ZENDIK:
' zendik.switches  
      EXFILE$="zendik.switches" : IN=Start(10)+LOOKUPSWITCHES(5) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
'========================= 
_IMP_SWITCHES_SERP_EX:
' serpent.switches   
      EXFILE$="serpex.switches" : IN=Start(10)+LOOKUPSWITCHES(1) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_CHAOS_EX:
' chaos.switches   
      EXFILE$="chaosex.switches" : IN=Start(10)+LOOKUPSWITCHES(4) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_MOON_EX:
' moon.switches  
      EXFILE$="moonex.switches" : IN=Start(10)+LOOKUPSWITCHES(2) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 
_IMP_SWITCHES_DRAG_EX:
' dragon.switches  
      EXFILE$="dragex.switches" : IN=Start(10)+LOOKUPSWITCHES(3) : OUT=IN+$40
      Gosub _IMP_LOADTEXT
Return 

' ======================== 
_IMP_TRIGGERS_MOD0:
' mod0.triggers  
      EXFILE$="mod0.triggers" : IN=Start(10)+LOOKUPTRIGGERS(0) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_SERP:
' serpent.triggers   
      EXFILE$="serp.triggers" : IN=Start(10)+LOOKUPTRIGGERS(1) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_MOON:
' moon.triggers  
      EXFILE$="moon.triggers" : IN=Start(10)+LOOKUPTRIGGERS(2) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_DRAG:
' dragon.triggers  
      EXFILE$="drag.triggers" : IN=Start(10)+LOOKUPTRIGGERS(3) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_CHAOS:
' chaos.triggers   
      EXFILE$="chaos.triggers" : IN=Start(10)+LOOKUPTRIGGERS(4) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_ZENDIK:
' zendik.triggers  
      EXFILE$="zendik.triggers" : IN=Start(10)+LOOKUPTRIGGERS(5) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
' =============================

_IMP_TRIGGERS_SERP_EX:
' serpent.triggers   
      EXFILE$="serpex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(1) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_CHAOS_EX:
' chaos.triggers   
      EXFILE$="chaosex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(4) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_MOON_EX:
' moon.triggers  
      EXFILE$="moonex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(2) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
_IMP_TRIGGERS_DRAG_EX:
' dragon.triggers  
      EXFILE$="dragex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(3) : OUT=IN+$80
      Gosub _IMP_LOADTEXT
      Return 
' =======================
_IMP_KEEP_STARTS:
' keep starts  
      EXFILE$="keep.entrances" : IN=Start(10)+LOOKUPKEEPFLOORSTART : OUT=IN+$1A
      Gosub _IMP_LOADTEXT
      Return 
_IMP_DUNGEON_STARTS:
' tower starts   
      EXFILE$="dungeon.entrances" : IN=Start(10)+LOOKUPDUNGEONSTART : OUT=IN+$18
      Gosub _IMP_LOADTEXT
      Return 
'=============== 
_IMP_DUNGEON_STARTS_EX:
' tower starts   
      EXFILE$="dungeonex.entrances" : IN=Start(10)+LOOKUPDUNGEONSTART : OUT=IN+$24
      Gosub _IMP_LOADTEXT
      Return 
'--------------- 

_IMP_TANGEMS:
' tan-gem
      EXFILE$="gem-tan.locations" : IN=Start(10)+LOOKUPGEMTAN : OUT=IN+$18
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BLUGEMS:
' blu gem
      EXFILE$="gem-blu.locations" : IN=Start(10)+LOOKUPGEMBLU : OUT=IN+$18
      Gosub _IMP_LOADTEXT
      Return 
'========================= 
_IMP_TANGEMS_EX:
' tan-gem
      EXFILE$="gem-tanex.locations" : IN=Start(10)+LOOKUPGEMTAN : OUT=IN+$10
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BLUGEMS_EX:
' blu gem
      EXFILE$="gem-bluex.locations" : IN=Start(10)+LOOKUPGEMBLU : OUT=IN+$10
      Gosub _IMP_LOADTEXT
      Return 
'-=================
_IMP_WOODTRAP1:
' woodtrap 1 
      EXFILE$="hardcode.woodtrap1" : IN=Start(10)+LOOKUPHARDCODE_WOODTRAP1 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
_IMP_WOODTRAP2:
' woodtrap 2 
      EXFILE$="hardcode.woodtrap2" : IN=Start(10)+LOOKUPHARDCODE_WOODTRAP2 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CHAMPSTATS:
' champions stats
      EXFILE$="champions.stats" : IN=Start(10)+LOOKUPCHAMPIONSTATS : OUT=IN+$200
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CHAMPPOCKETS:
' champions pockets
      EXFILE$="champions.pockets" : IN=Start(10)+LOOKUPCHAMPIONPOCKETS : OUT=IN+$100
      Gosub _IMP_LOADTEXT
      Return 
_IMP_WALLSCROLLS:
' wall scrolls 
      EXFILE$="scrolls.block" : IN=Start(10)+LOOKUPWALLSCROLLREF : OUT=IN+$D34
      Gosub _IMP_LOADTEXT
      Return 

_IMP_CHARACTERHEADS:
' character head choices 
      EXFILE$="characters.heads" : IN=Start(10)+LOOKUPCHARSHEADS : OUT=IN+$56
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CHARACTERBODIES:
' character body choices 
      EXFILE$="characters.bodies" : IN=Start(10)+LOOKUPCHARSBODIES : OUT=IN+$56
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CHARACTERCOLOURS:
' character colour choices 
      EXFILE$="characters.colours" : IN=Start(10)+LOOKUPCHARSCOLOURS : OUT=IN+$6B8
      Gosub _IMP_LOADTEXT
      Return 

_IMP_MONSTERPALETTE:
'  monster colour palettes 
      EXFILE$="monsters.colours" : IN=Start(10)+LOOKUPMONSTERPALETTE : OUT=IN+38
      Gosub _IMP_LOADTEXT
      Return 
_IMP_SUMMONCOLOURS:
      EXFILE$="summons.colours" : IN=Start(10)+LOOKUPSUMMONCOLOURS : OUT=IN+8
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BEHOLDERCOLOURS:
      EXFILE$="beholder.colours" : IN=Start(10)+LOOKUPBEHOLDERCOLOURS : OUT=IN+8
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BEHEMOTHCOLOURS:
      EXFILE$="behemoth.colours" : IN=Start(10)+LOOKUPBEHEMOTHCOLOURS : OUT=IN+8
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CRABCOLOURS:
      EXFILE$="crab.colours" : IN=Start(10)+LOOKUPCRABCOLOURS : OUT=IN+8
      Gosub _IMP_LOADTEXT
      Return 
_IMP_DRAGONCOLOURS:
      EXFILE$="dragon.colours" : IN=Start(10)+LOOKUPDRAGONCOLOURS : OUT=IN+8
      Gosub _IMP_LOADTEXT
      Return 

_IMP_SUMMONOFFSET:
      EXFILE$="summon.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(0) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BEHOLDEROFFSET:
      EXFILE$="beholder.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(1) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 
_IMP_BEHEMOTHOFFSET:
      EXFILE$="behemoth.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(2) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 

_IMP_CRABOFFSET:
      EXFILE$="crab.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(3) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 

_IMP_BIGDRAGONOFFSET:
      EXFILE$="dragon.gradeoffset1" : IN=Start(10)+GRADEOFFSET_POS(4) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 
_IMP_LITTLEDRAGONOFFSET:
      EXFILE$="dragon.gradeoffset2" : IN=Start(10)+GRADEOFFSET_POS(5) : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 

_IMP_GRADELIMIT:
      EXFILE$="monsters.gradelimit" : IN=Start(10)+LOOKUPGRADELIMIT1 : OUT=IN+1
      Gosub _IMP_LOADTEXT
      Return 


'==================
'-=================
' serp 
_IMP_CRYLOC1:
      EXFILE$="hardcode.serpentcrystal1" : IN=Start(10)+LOOKUPHARDCODE_SERP1 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
' moon 
_IMP_CRYLOC2:
      EXFILE$="hardcode.mooncrystal1" : IN=Start(10)+LOOKUPHARDCODE_MOON1 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CRYLOC3:
      EXFILE$="hardcode.mooncrystal2" : IN=Start(10)+LOOKUPHARDCODE_MOON2 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
' dragon 
_IMP_CRYLOC4:
      EXFILE$="hardcode.dragoncrystal1" : IN=Start(10)+LOOKUPHARDCODE_DRAG1 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CRYLOC5:
      EXFILE$="hardcode.dragoncrystal2" : IN=Start(10)+LOOKUPHARDCODE_DRAG2 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
' chaos
_IMP_CRYLOC6:
      EXFILE$="hardcode.chaoscrystal1" : IN=Start(10)+LOOKUPHARDCODE_CHAOS1 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 
_IMP_CRYLOC7:
      EXFILE$="hardcode.chaoscrystal2" : IN=Start(10)+LOOKUPHARDCODE_CHAOS2 : OUT=IN+$4
      Gosub _IMP_LOADTEXT
      Return 

'
' EXPORT GO_SUBS 
'
_EXP_MAP_MOD0:
' mod0.map 
       EXFILE$="mod0.map" : IN=Start(10)+LOOKUPTOWER(0) : OUT=IN+$1000
       Gosub _EXP_SAVETEXT
       Return 

_EXP_MAP_SERP:
' serpent.map  
      EXFILE$="serp.map" : IN=Start(10)+LOOKUPTOWER(1) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 

_EXP_MAP_MOON:
' moon.map 
      EXFILE$="moon.map" : IN=Start(10)+LOOKUPTOWER(2) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_DRAG:
' dragon.map 
      EXFILE$="drag.map" : IN=Start(10)+LOOKUPTOWER(3) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_CHAOS:
' chaos.map  
      EXFILE$="chaos.map" : IN=Start(10)+LOOKUPTOWER(4) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_ZENDIK:
' zendik.map 
      EXFILE$="zendik.map" : IN=Start(10)+LOOKUPTOWER(5) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
' =======================
_EXP_MAP_SERP_EX:
' serpent.map  
      EXFILE$="serpex.map" : IN=Start(10)+LOOKUPTOWER(0) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_CHAOS_EX:
' chaos.map  
      EXFILE$="chaosex.map" : IN=Start(10)+LOOKUPTOWER(1) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_MOON_EX:
' moon.map 
      EXFILE$="moonex.map" : IN=Start(10)+LOOKUPTOWER(2) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MAP_DRAG_EX:
' dragon.map 
      EXFILE$="dragex.map" : IN=Start(10)+LOOKUPTOWER(3) : OUT=IN+$1000
      Gosub _EXP_SAVETEXT
      Return 

' =======================

_EXP_OBJ_MOD0:
' mod0 
      EXFILE$="mod0.ob" : IN=Start(10)+LOOKUPOBJECTS(0)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_SERP:
' serpent
      EXFILE$="serp.ob" : IN=Start(10)+LOOKUPOBJECTS(1)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_MOON:
' moon 
      EXFILE$="moon.ob" : IN=Start(10)+LOOKUPOBJECTS(2)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_DRAG:
' dragon 
      EXFILE$="drag.ob" : IN=Start(10)+LOOKUPOBJECTS(3)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_CHAOS:
' chaos  
      EXFILE$="chaos.ob" : IN=Start(10)+LOOKUPOBJECTS(4)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_ZENDIK:
' zendik 
      EXFILE$="zendik.ob" : IN=Start(10)+LOOKUPOBJECTS(5)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
' =======================

' =======================
_EXP_OBJ_SERP_EX:
' serpent
      EXFILE$="serpex.ob" : IN=Start(10)+LOOKUPOBJECTS(0)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_CHAOS_EX:
' chaos  
      EXFILE$="chaosex.ob" : IN=Start(10)+LOOKUPOBJECTS(1)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_MOON_EX:
' moon 
      EXFILE$="moonex.ob" : IN=Start(10)+LOOKUPOBJECTS(2)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 
_EXP_OBJ_DRAG_EX:
' dragon 
      EXFILE$="dragex.ob" : IN=Start(10)+LOOKUPOBJECTS(3)-2 : OUT=IN+$402
      Gosub _EXP_SAVETEXT
      Return 


' =====================
_EXP_MONSTER_TOTALS:
' lists
      EXFILE$="monsters.totals" : IN=Start(10)+LOOKUPMONSTERCOUNT : OUT=IN+$C
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_MOD0:
' mod0 
      EXFILE$="mod0.monsters" : IN=Start(10)+LOOKUPMONSTER(0) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_SERP:
' serp 
      EXFILE$="serp.monsters" : IN=Start(10)+LOOKUPMONSTER(1) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_MOON:
' moon 
      EXFILE$="moon.monsters" : IN=Start(10)+LOOKUPMONSTER(2) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 

_EXP_MONSTER_DRAG:
' dragon 
      EXFILE$="drag.monsters" : IN=Start(10)+LOOKUPMONSTER(3) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_CHAOS:
' chaos  
      EXFILE$="chaos.monsters" : IN=Start(10)+LOOKUPMONSTER(4) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_ZENDIK:
' zendik 
      EXFILE$="zendik.monsters" : IN=Start(10)+LOOKUPMONSTER(5) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
' =======================

_EXP_MONSTER_TOTALS_EX:
' lists
      EXFILE$="monstersex.totals" : IN=Start(10)+LOOKUPMONSTERCOUNT : OUT=IN+$8
      Gosub _EXP_SAVETEXT
      Return 

_EXP_MONSTER_SERP_EX:
' serp 
      EXFILE$="serpex.monsters" : IN=Start(10)+LOOKUPMONSTER(0) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 

_EXP_MONSTER_CHAOS_EX:
' chaos  
      EXFILE$="chaosex.monsters" : IN=Start(10)+LOOKUPMONSTER(1) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTER_MOON_EX:
' moon 
      EXFILE$="moonex.monsters" : IN=Start(10)+LOOKUPMONSTER(2) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 

_EXP_MONSTER_DRAG_EX:
' dragon 
      EXFILE$="dragex.monsters" : IN=Start(10)+LOOKUPMONSTER(3) : OUT=IN+$300
      Gosub _EXP_SAVETEXT
      Return 

' =======================

_EXP_SWITCHES_MOD0:
' mod0.switches  
      EXFILE$="mod0.switches" : IN=Start(10)+LOOKUPSWITCHES(0) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_SERP:
' serpent.switches   
      EXFILE$="serp.switches" : IN=Start(10)+LOOKUPSWITCHES(1) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_MOON:
' moon.switches  
      EXFILE$="moon.switches" : IN=Start(10)+LOOKUPSWITCHES(2) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_DRAG:
' dragon.switches  
      EXFILE$="drag.switches" : IN=Start(10)+LOOKUPSWITCHES(3) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_CHAOS:
' chaos.switches   
      EXFILE$="chaos.switches" : IN=Start(10)+LOOKUPSWITCHES(4) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_ZENDIK:
' zendik.switches  
      EXFILE$="zendik.switches" : IN=Start(10)+LOOKUPSWITCHES(5) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
' =======================
_EXP_SWITCHES_SERP_EX:
' serpent.switches   
      EXFILE$="serpex.switches" : IN=Start(10)+LOOKUPSWITCHES(0) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_CHAOS_EX:
' chaos.switches   
      EXFILE$="chaosex.switches" : IN=Start(10)+LOOKUPSWITCHES(1) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_MOON_EX:
' moon.switches  
      EXFILE$="moonex.switches" : IN=Start(10)+LOOKUPSWITCHES(2) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 
_EXP_SWITCHES_DRAG_EX:
' dragon.switches  
      EXFILE$="dragex.switches" : IN=Start(10)+LOOKUPSWITCHES(3) : OUT=IN+$40
      Gosub _EXP_SAVETEXT
Return 

' =======================

_EXP_TRIGGERS_MOD0:
' mod0.triggers  
      EXFILE$="mod0.triggers" : IN=Start(10)+LOOKUPTRIGGERS(0) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_SERP:
' serpent.triggers   
      EXFILE$="serp.triggers" : IN=Start(10)+LOOKUPTRIGGERS(1) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_MOON:
' moon.triggers  
      EXFILE$="moon.triggers" : IN=Start(10)+LOOKUPTRIGGERS(2) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_DRAG:
' dragon.triggers  
      EXFILE$="drag.triggers" : IN=Start(10)+LOOKUPTRIGGERS(3) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_CHAOS:
' chaos.triggers   
      EXFILE$="chaos.triggers" : IN=Start(10)+LOOKUPTRIGGERS(4) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_ZENDIK:
' zendik.triggers  
      EXFILE$="zendik.triggers" : IN=Start(10)+LOOKUPTRIGGERS(5) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
' =======================

_EXP_TRIGGERS_SERP_EX:
' serpent.triggers   
      EXFILE$="serpex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(0) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_CHAOS_EX:
' chaos.triggers   
      EXFILE$="chaosex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(1) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_MOON_EX:
' moon.triggers  
      EXFILE$="moonex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(2) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 
_EXP_TRIGGERS_DRAG_EX:
' dragon.triggers  
      EXFILE$="dragex.triggers" : IN=Start(10)+LOOKUPTRIGGERS(3) : OUT=IN+$80
      Gosub _EXP_SAVETEXT
      Return 

' =======================

_EXP_KEEP_STARTS:
' keep starts  
      EXFILE$="keep.entrances" : IN=Start(10)+LOOKUPKEEPFLOORSTART : OUT=IN+$1A
      Gosub _EXP_SAVETEXT
      Return 
_EXP_DUNGEON_STARTS:
' tower starts   
      EXFILE$="dungeon.entrances" : IN=Start(10)+LOOKUPDUNGEONSTART : OUT=IN+$18
      Gosub _EXP_SAVETEXT
      Return 

'=============== 
_EXP_DUNGEON_STARTS_EX:
' tower starts   
      EXFILE$="dungeonex.entrances" : IN=Start(10)+LOOKUPDUNGEONSTART : OUT=IN+$24
      Gosub _EXP_SAVETEXT
      Return 
'--------------- 

_EXP_TANGEMS:
' tan-gem
      EXFILE$="gem-tan.locations" : IN=Start(10)+LOOKUPGEMTAN : OUT=IN+$18
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BLUGEMS:
' blu gem
      EXFILE$="gem-blu.locations" : IN=Start(10)+LOOKUPGEMBLU : OUT=IN+$18
      Gosub _EXP_SAVETEXT
      Return 
' =======================
_EXP_TANGEMS_EX:
' tan-gem
      EXFILE$="gem-tanex.locations" : IN=Start(10)+LOOKUPGEMTAN : OUT=IN+$10
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BLUGEMS_EX:
' blu gem
      EXFILE$="gem-bluex.locations" : IN=Start(10)+LOOKUPGEMBLU : OUT=IN+$10
      Gosub _EXP_SAVETEXT
      Return 
' =======================

_EXP_WOODTRAP1:
' woodtrap 1 
      EXFILE$="hardcode.woodtrap1" : IN=Start(10)+LOOKUPHARDCODE_WOODTRAP1 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
_EXP_WOODTRAP2:
' woodtrap 2 
      EXFILE$="hardcode.woodtrap2" : IN=Start(10)+LOOKUPHARDCODE_WOODTRAP2 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CHAMPSTATS:
' champions stats
      EXFILE$="champions.stats" : IN=Start(10)+LOOKUPCHAMPIONSTATS : OUT=IN+$200
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CHAMPPOCKETS:
' champions pockets
      EXFILE$="champions.pockets" : IN=Start(10)+LOOKUPCHAMPIONPOCKETS : OUT=IN+$100
      Gosub _EXP_SAVETEXT
      Return 
_EXP_WALLSCROLLS:
' wall scrolls 
      EXFILE$="scrolls.block" : IN=Start(10)+LOOKUPWALLSCROLLREF : OUT=IN+$D34
      Gosub _EXP_SAVETEXT
      Return 

_EXP_CHARACTERHEADS:
' character head choices 
      EXFILE$="characters.heads" : IN=Start(10)+LOOKUPCHARSHEADS : OUT=IN+$56
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CHARACTERBODIES:
' character body choices 
      EXFILE$="characters.bodies" : IN=Start(10)+LOOKUPCHARSBODIES : OUT=IN+$56
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CHARACTERCOLOURS:

' character colour choices 
      EXFILE$="characters.colours" : IN=Start(10)+LOOKUPCHARSCOLOURS : OUT=IN+$6B8
      Gosub _EXP_SAVETEXT
      Return 
_EXP_MONSTERPALETTE:
'  monster colour palettes 
      EXFILE$="monsters.colours" : IN=Start(10)+LOOKUPMONSTERPALETTE : OUT=IN+38
      Gosub _EXP_SAVETEXT
      Return 
_EXP_SUMMONCOLOURS:
      EXFILE$="summons.colours" : IN=Start(10)+LOOKUPSUMMONCOLOURS : OUT=IN+8
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BEHOLDERCOLOURS:
      EXFILE$="beholder.colours" : IN=Start(10)+LOOKUPBEHOLDERCOLOURS : OUT=IN+8
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BEHEMOTHCOLOURS:
      EXFILE$="behemoth.colours" : IN=Start(10)+LOOKUPBEHEMOTHCOLOURS : OUT=IN+8
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CRABCOLOURS:
      EXFILE$="crab.colours" : IN=Start(10)+LOOKUPCRABCOLOURS : OUT=IN+8
      Gosub _EXP_SAVETEXT
      Return 
_EXP_DRAGONCOLOURS:
      EXFILE$="dragon.colours" : IN=Start(10)+LOOKUPDRAGONCOLOURS : OUT=IN+8
      Gosub _EXP_SAVETEXT
      Return 

_EXP_SUMMONOFFSET:
      EXFILE$="summon.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(0) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BEHOLDEROFFSET:
      EXFILE$="beholder.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(1) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BEHEMOTHOFFSET:
      EXFILE$="behemoth.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(2) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 

_EXP_CRABOFFSET:
      EXFILE$="crab.gradeoffset" : IN=Start(10)+GRADEOFFSET_POS(3) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 
_EXP_BIGDRAGONOFFSET:
      EXFILE$="dragon.gradeoffset1" : IN=Start(10)+GRADEOFFSET_POS(4) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 

_EXP_LITTLEDRAGONOFFSET:
      EXFILE$="dragon.gradeoffset2" : IN=Start(10)+GRADEOFFSET_POS(5) : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 

_EXP_GRADELIMIT:
      EXFILE$="monsters.gradelimit" : IN=Start(10)+LOOKUPGRADELIMIT1 : OUT=IN+1
      Gosub _EXP_SAVETEXT
      Return 

' serp 
_EXP_CRYLOC1:
      EXFILE$="hardcode.serpentcrystal1" : IN=Start(10)+LOOKUPHARDCODE_SERP1 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
' moon 
_EXP_CRYLOC2:
      EXFILE$="hardcode.mooncrystal1" : IN=Start(10)+LOOKUPHARDCODE_MOON1 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CRYLOC3:
      EXFILE$="hardcode.mooncrystal2" : IN=Start(10)+LOOKUPHARDCODE_MOON2 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
' dragon 
_EXP_CRYLOC4:
      EXFILE$="hardcode.dragoncrystal1" : IN=Start(10)+LOOKUPHARDCODE_DRAG1 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CRYLOC5:
      EXFILE$="hardcode.dragoncrystal2" : IN=Start(10)+LOOKUPHARDCODE_DRAG2 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
' chaos
_EXP_CRYLOC6:
      EXFILE$="hardcode.chaoscrystal1" : IN=Start(10)+LOOKUPHARDCODE_CHAOS1 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 
_EXP_CRYLOC7:
      EXFILE$="hardcode.chaoscrystal2" : IN=Start(10)+LOOKUPHARDCODE_CHAOS2 : OUT=IN+$4
      Gosub _EXP_SAVETEXT
      Return 

' LOOKUPMONSTERPALETTE=Leek(Start(3)+$CC)
'  LOOKUPSUMMONCOLOURS=Leek(Start(3)+$D0)
'LOOKUPBEHOLDERCOLOURS=Leek(Start(3)+$D4)
'LOOKUPBEHEMOTHCOLOURS=Leek(Start(3)+$D8)
'    LOOKUPCRABCOLOURS=Leek(Start(3)+$DC)  
'  LOOKUPDRAGONCOLOURS=Leek(Start(3)+$E0)


_EXP_SAVETEXT:
   If Not Exist(Dir$+INOUTFOLDER$) Then Mkdir INOUTFOLDER$
      Text PLACEX,PLACEY,Upper$(EXFILE$)

  If DBUG=False
      Text 240,PLACEY,"SAVED"
   Else 
      Text 240-(7*8),PLACEY,""+Hex$(IN,5)+" "+Hex$(OUT,5)
   End If 

   Bsave Dir$+INOUTFOLDER$+"/"+EXFILE$,IN To OUT

Return 

_IMP_LOADTEXT:
      Ink 6,0
      Text PLACEX,PLACEY,Upper$(EXFILE$)
      If Exist(Dir$+INOUTFOLDER$+"/"+EXFILE$)=True
         Bload Dir$+INOUTFOLDER$+"/"+EXFILE$,IN
         Text 240,PLACEY,"LOADED"
      Else 
      Ink $C,0
         Text 240,PLACEY,"NOT FOUND"
      End If 
Return 

End Proc
Procedure _DATAMAPLOAD

Wload "editor/Editor Data/"+BWVER$+".datamap",3
Screen Open 0,640,256,4,Hires : Auto View On : Clear Key 
 Palette 0,$777,$F00,$F
  Cls 0 : Ink 1,0 : Hide 
XLOC=40 : YLOC=10
LOOKUPTOWER(0)=Leek(Start(3)+0)
LOOKUPTOWER(1)=Leek(Start(3)+4)
LOOKUPTOWER(2)=Leek(Start(3)+8)
LOOKUPTOWER(3)=Leek(Start(3)+12)
LOOKUPTOWER(4)=Leek(Start(3)+16)
LOOKUPTOWER(5)=Leek(Start(3)+20)

' number of towers 
For ZZZ=0 To 5
   If LOOKUPTOWER(ZZZ)=0
      Exit 
   End If 
   GAME=GAME+1
Next 
For A=0 To 5
   If DBUG=True Then Text XLOC,YLOC,"Tower"+Str$(A)+"    :"+Hex$(LOOKUPTOWER(A))
   YLOC=YLOC+10
Next A

LOOKUPOBJECTS(0)=Leek(Start(3)+24)
LOOKUPOBJECTS(1)=Leek(Start(3)+28)
LOOKUPOBJECTS(2)=Leek(Start(3)+32)
LOOKUPOBJECTS(3)=Leek(Start(3)+36)
LOOKUPOBJECTS(4)=Leek(Start(3)+40)
LOOKUPOBJECTS(5)=Leek(Start(3)+44)
For A=0 To 5
   If DBUG=True Then Text XLOC,YLOC,"Objects"+Str$(A)+"  :"+Hex$(LOOKUPOBJECTS(A))
   YLOC=YLOC+10
Next A
LOOKUPSWITCHES(0)=Leek(Start(3)+48)
LOOKUPSWITCHES(1)=Leek(Start(3)+52)
LOOKUPSWITCHES(2)=Leek(Start(3)+56)
LOOKUPSWITCHES(3)=Leek(Start(3)+60)
LOOKUPSWITCHES(4)=Leek(Start(3)+64)
LOOKUPSWITCHES(5)=Leek(Start(3)+68)

For A=0 To 5
   If DBUG=True Then Text XLOC,YLOC,"Switches"+Str$(A)+" :"+Hex$(LOOKUPSWITCHES(A))
   YLOC=YLOC+10
Next A
LOOKUPTRIGGERS(0)=Leek(Start(3)+72)
LOOKUPTRIGGERS(1)=Leek(Start(3)+76)
LOOKUPTRIGGERS(2)=Leek(Start(3)+80)
LOOKUPTRIGGERS(3)=Leek(Start(3)+84)
LOOKUPTRIGGERS(4)=Leek(Start(3)+88)
LOOKUPTRIGGERS(5)=Leek(Start(3)+92)
For A=0 To 5
   If DBUG=True Then Text XLOC,YLOC,"Triggers"+Str$(A)+" :"+Hex$(LOOKUPTRIGGERS(A))
   YLOC=YLOC+10
Next A

LOOKUPMONSTER(0)=Leek(Start(3)+96)
LOOKUPMONSTER(1)=Leek(Start(3)+100)
LOOKUPMONSTER(2)=Leek(Start(3)+104)
LOOKUPMONSTER(3)=Leek(Start(3)+108)
LOOKUPMONSTER(4)=Leek(Start(3)+112)
LOOKUPMONSTER(5)=Leek(Start(3)+116)
XLOC=XLOC+180
YLOC=10
For A=0 To 5
   If DBUG=True Then Text XLOC,YLOC,"Monsters"+Str$(A)+"    :"+Hex$(LOOKUPMONSTER(A))
   YLOC=YLOC+10
Next A

LOOKUPMONSTERCOUNT=Leek(Start(3)+120)
   If DBUG=True Then Text XLOC,YLOC,"Monster Count"+" :"+Hex$(LOOKUPMONSTERCOUNT)
   YLOC=YLOC+10
' remm ... blank spot here 
' ..... = Leek(Start(3)+124) 

LOOKUPDUNGEONSTART=Leek(Start(3)+128)
LOOKUPKEEPSTART=Leek(Start(3)+132)
LOOKUPKEEPFLOORSTART=Leek(Start(3)+136)
   If DBUG=True Then Text XLOC,YLOC,"Dungeon Starts"+":"+Hex$(LOOKUPDUNGEONSTART)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Keep Starts"+"   :"+Hex$(LOOKUPKEEPSTART)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Keep Floors"+"   :"+Hex$(LOOKUPKEEPFLOORSTART)
   YLOC=YLOC+10

' rem ... blank spot here
' ...... Leek(Start(3)+140)
LOOKUPGEMBLU=Leek(Start(3)+144)
LOOKUPGEMTAN=Leek(Start(3)+148)
   If DBUG=True Then Text XLOC,YLOC,"Blu Gems"+"      :"+Hex$(LOOKUPGEMBLU)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Tan Gems"+"      :"+Hex$(LOOKUPGEMTAN)
   YLOC=YLOC+10


LOOKUPCHAMPIONSTATS=Leek(Start(3)+152) : Rem - F1F6 
LOOKUPCHAMPIONPOCKETS=Leek(Start(3)+156)

   If DBUG=True Then Text XLOC,YLOC,"Stats"+"         :"+Hex$(LOOKUPCHAMPIONSTATS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Pockets"+"       :"+Hex$(LOOKUPCHAMPIONPOCKETS)
   YLOC=YLOC+10

LOOKUPSPELLTEXT=Leek(Start(3)+160)
LOOKUPSPELLNAME=Leek(Start(3)+164)
LOOKUPNAMES=Leek(Start(3)+168)

   If DBUG=True Then Text XLOC,YLOC,"Spells Text"+"   :"+Hex$(LOOKUPSPELLTEXT)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Spells Names"+"  :"+Hex$(LOOKUPSPELLNAME)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Champion Names"+":"+Hex$(LOOKUPNAMES)
   YLOC=YLOC+10


' rem.... blank spot here
'..... Leek(Start(3)+172)
LOOKUPWALLSCROLLREF=Leek(Start(3)+176)
LOOKUPWALLSCROLLTEXT=Leek(Start(3)+180)

   If DBUG=True Then Text XLOC,YLOC,"Scroll Refs"+"   :"+Hex$(LOOKUPWALLSCROLLREF)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Scroll Texts"+"  :"+Hex$(LOOKUPWALLSCROLLTEXT)
   YLOC=YLOC+10

LOOKUPCHARSBODIES=Leek(Start(3)+$C0)
LOOKUPCHARSHEADS=Leek(Start(3)+$C4)
LOOKUPCHARSCOLOURS=Leek(Start(3)+$C8)

   If DBUG=True Then Text XLOC,YLOC,"Char. Bodies"+"  :"+Hex$(LOOKUPCHARSBODIES)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Char. Heads"+"   :"+Hex$(LOOKUPCHARSHEADS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Char. Colours"+" :"+Hex$(LOOKUPCHARSCOLOURS)
   YLOC=YLOC+10

 LOOKUPMONSTERPALETTE=Leek(Start(3)+$CC)
  LOOKUPSUMMONCOLOURS=Leek(Start(3)+$D0)
LOOKUPBEHOLDERCOLOURS=Leek(Start(3)+$D4)
LOOKUPBEHEMOTHCOLOURS=Leek(Start(3)+$D8)
    LOOKUPCRABCOLOURS=Leek(Start(3)+$DC)
  LOOKUPDRAGONCOLOURS=Leek(Start(3)+$E0)
XLOC=XLOC+200
YLOC=10
   If DBUG=True Then Text XLOC,YLOC,"Monster Palette"+":"+Hex$(LOOKUPMONSTERPALETTE)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Summon Colours "+":"+Hex$(LOOKUPSUMMONCOLOURS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Behold.Colours"+" :"+Hex$(LOOKUPBEHOLDERCOLOURS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Behemt.Colours"+" :"+Hex$(LOOKUPBEHEMOTHCOLOURS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Crab Colours"+"   :"+Hex$(LOOKUPCRABCOLOURS)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Dragon Colours"+" :"+Hex$(LOOKUPDRAGONCOLOURS)
   YLOC=YLOC+10
   LOOKUPENTROPYPALETTE=Leek(Start(3)+$E4)
   If DBUG=True Then Text XLOC,YLOC,"Entropy Palette"+":"+Hex$(LOOKUPENTROPYPALETTE)
   YLOC=YLOC+10

If DBUG=True Then Wait 200

Rem --- PAGE 2  -  hard code locatons
Cls 0
XLOC=40 : YLOC=10

LOOKUPHARDCODE_WOODTRAP1=Leek(Start(3)+184)
LOOKUPHARDCODE_WOODTRAP2=Leek(Start(3)+188)
   If DBUG=True Then Text XLOC,YLOC,"Wood Trap 1"+"    :"+Hex$(LOOKUPHARDCODE_WOODTRAP1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Wood Trap 2"+"    :"+Hex$(LOOKUPHARDCODE_WOODTRAP2)
   YLOC=YLOC+10

LOOKUPHARDCODE_SERP1=Leek(Start(3)+$E8)
LOOKUPHARDCODE_MOON1=Leek(Start(3)+$EC)
LOOKUPHARDCODE_MOON2=Leek(Start(3)+$F0)
LOOKUPHARDCODE_DRAG1=Leek(Start(3)+$F4)
LOOKUPHARDCODE_DRAG2=Leek(Start(3)+$F8)
LOOKUPHARDCODE_CHAOS1=Leek(Start(3)+$FC)
LOOKUPHARDCODE_CHAOS2=Leek(Start(3)+$100)

   If DBUG=True Then Text XLOC,YLOC,"Serp.Cry. Loc"+"  :"+Hex$(LOOKUPHARDCODE_SERP1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Moon.Cry.1 Loc"+" :"+Hex$(LOOKUPHARDCODE_MOON1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Moon.Cry.2 Loc"+" :"+Hex$(LOOKUPHARDCODE_MOON2)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Drag.Cry.1 Loc"+" :"+Hex$(LOOKUPHARDCODE_DRAG1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Drag.Cry.2 Loc"+" :"+Hex$(LOOKUPHARDCODE_DRAG2)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Chao.Cry.1 Loc"+" :"+Hex$(LOOKUPHARDCODE_CHAOS1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Chao.Cry.2 Loc"+" :"+Hex$(LOOKUPHARDCODE_CHAOS2)
   YLOC=YLOC+10
   GRADEOFFSET_POS(0)=Leek(Start(3)+$110)
   GRADEOFFSET_POS(1)=Leek(Start(3)+$114)
   GRADEOFFSET_POS(2)=Leek(Start(3)+$118)
   GRADEOFFSET_POS(3)=Leek(Start(3)+$11C)
   GRADEOFFSET_POS(4)=Leek(Start(3)+$120)
   GRADEOFFSET_POS(5)=Leek(Start(3)+$124)
   If DBUG=True Then Text XLOC,YLOC,"Summons Offset :"+Hex$(GRADEOFFSET_POS(0))
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Behold. Offset :"+Hex$(GRADEOFFSET_POS(1))
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Behemo. Offset :"+Hex$(GRADEOFFSET_POS(2))
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Crab Offset    :"+Hex$(GRADEOFFSET_POS(3))
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Dragon1 Offset :"+Hex$(GRADEOFFSET_POS(4))
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Dragon2 Offset :"+Hex$(GRADEOFFSET_POS(5))
   YLOC=YLOC+10

   LOOKUPGRADELIMIT1=Leek(Start(3)+$138)
   LOOKUPGRADELIMIT2=Leek(Start(3)+$13C)
   If DBUG=True Then Text XLOC,YLOC,"Grade Limit 1  :"+Hex$(LOOKUPGRADELIMIT1)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Grade Limit 2  :"+Hex$(LOOKUPGRADELIMIT2)
   YLOC=YLOC+10

   CRACKPOINT=Leek(Start(3)+$128)
   If DBUG=True Then Text XLOC,YLOC,"Copy Protection:"+Hex$(CRACKPOINT)
   YLOC=YLOC+10

   LOOKUP_MENU_TEXTLOCALE=Leek(Start(3)+$12C)
   LOOKUP_MENU_LEA_CODE=Leek(Start(3)+$130)
   LOOKUP_MENU_CONTROL=Leek(Start(3)+$134)
   If DBUG=True Then Text XLOC,YLOC,"Menu Text      :"+Hex$(LOOKUP_MENU_TEXTLOCALE)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Menu Text Link :"+Hex$(LOOKUP_MENU_LEA_CODE)
   YLOC=YLOC+10
   If DBUG=True Then Text XLOC,YLOC,"Menu Controls  :"+Hex$(LOOKUP_MENU_CONTROL)
   YLOC=YLOC+10

If DBUG=True Then Wait 200
'Wait Key  
Screen Close 0
End Proc
Procedure _GETVERSION

' look for "mirrorsoft"  or "imageworks" (st demo) 
   Reserve As Work 10,Object Size(FILEPATH$+BINARY$)
   Bload FILEPATH$+BINARY$,10

   FIND$="(C) MIRRORSOFT"
  FIND2$="ROM IMAGEWORKS"

    For FINDLOC=0 To Length(10)-Len(FIND$)-1
           PICKUP$=""
      For COUNT=0 To Len(FIND$)-1
           PICKUP$=PICKUP$+Chr$(Peek(Start(10)+FINDLOC+COUNT))
     Next COUNT

      If PICKUP$=FIND$ : Exit 1 : End If 
      If PICKUP$=FIND2$ : Exit 1 : End If 
   Next FINDLOC
   BEXT=False
   If FINDLOC=$3D6-4 : BWVER$="102" : End If 
   If FINDLOC=$3B0-4 : BWVER$="439" : End If 
   If FINDLOC=$3AF-4 : BWVER$="1927" : End If 
   If FINDLOC=$35A-4 : BWVER$="43" : BEXT=True : End If 

' number of towers 
   '                  GAME=6
   'If BEXT=True Then GAME=4

   If FINDLOC=$5051-4
       BWVER$="ST_DEMO"
       MONSTERTYPECOUNT=$14
       GAME=1
   End If 


Rem   If FINDLOC=$??? Then BWVER$="?"  
Rem   If FINDLOC=$??? Then BWVER$="?"  
Rem   If FINDLOC=$??? Then BWVER$="?"  


' check for BOOK OF SKULLS 
   PICKUP$=Chr$(Peek(Start(10)+$329))
   PICKUP$=PICKUP$+Chr$(Peek(Start(10)+$33C))
' -----  
   If PICKUP$="~~"
   Screen Open 0,320,256,16,Lowres : Clear Key 
   Curs Off : Hide : Flash Off : Auto View On : Autoback 0
   Get Icon Palette : Cls 0 : Colour $F,$101 : Ink 6,0

   Change Bank Font 9 : Flash Off 
         TXT$="~ VERSION NOT SUPPORTED ~"
         Ink 6,0 : Text 160-((Len(TXT$)/2)*8),(16*6),TXT$ : Ink 6,0
         Wait 40
         Screen Close 0
         End 
   End If 

'   SPS102   @ $3D6  / amiga bw  
'   SPS439   @ $3B0  / amiga bw  
'   SPS1927  @ $3AF  / amiga bw
'   SPS43    @ $35A  / amiga bext  

Rem   ink 5,0 : text 
If DBUG=True
   Screen Open 0,320,256,16,Lowres : Clear Key 
   Curs Off : Hide : Flash Off : Auto View On : Autoback 0
   Get Icon Palette : Cls 0 : Colour $F,$101 : Ink 6,0

   Change Bank Font 9 : Flash Off 
Rem Text 60,70,"~ VERSION "+BWVER$+" IDENTIFIED ~" 
    '     TXT$="BLOODWYCH EDITOR"
    '     Ink 12,0 : Text 160-((Len(TXT$)/2)*8),(16*2),TXT$ : Ink 6,0
    '     TXT$="~ IMPORT / EXPORT DATA FILES ~"
    '     Ink 9,0 : Text 160-((Len(TXT$)/2)*8),(16*3),TXT$ : Ink 6,0 
         TXT$="~ VERSION "+BWVER$+" IDENTIFIED ~"
         Ink 6,0 : Text 160-((Len(TXT$)/2)*8),(16*6),TXT$ : Ink 6,0
    '     TXT$="(C) ULTIMATE AMIGA"
    '     Ink 3,0 : Text 160-((Len(TXT$)/2)*8),(16*14),TXT$ : Ink 6,0

   Wait 40
   Screen Close 0
End If 
End Proc
Procedure _GETBINARY


   Auto View Off : Screen Open 3,320,256,16,Lowres : Screen Hide 3 : Screen To Front 3
   Curs Off : Get Icon Palette : Flash Off : Hide 
   Change Bank Font 9 : Cls 0 : Autoback 2

   INOUTFOLDER$="data/"

   Dim CURRENTFILE$(255),CURSOP(10)

   Examine Dir INOUTFOLDER$

   Screen 3 : Ink 6,0

   For A=0 To 255

      REDO:
      CURRENTFILE$(A)=Examine Next$
      If CURRENTFILE$(A)="" Then Exit 

      If Left$(Lower$(CURRENTFILE$(A)),8)="bextsave" Then Goto REDO
      If Left$(Lower$(CURRENTFILE$(A)),9)="bloodsave" Then Goto REDO
      If Left$(Lower$(CURRENTFILE$(A)),2)="._" Then Goto REDO
      If Object Size<250000 Then Goto REDO
      If Object Type>0 Then Goto REDO
   Next A


   FILECOUNT=A
   THISPAGE=1
   PAGES=1+((FILECOUNT-1)/6)

   USECURS=True
   CURSPOS=1
   SELECTED=-1

   Print PAGES
   Double Buffer 

   DRWPAGE:

   Rem If Not Exist(Dir$+INOUTFOLDER$) Then Mkdir Dir$+INOUTFOLDER$ 


   Ink 6,0 : Cls 0 : Auto View Off : Autoback 0 : Wait Vbl 

   PLACEX=30 : Clear Key 

   TXT$="BLOODWYCH EDITOR"
   Ink 12,0 : Text 160-((Len(TXT$)/2)*8),(16*2),TXT$ : Ink 6,0

   TXT$="~ SELECT FILE TO EDIT ~"
   Ink 9,0 : Text 160-((Len(TXT$)/2)*8),(16*3),TXT$ : Ink 6,0

   TXT$="(C) ULTIMATE AMIGA"
   Ink 3,0 : Text 160-((Len(TXT$)/2)*8),(16*14),TXT$ : Ink 6,0



   For A=0 To 10
      CURSOP(A)=False
   Next A

   For A=0 To 5
      XX=((THISPAGE-1)*6)+A
      If CURRENTFILE$(XX)<>""
         Text 28,70+(A*16),"F"+Right$(Str$(A+1),1)+"   "+Upper$(CURRENTFILE$(XX))
         CURSOP(A+1)=70+(A*16)
      End If 
   Next A


   If PAGES>1 and THISPAGE>1
      Text 28,70+(7*16),"F9   PREVIOUS PAGE"
      CURSOP(9)=70+(7*16)
   End If 

   If PAGES>1 and THISPAGE<PAGES
      Text 28,70+(8*16),"F10  NEXT PAGE"
      CURSOP(10)=70+(8*16)
   End If 

   If USECURS=True
      Text 28+(8*3),CURSOP(CURSPOS),"*"
   End If 

   Screen To Front 3 : Screen Show 3 : View 
   Screen Copy Logic(3) To Physic(3)
   KEYHELD=True

   ' LOOP 

   Repeat 


      For A=0 To 6
         If Key State($50+A)=True or(SELECTED>-1 and SELECTED<7)
            If SELECTED>-1 : A=CURSPOS-1 : End If 
            XX=((THISPAGE-1)*6)+A
            BINARY$=CURRENTFILE$(XX)
            Screen Close 3
            Pop Proc
         End If 
      Next A

      If PAGES>1 and THISPAGE>1 and(Key State($58)=True or SELECTED=9) and KEYHELD=False
         THISPAGE=THISPAGE-1
         KEYHELD=True
         CURSPOS=1
         Goto DRWPAGE
      End If 

      If PAGES>1 and THISPAGE<PAGES and(Key State($59)=True or SELECTED=10) and KEYHELD=False
         THISPAGE=THISPAGE+1
         KEYHELD=True
         CURSPOS=1
         Goto DRWPAGE
      End If 



      If(Jdown(1)=True or Key State($4D)=True) and KEYHELD=False

         RETRY_UP:
         For B=CURSPOS+1 To 10
            If B>10 : Exit : End If 
            If CURSOP(B)<>0 : CURSPOS=B : Exit : End If 
         Next B

         If B>10 : CURSPOS=0 : Goto RETRY_UP : End If 

         KEYHELD=True
         Goto DRWPAGE

      Else If(Jup(1)=True or Key State($4C)=True) and KEYHELD=False
         RETRY_DOWN:
         For B=CURSPOS-1 To 1 Step -1
            If CURSOP(B)<>0 : CURSPOS=B : Exit : End If 
         Next B

         If B<1 : CURSPOS=11 : Goto RETRY_DOWN : End If 

         KEYHELD=True
         Goto DRWPAGE

      Else If(Fire(1)=True or Key State($40)=True) and KEYHELD=False
         SELECTED=CURSPOS

      End If 


      If Key State($45)=True
         BINARY$=""
         Screen Close 3
         Pop Proc
      End If 

      If Key State($40)=False and Key State($59)=False and Key State($58)=False and Key State($4D)=False and Key State($4C)=False and Jup(1)=False
         KEYHELD=False

      Else 
         KEYHELD=True
      End If 

      Rem   If Jup(1)=False Then KEYHELD=False 


   Until 1=0



End Proc
Procedure _MAKECOLOURBOBS

Rem Load Iff "editor/graphics/graphics",2 : Screen Hide 2

'============
Rem If DBUG=True 
   Screen Open 0,320,200,16,Lowres
   Curs Off : Hide : Flash Off : Auto View On : Autoback 0
   Get Palette 2 : Cls 0 : Colour $F,$101 : Ink 6,0
Rem End If 

Change Bank Font 9 : Text 40,70,"~ CREATING CHARACTER GRAPHICS ~"
For CHAR=0 To MONSTERTYPECOUNT
   _BUILD_CHARS[CHAR]
   If DBUG=True : Screen 0 : Text 100,100,"CHARACTER: "+Hex$(CHAR,2) : End If 
   If DBUG=True : Screen 0 : Hot Spot 250,$12 : Paste Bob 135,120,250 : End If 
   Exchange Bob 250,CHAR+$4
Next CHAR
Cls 0
Change Bank Font 9 : Text 50,70,"~ CREATING MONSTER GRAPHICS ~"
' starts at 90...  
' get the monsters 
   _MAJORBOBCOUNT=90
   For A=$65 To $6A
      For GRADE=0 To NUMBEROFGRADES-1
            _BUILD_MONST[A,GRADE]
             Exchange Bob 250,90+((A-$65)*NUMBEROFGRADES)+GRADE
             Hot Spot 90+((A-$65)*NUMBEROFGRADES)+GRADE,$12
          If DBUG=True : Screen 0 : Text 80,100,"MONSTER: "+Hex$(A,2)+"  GRADE: "+Hex$(GRADE,1) : End If 
          If DBUG=True : Screen 0 : Bob 1,148,170,90+((A-$65)*NUMBEROFGRADES)+GRADE : End If 
          _MAJORBOBCOUNT=_MAJORBOBCOUNT+1
      Next GRADE
   Next A

' illusion 
   A=$65 : GRADE=-1
     _BUILD_MONST[A,GRADE]
      Exchange Bob 250,_MAJORBOBCOUNT
      Hot Spot _MAJORBOBCOUNT,$12

   If DBUG=True : Screen 0 : Text 80,100,"MONSTER: "+Hex$(A,2)+"  GRADE: "+Hex$(GRADE,1) : End If 
   If DBUG=True : Screen 0 : Bob 1,148,170,_MAJORBOBCOUNT : End If 
     _MAJORBOBCOUNT=_MAJORBOBCOUNT+1

' original entropy 
   A=$6B : GRADE=-1
     _BUILD_MONST[A,GRADE]
      Exchange Bob 250,_MAJORBOBCOUNT
      Hot Spot _MAJORBOBCOUNT,$12
   If DBUG=True : Screen 0 : Text 80,100,"MONSTER: "+Hex$(A,2)+"  GRADE: "+Hex$(GRADE,1) : End If 
   If DBUG=True : Screen 0 : Bob 1,148,170,_MAJORBOBCOUNT : End If 
     _MAJORBOBCOUNT=_MAJORBOBCOUNT+1

If BEXT=False Then Goto JUMP : 
' chaos guardians
   For A=$6B To $6C : B=A-$6B
       For GRADE=0 To 3
      _BUILD_MONST[A,GRADE]
       Exchange Bob 250,_MAJORBOBCOUNT+(B*$4)+GRADE
       Hot Spot _MAJORBOBCOUNT+(B*$4)+GRADE,$12
      If DBUG=True : Screen 0 : Text 80,100,"MONSTER: "+Hex$(A,2)+"  GRADE: "+Hex$(GRADE,1) : End If 
      If DBUG=True : Screen 0 : Bob 1,148,170,_MAJORBOBCOUNT+(B*$4)+GRADE : End If 
       Next GRADE
    Next A
      _MAJORBOBCOUNT=_MAJORBOBCOUNT+8
JUMP:
Wait 5

For BNUMB=$4 To _MAJORBOBCOUNT
   No Mask BNUMB
Next BNUMB
If DBUG=True
   Screen Close 0
End If 
''''' Screen Close 2 
Pop Proc

End Proc
Procedure _BUILD_MONST[MONSTER,GRADE]
 Dim NEWCLR(3)
     Def Fn MONSTERPALETTE=Peek(Start(MONSTERCOLOURBANK)+LOOKUPMONSTERPALETTE+((PALL+1)*4)+PICK)
       Def Fn SUMMONCOLOUR=Peek(Start(MONSTERCOLOURBANK)+LOOKUPSUMMONCOLOURS+GRADE)
     Def Fn BEHOLDERCOLOUR=Peek(Start(MONSTERCOLOURBANK)+LOOKUPBEHOLDERCOLOURS+GRADE)
     Def Fn BEHEMOTHCOLOUR=Peek(Start(MONSTERCOLOURBANK)+LOOKUPBEHEMOTHCOLOURS+GRADE)
         Def Fn CRABCOLOUR=Peek(Start(MONSTERCOLOURBANK)+LOOKUPCRABCOLOURS+GRADE)
       Def Fn DRAGONCOLOUR=Peek(Start(MONSTERCOLOURBANK)+LOOKUPDRAGONCOLOURS+GRADE)
       Def Fn ENTROPYPALETTE=Peek(Start(10)+LOOKUPENTROPYPALETTE+(ITEM*$4)+(GRADE*$8)+PICK)
   Gosub DRW_MONSTER
Pop Proc

FIND_IN_OUT_MONSTER:
    INY=162 : YOFF=0 : XOFF=1
    If ITEM=0 : XOFF=1 : INX=1 : SRCWIDTH=31 : SRCHEIGHT=47 : End If : Rem -- summon
    If ITEM=1 : XOFF=1 : INX=1 : SRCWIDTH=31 : SRCHEIGHT=47 : End If : Rem -- summon
    If ITEM=2 : XOFF=4 : INX=33 : SRCWIDTH=23 : SRCHEIGHT=28 : End If : Rem -- beholder  
    If ITEM=3 : XOFF=5 : INX=58 : SRCWIDTH=70 : SRCHEIGHT=46 : End If : Rem -- behemoth
    If ITEM=4 : XOFF=4 : INX=130 : SRCWIDTH=55 : SRCHEIGHT=30 : End If : Rem -- crab
    If ITEM=5 : XOFF=0 : INX=187 : SRCWIDTH=64 : SRCHEIGHT=55 : End If : Rem -- big dragon
    If ITEM=6 : XOFF=1 : INX=252 : SRCWIDTH=44 : SRCHEIGHT=39 : End If : Rem -- small dragon
    If ITEM=7 and GRADE<0 : INY=210 : XOFF=0 : INX=1 : SRCWIDTH=48 : SRCHEIGHT=51 : End If : Rem -- entropy (BW)
    If ITEM=7 and GRADE>=0 : INY=210 : XOFF=0 : INX=51 : SRCWIDTH=48 : SRCHEIGHT=51 : End If : Rem -- entropy (BEXT)
                 If ITEM=8 : INY=210 : XOFF=0 : INX=51 : SRCWIDTH=48 : SRCHEIGHT=51 : End If : Rem -- entropy (BEXT)
      OUTY=INY+SRCHEIGHT
      OUTX=INX+SRCWIDTH
Return 

NEW_GFX:
   Screen 2
     NUTARGX=400
     NUTARGY=20
     Ink $F
     If NEWGRF=True Then Bar NUTARGX-8,NUTARGY-8 To NUTARGX+50,NUTARGY+100

    Ink $F : Bar NUTARGX,NUTARGY To NUTARGX+100,NUTARGY+100
    For DRWY=YOFF To SRCHEIGHT+YOFF
     For DRWX=XOFF To SRCWIDTH+XOFF
              CHKCOL=Turbo Point(INX+DRWX-XOFF,INY+DRWY-YOFF)
              If CHKCOL=$F and NEWGRF=True
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,CHKCOL
         Else If CHKCOL=$0 or CHKCOL=$4 or CHKCOL=$8 or CHKCOL=$C
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,(NEWCLR(CHKCOL/$4))
         Else If CHKCOL<>$F
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,CHKCOL
         End If 
     Next DRWX
     Next DRWY
Rem  Screen Show 2 : Screen 2 : Screen To Front 2 : View : Wait Key  
Return 

DRW_MONSTER:
     ITEM=MONSTER-$64 : Gosub FIND_IN_OUT_MONSTER

 ' FIND THE PALETTE FOR THIS MONSTER / GRADE... 
    If ITEM=0 Then PALL= Fn SUMMONCOLOUR : Rem -- summon
    If ITEM=1 Then PALL= Fn SUMMONCOLOUR : Rem -- summon
    If ITEM=2 Then PALL= Fn BEHOLDERCOLOUR : Rem -- beholder  
    If ITEM=3 Then PALL= Fn BEHEMOTHCOLOUR : Rem -- behemoth
    If ITEM=4 Then PALL= Fn CRABCOLOUR : Rem -- crab
    If ITEM=5 Then PALL= Fn DRAGONCOLOUR : Rem -- big dragon
    If ITEM=6 Then PALL= Fn DRAGONCOLOUR : Rem -- small dragon
Rem    If ITEM=7 : Rem -- entropy (BW / BEXT)      
Rem    If ITEM=8 : Rem -- entropy (BEXT)     

   If GRADE=-1 Then PALL=-1

   If ITEM=7 and GRADE<0
      For PICK=0 To 3 : NEWCLR(PICK)=PICK*$4 : Next PICK
   Else If ITEM=7 or ITEM=8
     ITEM=ITEM-7
     For PICK=0 To 3 : NEWCLR(PICK)= Fn ENTROPYPALETTE : Next PICK
   Else 
     ' NOW GET THE FOUR COLOURS USED ON THAT PALETTE
     For PICK=0 To 3 : NEWCLR(PICK)= Fn MONSTERPALETTE : Next PICK
   End If 

     NEWGRF=True : Gosub NEW_GFX
     If SRCWIDTH>0 and SCRWIDTH<16 Then REALWIDTH=16
     If SRCWIDTH>16 and SCRWIDTH<32 Then REALWIDTH=32
     If SRCWIDTH>32 and SCRWIDTH<48 Then REALWIDTH=48
     If SRCWIDTH>48 and SCRWIDTH<64 Then REALWIDTH=64
     If SRCWIDTH>64 and SCRWIDTH<80 Then REALWIDTH=80
     If SRCWIDTH>80 and SCRWIDTH<96 Then REALWIDTH=96
     If SRCWIDTH>96 and SCRWIDTH<112 Then REALWIDTH=112
     Get Bob 2,250,NUTARGX,NUTARGY To NUTARGX+REALWIDTH,NUTARGY+SRCHEIGHT : No Mask 250

'     Screen To Front 2 : Screen Show 2 : View 
'     Paste Bob 20,20,250 : Wait Key 

Return 


End Proc

Procedure _BUILD_CHARS[CHAR]
Dim NEWCLR(3)
' ======== 
_MAKEFUNCTIONS:
   Def Fn CHARHEAD=Peek(Start(10)+LOOKUPCHARSHEADS+CHAR)
   Def Fn CHARBODY=Peek(Start(10)+LOOKUPCHARSBODIES+CHAR)
   Def Fn CHARCOLOUR=Peek(Start(10)+LOOKUPCHARSCOLOURS+(CHAR*($14+(BEXT*-4)))+(ITEM*$4)+PICK)

   Gosub DRW_CHAR

Pop Proc

FIND_IN_OUT_HEADS:
   INX= Fn CHARHEAD*SRCWIDTH
   INY=147
   OUTX=INX+SRCWIDTH-1
   OUTY=INY+SRCHEIGHT-1

Return 
FIND_IN_OUT:
        INY=((ITEM-1)*(SRCHEIGHT+1))+((ITEM-1)+1)
    If ITEM=4 Then SRCHEIGHT=21

      OUTY=INY+SRCHEIGHT
       INX=( Fn CHARBODY*(SRCWIDTH+1))+( Fn CHARBODY+1)
      OUTX=INX+SRCWIDTH
Return 

NEW_GFX:
   Screen 2
     NUTARGX=440
     NUTARGY=20
     Ink $F
     If NEWGRF=True Then Bar NUTARGX-8,NUTARGY-8 To NUTARGX+50,NUTARGY+100
    For DRWY=YOFF To SRCHEIGHT+YOFF
     For DRWX=XOFF To SRCWIDTH+XOFF
              CHKCOL=Turbo Point(INX+DRWX-XOFF,INY+DRWY-YOFF)
              If CHKCOL=$F and NEWGRF=True
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,CHKCOL
         Else If CHKCOL=$0 or CHKCOL=$4 or CHKCOL=$8 or CHKCOL=$C
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,(NEWCLR(CHKCOL/$4))
         Else If CHKCOL<>$F
                 Turbo Plot NUTARGX+DRWX,NUTARGY+DRWY,CHKCOL
         End If 
     Next DRWX
     Next DRWY
Rem  Screen Show 2 : Screen 2 : Screen To Front 2 : View : Wait Key  
Return 

DRW_CHAR:

     SRCWIDTH=24 : SRCHEIGHT=39 : YOFF=9 : XOFF=0
     ITEM=1 : Gosub FIND_IN_OUT : Rem -------- legs! 
     For PICK=0 To 3 : NEWCLR(PICK)= Fn CHARCOLOUR : Next PICK
     NEWGRF=True : Gosub NEW_GFX
     SRCWIDTH=24 : SRCHEIGHT=39 : YOFF=9 : XOFF=0
     ITEM=2 : Gosub FIND_IN_OUT : Rem -------- bodies! 
     For PICK=0 To 3 : NEWCLR(PICK)= Fn CHARCOLOUR : Next PICK
     NEWGRF=False : Gosub NEW_GFX
     SRCWIDTH=24 : SRCHEIGHT=39 : YOFF=9 : XOFF=0
     ITEM=3 : Gosub FIND_IN_OUT : Rem -------- arms! 
     For PICK=0 To 3 : NEWCLR(PICK)= Fn CHARCOLOUR : Next PICK
     NEWGRF=False : Gosub NEW_GFX
     SRCWIDTH=16 : SRCHEIGHT=13 : YOFF=0 : XOFF=4
     ITEM=0 : Gosub FIND_IN_OUT_HEADS : Rem -------- heads!  
     For PICK=0 To 3 : NEWCLR(PICK)= Fn CHARCOLOUR : Next PICK
     NEWGRF=False : Gosub NEW_GFX
Rem     NUTARGX=50-3 : NUTARGY=180 
Rem     NUTARGX=280-3 : NUTARGY=120  
        NUTARGX=NUTARGX-3
     Get Bob 2,250,NUTARGX,NUTARGY-1 To NUTARGX+32,NUTARGY+51 : No Mask 250
'     Screen To Front 2 : Screen Show 2 : View : Wait Key  
     SRCWIDTH=24 : SRCHEIGHT=39 : YOFF=0 : XOFF=0
     ITEM=4 : Gosub FIND_IN_OUT : Rem -------- 
     For PICK=0 To 3 : NEWCLR(PICK)= Fn CHARCOLOUR : Next PICK
     NEWGRF=True : Gosub NEW_GFX
'     Screen To Front 2 : Screen Show 2 : View : Wait Key  
     Get Bob 2,251,NUTARGX-4,NUTARGY-4 To NUTARGX+28,NUTARGY+26 : No Mask 251

Return 

CHARHEAD_PUT:
   Poke(LOOKUPCHARSHEADS+CHAR),PATCHVALUE
Return 
CHARBODY_PUT:
   Poke(LOOKUPCHARSBODIES+CHAR),PATCHVALUE
Return 
CHARCOLOUR_PUT:
   Poke(LOOKUPCHARSCOLOURS+(CHAR*$14)+(ITEM*$4)+PICK),PATCHVALUE
Return 
End Proc
Procedure _STATS_MONSTERS
Dim MXMONSTERS(6)
Dim MONSTERCOUNTS(6,$100),MONSTERLEVCOUNTS(6,$100)
Dim MONSTERCROSSCOUNT(9,$100)

    LINEEND$=Chr$($D)+Chr$($A)
      For A=0 To 6
         MXMONSTERS(A)=Deek(Start(10)+LOOKUPMONSTERCOUNT+(A*2))
      Next A
'====================
' clear the array
   For A=0 To 5
      For B=0 To MONSTERTYPECOUNT
         MONSTERCOUNTS(A,B)=0
      Next B
   Next A

   For A=0 To 5
      For B=0 To $100
         MONSTERLEVCOUNTS(A,B)=0
      Next B
   Next A

' pick a tower 
For TW=0 To 5+(BEXT*2)

   _NUMB_TO_TOWER[TW]
    TWER$=Param$
' read the file(s), and count  
      For MONSTERA=0 To MXMONSTERS(TW) : Rem $300/6 

         MONSTERTYPE=Peek(Start(10)+LOOKUPMONSTER(TW)+(MONSTERA*$6)+4)
        MONSTERLEVEL=Peek(Start(10)+LOOKUPMONSTER(TW)+(MONSTERA*$6)+3)

  Rem       MONSTERCOUNTS(TW,MONSTERTYPE)=MONSTERCOUNTS(TW,MONSTERTYPE)+1
  Rem        MONSTERCOUNTS(6,MONSTERTYPE)=MONSTERCOUNTS(6,MONSTERTYPE)+1 
  Rem       MONSTERLEVCOUNTS(TW,MONSTERLEVEL)=MONSTERLEVCOUNTS(TW,MONSTERLEVEL)+1
  Rem       MONSTERLEVCOUNTS(6,MONSTERLEVEL)=MONSTERLEVCOUNTS(6,MONSTERLEVEL)+1
         Inc MONSTERCOUNTS(TW,MONSTERTYPE)
         Inc MONSTERCOUNTS(6,MONSTERTYPE)
         Inc MONSTERLEVCOUNTS(TW,MONSTERLEVEL)
         Inc MONSTERLEVCOUNTS(6,MONSTERLEVEL)
         If MONSTERTYPE=>$64 and MONSTERTYPE<=$70
           Bclr 7,MONSTERLEVEL
               Inc MONSTERCROSSCOUNT(MONSTERTYPE-$64,MONSTERLEVEL)
         End If 

      Next MONSTERA
Next TW


' ====================================== 
' ... make text for the output file  

FULLTEXT$=""

'--------------------- 
' headers
FULLTEXT$=FULLTEXT$+"MONSTERS FOR: "+LINEEND$+" "+Chr$($9)+Chr$($9)
For TW=0 To 6+(BEXT*2)
   _NUMB_TO_TOWER[TW]
    TWER$=Param$
   FULLTEXT$=FULLTEXT$+TWER$+Chr$($9)
Next TW
FULLTEXT$=FULLTEXT$+LINEEND$

'--------------------- 
   For MONSTERTYPE=$0 To $6B-BEXT
   If MONSTERTYPE=MONSTERTYPECOUNT+1 Then MONSTERTYPE=$64
   FULLTEXT$=FULLTEXT$+"Type: "+Chr$($9)+Hex$(MONSTERTYPE,2)+Chr$($9)
    For TW=0 To 6
     FULLTEXT$=FULLTEXT$+Str$(MONSTERCOUNTS(TW,MONSTERTYPE))+Chr$(9)
      If TW=6 and MONSTERCOUNTS(TW,MONSTERTYPE)=0 Then FULLTEXT$=FULLTEXT$+"   <<<<<"
      If TW=6 and MONSTERCOUNTS(TW,MONSTERTYPE)=1 Then FULLTEXT$=FULLTEXT$+"   <<<"
      If TW=6 and MONSTERCOUNTS(TW,MONSTERTYPE)=2 Then FULLTEXT$=FULLTEXT$+"   <"
    Next TW

   FULLTEXT$=FULLTEXT$+LINEEND$
   Next MONSTERTYPE

   FULLTEXT$=FULLTEXT$+LINEEND$
   FULLTEXT$=FULLTEXT$+LINEEND$

'--------------------- 
' headers (levels) 

FULLTEXT$=FULLTEXT$+"MONSTER LEVELS FOR: "+LINEEND$+Chr$($9)+" "+Chr$($9)
For TW=0 To 6+(BEXT*2)
   _NUMB_TO_TOWER[TW]
    TWER$=Param$
   FULLTEXT$=FULLTEXT$+TWER$+Chr$($9)
Next TW
FULLTEXT$=FULLTEXT$+LINEEND$

'--------------------- 
  ' find highest used level
   For A=0 To $100
      TEST=MONSTERLEVCOUNTS(6,A)
      If TEST>0 Then TPLEVEL=A
   Next A

   For MONSTERLEVEL=$0 To TPLEVEL
   If MONSTERLEVCOUNTS(6,MONSTERLEVEL)>0
      FULLTEXT$=FULLTEXT$+"Level: "+Chr$($9)+"!"+Lzstr$(MONSTERLEVEL,2)+Chr$($9)
       For TW=0 To 6
        FULLTEXT$=FULLTEXT$+Str$(MONSTERLEVCOUNTS(TW,MONSTERLEVEL))+Chr$(9)
'      If TW=6 and MONSTERCOUNTS(TW,MONSTERLEVEL)=0 Then FULLTEXT$=FULLTEXT$+"   <<<<<"
'      If TW=6 and MONSTERCOUNTS(TW,MONSTERLEVEL)=1 Then FULLTEXT$=FULLTEXT$+"   <<<"
'      If TW=6 and MONSTERCOUNTS(TW,MONSTERlevel)=2 Then FULLTEXT$=FULLTEXT$+"   <"
       Next TW
      FULLTEXT$=FULLTEXT$+LINEEND$

   End If 
   Next MONSTERLEVEL
FULLTEXT$=FULLTEXT$+LINEEND$


'--------------------- 
' headers (monster type vs levels) 

FULLTEXT$=FULLTEXT$+"MONSTER LEVELS FOR: "+LINEEND$+Chr$($9)+" "+Chr$($9)
For MONSTERTYPE=$64 To $6B-BEXT
   FULLTEXT$=FULLTEXT$+Hex$(MONSTERTYPE)+Chr$($9)
Next MONSTERTYPE
FULLTEXT$=FULLTEXT$+LINEEND$

'--------------------- 
  ' find highest used level
   For A=0 To $100
    For MONSTERTYPE=0 To 9
      TEST=MONSTERCROSSCOUNT(MONSTERTYPE,A)
      If TEST>0 Then TPLEVEL=A
    Next MONSTERTYPE
   Next A

   For MONSTERLEVEL=$0 To TPLEVEL
           FULLTEXT$=FULLTEXT$+"Level: "+Chr$($9)+"!"+Lzstr$(MONSTERLEVEL,2)+Chr$($9)
   Rem        If MONSTERCROSSCOUNT(MONSTERTYPE,MONSTERLEVEL)>0

           For MONSTERTYPE=0 To 7
            FULLTEXT$=FULLTEXT$+Str$(MONSTERCROSSCOUNT(MONSTERTYPE,MONSTERLEVEL))+Chr$(9)
           Next MONSTERTYPE
           FULLTEXT$=FULLTEXT$+LINEEND$
   Rem   End If 
   Next MONSTERLEVEL
FULLTEXT$=FULLTEXT$+LINEEND$


' ====================================== 
' type it to a bank and save it
Reserve As Work 15,Len(FULLTEXT$)

For A=1 To Len(FULLTEXT$)
   Poke Start(15)+A-1,Asc(Mid$(FULLTEXT$,A,1))
Next A

Wsave "editor/Game Data/Statistics ("+BINARY$+")/Monster_Usage.txt",15
Erase 15

End Proc

Procedure _STATS_SWITCHES
Dim SWITCHCOUNTS(6,31)
    LINEEND$=Chr$($D)+Chr$($A)


' pick a tower 
For TW=0 To 5+(BEXT*2)

   _NUMB_TO_TOWER[TW]
    TWER$=Param$
    COUNT=0
' read the file(s), and count  

      For TILE=0 To $FFF Step 2
          FLOORTYPE=Peek(Start(10)+LOOKUPTOWER(TW)+TILE+1)
         FLOORPARAM=Peek(Start(10)+LOOKUPTOWER(TW)+TILE+0)
            For A=3 To 7
            Bclr A,FLOORTYPE
            Next A
      '
      ' standard switch
      '
         If FLOORTYPE=$1
          ' check its a pad
            CHCK=0
            If Btst(1,FLOORPARAM)=True : Bset 1,CHCK : End If 
            If Btst(0,FLOORPARAM)=True : Bset 0,CHCK : End If 

         If CHCK=2
           ' find trigger reference       
              SWITCHREF=FLOORPARAM/8

           ' add to count 
            If SWITCHREF<>0 and SWITCHREF<16
Rem               Print "   ";Hex$(FLOORPARAM);"  ";Hex$(FLOORTYPE)
               Inc SWITCHCOUNTS(TW,SWITCHREF)
            Else If SWITCHREF>=16 and TW<5+(BEXT*2)
               Inc SWITCHCOUNTS(TW+1,SWITCHREF-16)
            End If 

         End If 
        End If 
      Next TILE
Next TW



'
' count game total 
'
For SWITCHREF=0 To 31
   For TW=0 To 5+(BEXT*2)
      SWITCHCOUNTS(6+(BEXT*2),SWITCHREF)=SWITCHCOUNTS(6+(BEXT*2),SWITCHREF)+SWITCHCOUNTS(TW,SWITCHREF)
   Next TW
Next SWITCHREF

' compile header 

'  
' do headers 
'

FULLTEXT$="SWITCHES USED:"+Chr$(9)
For TW=0 To 6+(BEXT*2)
   _NUMB_TO_TOWER[TW]
    TWER$=Param$
   FULLTEXT$=FULLTEXT$+TWER$+Chr$(9)
Next TW
FULLTEXT$=FULLTEXT$+LINEEND$

' compile into one line each 
'

For SWITCHREF=0 To 15
  FULLTEXT$=FULLTEXT$+"Ref: "+Lzstr$(SWITCHREF,2)+Chr$(9)+Chr$(9)
   For TW=0 To 6+(BEXT*2)
      FULLTEXT$=FULLTEXT$+Lzstr$(SWITCHCOUNTS(TW,SWITCHREF),2)
      FULLTEXT$=FULLTEXT$+Chr$(9)
   Next TW
   FULLTEXT$=FULLTEXT$+LINEEND$
Next SWITCHREF



'
' type it to a bank and save it
'
Reserve As Work 15,Len(FULLTEXT$)
For A=1 To Len(FULLTEXT$)
   Poke Start(15)+A-1,Asc(Mid$(FULLTEXT$,A,1))
Next A
Rem Wsave "Editor/Game Data/Statistics/Switches_Usage_"+BINARY$+".txt",15
Wsave "editor/Game Data/Statistics ("+BINARY$+")/Switches_Usage.txt",15
Erase 15


End Proc

Procedure _STATS_TRIGGERS
Dim VIS_PADCOUNTS(6,31),INV_PADCOUNTS(6,31),TTL_PADCOUNTS(6,31)
    LINEEND$=Chr$($D)+Chr$($A)


' pick a tower 
For TW=0 To 5+(BEXT*2)
   _NUMB_TO_TOWER[TW]
    TWER$=Param$

   COUNT=0
' read the file(s), and count  

      For TILE=0 To $FFF Step 2
          FLOORTYPE=Peek(Start(10)+LOOKUPTOWER(TW)+TILE+1)
         FLOORPARAM=Peek(Start(10)+LOOKUPTOWER(TW)+TILE+0)
            For A=3 To 7
            Bclr A,FLOORTYPE
            Next A
      '
      ' standard green / clear triggers
      '
         If FLOORTYPE=$6
          ' check its a trigger
            If Btst(1,FLOORPARAM)=True
           ' find trigger reference       
              TRIGREF=FLOORPARAM/8
           ' add to count 
            If TRIGREF<>0
               Inc VIS_PADCOUNTS(TW,TRIGREF)
            End If 
            End If 
      '
      ' count the ones you cant see yet
      '
         Else If FLOORTYPE=$0 and FLOORPARAM<>0
          ' check its a trigger
            If Btst(1,FLOORPARAM)=True
           ' find trigger reference       
              TRIGREF=FLOORPARAM/8
           ' add to count 
           If TRIGREF<>0
               Inc INV_PADCOUNTS(TW,TRIGREF)
           End If 
         End If 
        End If 
      Next TILE
Next TW




'
' count game total 
'
For TRIGREF=0 To 31
   For TW=0 To 5+(BEXT*2)
      VIS_PADCOUNTS(6,TRIGREF)=VIS_PADCOUNTS(6,TRIGREF)+VIS_PADCOUNTS(TW,TRIGREF)
      INV_PADCOUNTS(6,TRIGREF)=INV_PADCOUNTS(6,TRIGREF)+INV_PADCOUNTS(TW,TRIGREF)
   Next TW
Next TRIGREF
' compile header 

'  
' do headers 
'

FULLTEXT$="PADS USED:"+Chr$(9)
For TW=0 To 6+(BEXT*2)
   _NUMB_TO_TOWER[TW]
    TWER$=Param$
   FULLTEXT$=FULLTEXT$+TWER$+Chr$(9)
Next TW
FULLTEXT$=FULLTEXT$+LINEEND$

' compile into one line each 
'

For TRIGREF=0 To 31
  FULLTEXT$=FULLTEXT$+"Ref: "+Lzstr$(TRIGREF,2)+Chr$(9)+Chr$(9)
   For TW=0 To 6+(BEXT*2)
   TTL_PADCOUNTS(TW,TRIGREF)=VIS_PADCOUNTS(TW,TRIGREF)+INV_PADCOUNTS(TW,TRIGREF)
      FULLTEXT$=FULLTEXT$+Lzstr$(TTL_PADCOUNTS(TW,TRIGREF),2)
Rem   FULLTEXT$=FULLTEXT$+" ("+Lzstr$(INV_PADCOUNTS(TW,TRIGREF),2)+")" 
      FULLTEXT$=FULLTEXT$+Chr$(9)
   Next TW
   FULLTEXT$=FULLTEXT$+LINEEND$
Next TRIGREF



'
' type it to a bank and save it
'
Reserve As Work 15,Len(FULLTEXT$)

For A=1 To Len(FULLTEXT$)
   Poke Start(15)+A-1,Asc(Mid$(FULLTEXT$,A,1))
Next A
Wsave "editor/Game Data/Statistics ("+BINARY$+")/TriggerPads_Usage.txt",15
'Wsave "editor/Statistics/TriggerPads_Usage_"+BINARY$+".txt",15
Erase 15

End Proc
Procedure _STATS_OBJECTS
End Proc

Procedure _NUMB_TO_TOWER[TW]
      TWER$="Unknown"
      If TW=0 and BEXT=False Then TWER$="mod0"
      If TW=1 and BEXT=False Then TWER$="serp"
      If TW=2 and BEXT=False Then TWER$="moon"
      If TW=3 and BEXT=False Then TWER$="drag"
      If TW=4 and BEXT=False Then TWER$="chaos"
      If TW=5 and BEXT=False Then TWER$="zendik"
      If TW=6 and BEXT=False Then TWER$="game"

      If TW=0 and BEXT=True Then TWER$="serpex"
      If TW=1 and BEXT=True Then TWER$="chaosex"
      If TW=2 and BEXT=True Then TWER$="moonex"
      If TW=3 and BEXT=True Then TWER$="dragex"
      If TW=4 and BEXT=True Then TWER$="game"

End Proc[TWER$]
